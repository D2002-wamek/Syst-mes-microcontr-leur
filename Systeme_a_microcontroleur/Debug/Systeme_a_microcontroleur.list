
Systeme_a_microcontroleur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c90  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004e18  08004e18  00005e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e90  08004e90  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e90  08004e90  00005e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e98  08004e98  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e98  08004e98  00005e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e9c  08004e9c  00005e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004ea0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08004f08  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004f08  000062c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c750  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca0  00000000  00000000  000127e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00014488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d8  00000000  00000000  00015010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026aef  00000000  00000000  000158e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d946  00000000  00000000  0003c3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb8b4  00000000  00000000  00049d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001355d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003540  00000000  00000000  00135614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  00138b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e00 	.word	0x08004e00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004e00 	.word	0x08004e00

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MCP23S17_WriteRegister>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI3_Init(void);

/* Fonction d'écriture d'un registre */
void MCP23S17_WriteRegister(MCP23S17_HandleTypeDef *dev, uint8_t reg, uint8_t value) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
 80004c4:	4613      	mov	r3, r2
 80004c6:	70bb      	strb	r3, [r7, #2]
    uint8_t data[3] = {MCP23S17_ADDRESS, reg, value};
 80004c8:	2340      	movs	r3, #64	@ 0x40
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	78fb      	ldrb	r3, [r7, #3]
 80004ce:	737b      	strb	r3, [r7, #13]
 80004d0:	78bb      	ldrb	r3, [r7, #2]
 80004d2:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_RESET);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6858      	ldr	r0, [r3, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	891b      	ldrh	r3, [r3, #8]
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	f000 ffd2 	bl	8001488 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(dev->hspi, data, 3, HAL_MAX_DELAY);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	f107 010c 	add.w	r1, r7, #12
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295
 80004f0:	2203      	movs	r2, #3
 80004f2:	f002 fba4 	bl	8002c3e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_SET);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6858      	ldr	r0, [r3, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	891b      	ldrh	r3, [r3, #8]
 80004fe:	2201      	movs	r2, #1
 8000500:	4619      	mov	r1, r3
 8000502:	f000 ffc1 	bl	8001488 <HAL_GPIO_WritePin>
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <MCP23S17_SetLED>:

/* USER CODE BEGIN PFP */
void MCP23S17_SetLED(MCP23S17_HandleTypeDef *dev, uint8_t ledIndex, uint8_t state) {
 800050e:	b580      	push	{r7, lr}
 8000510:	b084      	sub	sp, #16
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	70fb      	strb	r3, [r7, #3]
 800051a:	4613      	mov	r3, r2
 800051c:	70bb      	strb	r3, [r7, #2]
	    if (ledIndex >= 16) return; // Vérifier que l'index est valide
 800051e:	78fb      	ldrb	r3, [r7, #3]
 8000520:	2b0f      	cmp	r3, #15
 8000522:	f200 8099 	bhi.w	8000658 <MCP23S17_SetLED+0x14a>

	    uint8_t portA_val = 0, portB_val = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	73fb      	strb	r3, [r7, #15]
 800052a:	2300      	movs	r3, #0
 800052c:	73bb      	strb	r3, [r7, #14]

	    // Lire l'état actuel des ports
	    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_RESET);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6858      	ldr	r0, [r3, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	891b      	ldrh	r3, [r3, #8]
 8000536:	2200      	movs	r2, #0
 8000538:	4619      	mov	r1, r3
 800053a:	f000 ffa5 	bl	8001488 <HAL_GPIO_WritePin>
	    uint8_t dataA[2] = {MCP23S17_ADDRESS | 1, MCP23S17_GPIOA};
 800053e:	f241 2341 	movw	r3, #4673	@ 0x1241
 8000542:	81bb      	strh	r3, [r7, #12]
	    HAL_SPI_Transmit(dev->hspi, dataA, 2, HAL_MAX_DELAY);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	f107 010c 	add.w	r1, r7, #12
 800054c:	f04f 33ff 	mov.w	r3, #4294967295
 8000550:	2202      	movs	r2, #2
 8000552:	f002 fb74 	bl	8002c3e <HAL_SPI_Transmit>
	    HAL_SPI_Receive(dev->hspi, &portA_val, 1, HAL_MAX_DELAY);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6818      	ldr	r0, [r3, #0]
 800055a:	f107 010f 	add.w	r1, r7, #15
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	2201      	movs	r2, #1
 8000564:	f002 fce1 	bl	8002f2a <HAL_SPI_Receive>
	    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_SET);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6858      	ldr	r0, [r3, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	891b      	ldrh	r3, [r3, #8]
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	f000 ff88 	bl	8001488 <HAL_GPIO_WritePin>

	    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_RESET);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6858      	ldr	r0, [r3, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	891b      	ldrh	r3, [r3, #8]
 8000580:	2200      	movs	r2, #0
 8000582:	4619      	mov	r1, r3
 8000584:	f000 ff80 	bl	8001488 <HAL_GPIO_WritePin>
	    uint8_t dataB[2] = {MCP23S17_ADDRESS | 1, MCP23S17_GPIOB};
 8000588:	f241 3341 	movw	r3, #4929	@ 0x1341
 800058c:	813b      	strh	r3, [r7, #8]
	    HAL_SPI_Transmit(dev->hspi, dataB, 2, HAL_MAX_DELAY);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6818      	ldr	r0, [r3, #0]
 8000592:	f107 0108 	add.w	r1, r7, #8
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	2202      	movs	r2, #2
 800059c:	f002 fb4f 	bl	8002c3e <HAL_SPI_Transmit>
	    HAL_SPI_Receive(dev->hspi, &portB_val, 1, HAL_MAX_DELAY);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6818      	ldr	r0, [r3, #0]
 80005a4:	f107 010e 	add.w	r1, r7, #14
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	2201      	movs	r2, #1
 80005ae:	f002 fcbc 	bl	8002f2a <HAL_SPI_Receive>
	    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_SET);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6858      	ldr	r0, [r3, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	891b      	ldrh	r3, [r3, #8]
 80005ba:	2201      	movs	r2, #1
 80005bc:	4619      	mov	r1, r3
 80005be:	f000 ff63 	bl	8001488 <HAL_GPIO_WritePin>

	    // Modifier la LED ciblée
	    if (ledIndex < 8) {
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	2b07      	cmp	r3, #7
 80005c6:	d81c      	bhi.n	8000602 <MCP23S17_SetLED+0xf4>
	        if (state)
 80005c8:	78bb      	ldrb	r3, [r7, #2]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d00b      	beq.n	80005e6 <MCP23S17_SetLED+0xd8>
	            portA_val |= (1 << ledIndex);
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	2201      	movs	r2, #1
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	b25a      	sxtb	r2, r3
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e02b      	b.n	800063e <MCP23S17_SetLED+0x130>
	        else
	            portA_val &= ~(1 << ledIndex);
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	2201      	movs	r2, #1
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	b25a      	sxtb	r2, r3
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	4013      	ands	r3, r2
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e01d      	b.n	800063e <MCP23S17_SetLED+0x130>
	    } else {
	        if (state)
 8000602:	78bb      	ldrb	r3, [r7, #2]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00c      	beq.n	8000622 <MCP23S17_SetLED+0x114>
	            portB_val |= (1 << (ledIndex - 8));
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	3b08      	subs	r3, #8
 800060c:	2201      	movs	r2, #1
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	b25a      	sxtb	r2, r3
 8000614:	7bbb      	ldrb	r3, [r7, #14]
 8000616:	b25b      	sxtb	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b25b      	sxtb	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	e00d      	b.n	800063e <MCP23S17_SetLED+0x130>
	        else
	            portB_val &= ~(1 << (ledIndex - 8));
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	3b08      	subs	r3, #8
 8000626:	2201      	movs	r2, #1
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	b25b      	sxtb	r3, r3
 800062e:	43db      	mvns	r3, r3
 8000630:	b25a      	sxtb	r2, r3
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	b25b      	sxtb	r3, r3
 8000636:	4013      	ands	r3, r2
 8000638:	b25b      	sxtb	r3, r3
 800063a:	b2db      	uxtb	r3, r3
 800063c:	73bb      	strb	r3, [r7, #14]
	    }

	    // Écrire les nouvelles valeurs
	    MCP23S17_WriteRegister(dev, MCP23S17_GPIOA, portA_val);
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	461a      	mov	r2, r3
 8000642:	2112      	movs	r1, #18
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff ff37 	bl	80004b8 <MCP23S17_WriteRegister>
	    MCP23S17_WriteRegister(dev, MCP23S17_GPIOB, portB_val);
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	461a      	mov	r2, r3
 800064e:	2113      	movs	r1, #19
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff31 	bl	80004b8 <MCP23S17_WriteRegister>
 8000656:	e000      	b.n	800065a <MCP23S17_SetLED+0x14c>
	    if (ledIndex >= 16) return; // Vérifier que l'index est valide
 8000658:	bf00      	nop
	}
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int chr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	2201      	movs	r2, #1
 8000670:	4803      	ldr	r0, [pc, #12]	@ (8000680 <__io_putchar+0x20>)
 8000672:	f003 f9bb 	bl	80039ec <HAL_UART_Transmit>
 return chr;
 8000676:	687b      	ldr	r3, [r7, #4]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000e8 	.word	0x200000e8

08000684 <MCP23S17_Init>:

/* Initialisation du MCP23S17 */
void MCP23S17_Init(MCP23S17_HandleTypeDef *dev) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->RST_Port, dev->RST_Pin, GPIO_PIN_RESET);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68d8      	ldr	r0, [r3, #12]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	8a1b      	ldrh	r3, [r3, #16]
 8000694:	2200      	movs	r2, #0
 8000696:	4619      	mov	r1, r3
 8000698:	f000 fef6 	bl	8001488 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800069c:	200a      	movs	r0, #10
 800069e:	f000 fc3f 	bl	8000f20 <HAL_Delay>
    HAL_GPIO_WritePin(dev->RST_Port, dev->RST_Pin, GPIO_PIN_SET);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68d8      	ldr	r0, [r3, #12]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	8a1b      	ldrh	r3, [r3, #16]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4619      	mov	r1, r3
 80006ae:	f000 feeb 	bl	8001488 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80006b2:	200a      	movs	r0, #10
 80006b4:	f000 fc34 	bl	8000f20 <HAL_Delay>
    MCP23S17_WriteRegister(dev, MCP23S17_IOCON, 0x08);
 80006b8:	2208      	movs	r2, #8
 80006ba:	210a      	movs	r1, #10
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fefb 	bl	80004b8 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(dev, MCP23S17_IODIRA, 0x00);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff fef6 	bl	80004b8 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(dev, MCP23S17_IODIRB, 0x00);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2101      	movs	r1, #1
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff fef1 	bl	80004b8 <MCP23S17_WriteRegister>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b5b0      	push	{r4, r5, r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fb9f 	bl	8000e28 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f86b 	bl	80007c4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 f929 	bl	8000944 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f2:	f000 f8f7 	bl	80008e4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80006f6:	f000 f8b7 	bl	8000868 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  printf("\r\n==== Systeme micro ====\r\n");
 80006fa:	4830      	ldr	r0, [pc, #192]	@ (80007bc <main+0xdc>)
 80006fc:	f003 ffec 	bl	80046d8 <puts>

  MCP23S17_HandleTypeDef mcp23s17 = {
 8000700:	4b2f      	ldr	r3, [pc, #188]	@ (80007c0 <main+0xe0>)
 8000702:	1d3c      	adds	r4, r7, #4
 8000704:	461d      	mov	r5, r3
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	682b      	ldr	r3, [r5, #0]
 800070c:	6023      	str	r3, [r4, #0]
         .CS_Port = GPIOB,
         .CS_Pin = GPIO_PIN_7,
         .RST_Port = GPIOA,
         .RST_Pin = GPIO_PIN_0
     };
  MCP23S17_Init(&mcp23s17);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ffb7 	bl	8000684 <MCP23S17_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1) {
       MCP23S17_SetLED(&mcp23s17, 1, 1);  // Allume la LED 1
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2201      	movs	r2, #1
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fef6 	bl	800050e <MCP23S17_SetLED>
       HAL_Delay(500);
 8000722:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000726:	f000 fbfb 	bl	8000f20 <HAL_Delay>
       MCP23S17_SetLED(&mcp23s17, 1, 0);  // Éteint la LED 1
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	2101      	movs	r1, #1
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff feec 	bl	800050e <MCP23S17_SetLED>
       HAL_Delay(500);
 8000736:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800073a:	f000 fbf1 	bl	8000f20 <HAL_Delay>
       MCP23S17_SetLED(&mcp23s17, 2, 1);  // Allume la LED 2
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2201      	movs	r2, #1
 8000742:	2102      	movs	r1, #2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fee2 	bl	800050e <MCP23S17_SetLED>
	   HAL_Delay(500);
 800074a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800074e:	f000 fbe7 	bl	8000f20 <HAL_Delay>
	   MCP23S17_SetLED(&mcp23s17, 3, 0);  // Éteint la LED 3
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	2103      	movs	r1, #3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fed8 	bl	800050e <MCP23S17_SetLED>
	   HAL_Delay(500);
 800075e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000762:	f000 fbdd 	bl	8000f20 <HAL_Delay>
	   MCP23S17_SetLED(&mcp23s17, 5, 1);  // Allume la LED 5
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2201      	movs	r2, #1
 800076a:	2105      	movs	r1, #5
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fece 	bl	800050e <MCP23S17_SetLED>
	   HAL_Delay(500);
 8000772:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000776:	f000 fbd3 	bl	8000f20 <HAL_Delay>
	   MCP23S17_SetLED(&mcp23s17, 5, 0);  // Éteint la LED 5
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	2105      	movs	r1, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fec4 	bl	800050e <MCP23S17_SetLED>
	   HAL_Delay(500);
 8000786:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800078a:	f000 fbc9 	bl	8000f20 <HAL_Delay>
	   MCP23S17_SetLED(&mcp23s17, 7, 1);  // Allume la LED 7
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2201      	movs	r2, #1
 8000792:	2107      	movs	r1, #7
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff feba 	bl	800050e <MCP23S17_SetLED>
	   HAL_Delay(500);
 800079a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800079e:	f000 fbbf 	bl	8000f20 <HAL_Delay>
	   MCP23S17_SetLED(&mcp23s17, 7, 0);  // Éteint la LED 7
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	2107      	movs	r1, #7
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff feb0 	bl	800050e <MCP23S17_SetLED>
	   HAL_Delay(500);
 80007ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007b2:	f000 fbb5 	bl	8000f20 <HAL_Delay>
       MCP23S17_SetLED(&mcp23s17, 1, 1);  // Allume la LED 1
 80007b6:	bf00      	nop
 80007b8:	e7ad      	b.n	8000716 <main+0x36>
 80007ba:	bf00      	nop
 80007bc:	08004e18 	.word	0x08004e18
 80007c0:	08004e34 	.word	0x08004e34

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b096      	sub	sp, #88	@ 0x58
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2244      	movs	r2, #68	@ 0x44
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 f860 	bl	8004898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ea:	f000 fe73 	bl	80014d4 <HAL_PWREx_ControlVoltageScaling>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007f4:	f000 f922 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000800:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	2310      	movs	r3, #16
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080a:	2302      	movs	r3, #2
 800080c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800080e:	2301      	movs	r3, #1
 8000810:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000812:	230a      	movs	r3, #10
 8000814:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000816:	2307      	movs	r3, #7
 8000818:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4618      	mov	r0, r3
 8000828:	f000 feaa 	bl	8001580 <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000832:	f000 f903 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	230f      	movs	r3, #15
 8000838:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2303      	movs	r3, #3
 800083c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	2104      	movs	r1, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fa72 	bl	8001d38 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800085a:	f000 f8ef 	bl	8000a3c <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3758      	adds	r7, #88	@ 0x58
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800086c:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <MX_SPI3_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	@ (80008e0 <MX_SPI3_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_SPI3_Init+0x74>)
 8000874:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000878:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <MX_SPI3_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000880:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_SPI3_Init+0x74>)
 8000882:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000886:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_SPI3_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_SPI3_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_SPI3_Init+0x74>)
 8000896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800089a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_SPI3_Init+0x74>)
 800089e:	2228      	movs	r2, #40	@ 0x28
 80008a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_SPI3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_SPI3_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_SPI3_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_SPI3_Init+0x74>)
 80008b6:	2207      	movs	r2, #7
 80008b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_SPI3_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_SPI3_Init+0x74>)
 80008c2:	2208      	movs	r2, #8
 80008c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_SPI3_Init+0x74>)
 80008c8:	f002 f916 	bl	8002af8 <HAL_SPI_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 f8b3 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000084 	.word	0x20000084
 80008e0:	40003c00 	.word	0x40003c00

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */



  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_USART2_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <MX_USART2_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_USART2_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART2_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USART2_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART2_UART_Init+0x58>)
 8000928:	f003 f812 	bl	8003950 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f883 	bl	8000a3c <Error_Handler>



  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000e8 	.word	0x200000e8
 8000940:	40004400 	.word	0x40004400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b35      	ldr	r3, [pc, #212]	@ (8000a30 <MX_GPIO_Init+0xec>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a34      	ldr	r2, [pc, #208]	@ (8000a30 <MX_GPIO_Init+0xec>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b32      	ldr	r3, [pc, #200]	@ (8000a30 <MX_GPIO_Init+0xec>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	4b2f      	ldr	r3, [pc, #188]	@ (8000a30 <MX_GPIO_Init+0xec>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	4a2e      	ldr	r2, [pc, #184]	@ (8000a30 <MX_GPIO_Init+0xec>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <MX_GPIO_Init+0xec>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <MX_GPIO_Init+0xec>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a28      	ldr	r2, [pc, #160]	@ (8000a30 <MX_GPIO_Init+0xec>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_GPIO_Init+0xec>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <MX_GPIO_Init+0xec>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a22      	ldr	r2, [pc, #136]	@ (8000a30 <MX_GPIO_Init+0xec>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <MX_GPIO_Init+0xec>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2121      	movs	r1, #33	@ 0x21
 80009be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c2:	f000 fd61 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2180      	movs	r1, #128	@ 0x80
 80009ca:	481a      	ldr	r0, [pc, #104]	@ (8000a34 <MX_GPIO_Init+0xf0>)
 80009cc:	f000 fd5c 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4814      	ldr	r0, [pc, #80]	@ (8000a38 <MX_GPIO_Init+0xf4>)
 80009e8:	f000 fba4 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 80009ec:	2321      	movs	r3, #33	@ 0x21
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a06:	f000 fb95 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 8000a0a:	2380      	movs	r3, #128	@ 0x80
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_GPIO_Init+0xf0>)
 8000a22:	f000 fb87 	bl	8001134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	@ 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000400 	.word	0x48000400
 8000a38:	48000800 	.word	0x48000800

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a52:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6a:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a25      	ldr	r2, [pc, #148]	@ (8000b44 <HAL_SPI_MspInit+0xb4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d144      	bne.n	8000b3c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <HAL_SPI_MspInit+0xb8>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab6:	4a24      	ldr	r2, [pc, #144]	@ (8000b48 <HAL_SPI_MspInit+0xb8>)
 8000ab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000abe:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <HAL_SPI_MspInit+0xb8>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <HAL_SPI_MspInit+0xb8>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	4a1e      	ldr	r2, [pc, #120]	@ (8000b48 <HAL_SPI_MspInit+0xb8>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_SPI_MspInit+0xb8>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_SPI_MspInit+0xb8>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4a18      	ldr	r2, [pc, #96]	@ (8000b48 <HAL_SPI_MspInit+0xb8>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <HAL_SPI_MspInit+0xb8>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000afa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b0c:	2306      	movs	r3, #6
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <HAL_SPI_MspInit+0xbc>)
 8000b18:	f000 fb0c 	bl	8001134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4806      	ldr	r0, [pc, #24]	@ (8000b50 <HAL_SPI_MspInit+0xc0>)
 8000b38:	f000 fafc 	bl	8001134 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	@ 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40003c00 	.word	0x40003c00
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48000800 	.word	0x48000800
 8000b50:	48000400 	.word	0x48000400

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ac      	sub	sp, #176	@ 0xb0
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2288      	movs	r2, #136	@ 0x88
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 fe8f 	bl	8004898 <memset>
  if(huart->Instance==USART2)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a21      	ldr	r2, [pc, #132]	@ (8000c04 <HAL_UART_MspInit+0xb0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d13b      	bne.n	8000bfc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 faf5 	bl	8002180 <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b9c:	f7ff ff4e 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_UART_MspInit+0xb4>)
 8000ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba4:	4a18      	ldr	r2, [pc, #96]	@ (8000c08 <HAL_UART_MspInit+0xb4>)
 8000ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_UART_MspInit+0xb4>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <HAL_UART_MspInit+0xb4>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbc:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <HAL_UART_MspInit+0xb4>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <HAL_UART_MspInit+0xb4>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be8:	2307      	movs	r3, #7
 8000bea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f000 fa9c 	bl	8001134 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bfc:	bf00      	nop
 8000bfe:	37b0      	adds	r7, #176	@ 0xb0
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40004400 	.word	0x40004400
 8000c08:	40021000 	.word	0x40021000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c62:	f000 f93d 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	e00a      	b.n	8000c92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c7c:	f3af 8000 	nop.w
 8000c80:	4601      	mov	r1, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	60ba      	str	r2, [r7, #8]
 8000c88:	b2ca      	uxtb	r2, r1
 8000c8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dbf0      	blt.n	8000c7c <_read+0x12>
  }

  return len;
 8000c9a:	687b      	ldr	r3, [r7, #4]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e009      	b.n	8000cca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	60ba      	str	r2, [r7, #8]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fcce 	bl	8000660 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dbf1      	blt.n	8000cb6 <_write+0x12>
  }
  return len;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_close>:

int _close(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d04:	605a      	str	r2, [r3, #4]
  return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_isatty>:

int _isatty(int file)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1c:	2301      	movs	r3, #1
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	@ (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f003 fdde 	bl	8004934 <__errno>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <_sbrk+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20018000 	.word	0x20018000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	20000170 	.word	0x20000170
 8000dac:	200002c8 	.word	0x200002c8

08000db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd8:	f7ff ffea 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	@ (8000e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <LoopForever+0xe>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e20 <LoopForever+0x16>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f003 fd9d 	bl	8004940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e06:	f7ff fc6b 	bl	80006e0 <main>

08000e0a <LoopForever>:

LoopForever:
    b LoopForever
 8000e0a:	e7fe      	b.n	8000e0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e18:	08004ea0 	.word	0x08004ea0
  ldr r2, =_sbss
 8000e1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e20:	200002c4 	.word	0x200002c4

08000e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC1_2_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_Init+0x3c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <HAL_Init+0x3c>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 f944 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 f80f 	bl	8000e68 <HAL_InitTick>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	e001      	b.n	8000e5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e56:	f7ff fdf7 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <HAL_InitTick+0x6c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d023      	beq.n	8000ec4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <HAL_InitTick+0x70>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <HAL_InitTick+0x6c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f941 	bl	800111a <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10f      	bne.n	8000ebe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d809      	bhi.n	8000eb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f919 	bl	80010e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <HAL_InitTick+0x74>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e007      	b.n	8000ec8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e004      	b.n	8000ec8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e001      	b.n	8000ec8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000174 	.word	0x20000174

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000174 	.word	0x20000174

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	@ (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	@ (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff47 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff5c 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffb0 	bl	8001088 <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001142:	e17f      	b.n	8001444 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2101      	movs	r1, #1
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 8171 	beq.w	800143e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b01      	cmp	r3, #1
 8001166:	d005      	beq.n	8001174 <HAL_GPIO_Init+0x40>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d130      	bne.n	80011d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011aa:	2201      	movs	r2, #1
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	f003 0201 	and.w	r2, r3, #1
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d118      	bne.n	8001214 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011e8:	2201      	movs	r2, #1
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	08db      	lsrs	r3, r3, #3
 80011fe:	f003 0201 	and.w	r2, r3, #1
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b03      	cmp	r3, #3
 800121e:	d017      	beq.n	8001250 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d123      	bne.n	80012a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	220f      	movs	r2, #15
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	6939      	ldr	r1, [r7, #16]
 80012a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0203 	and.w	r2, r3, #3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80ac 	beq.w	800143e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001464 <HAL_GPIO_Init+0x330>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001464 <HAL_GPIO_Init+0x330>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001464 <HAL_GPIO_Init+0x330>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001468 <HAL_GPIO_Init+0x334>)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001328:	d025      	beq.n	8001376 <HAL_GPIO_Init+0x242>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4f      	ldr	r2, [pc, #316]	@ (800146c <HAL_GPIO_Init+0x338>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01f      	beq.n	8001372 <HAL_GPIO_Init+0x23e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4e      	ldr	r2, [pc, #312]	@ (8001470 <HAL_GPIO_Init+0x33c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x23a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4d      	ldr	r2, [pc, #308]	@ (8001474 <HAL_GPIO_Init+0x340>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x236>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4c      	ldr	r2, [pc, #304]	@ (8001478 <HAL_GPIO_Init+0x344>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x232>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4b      	ldr	r2, [pc, #300]	@ (800147c <HAL_GPIO_Init+0x348>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x22e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4a      	ldr	r2, [pc, #296]	@ (8001480 <HAL_GPIO_Init+0x34c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x22a>
 800135a:	2306      	movs	r3, #6
 800135c:	e00c      	b.n	8001378 <HAL_GPIO_Init+0x244>
 800135e:	2307      	movs	r3, #7
 8001360:	e00a      	b.n	8001378 <HAL_GPIO_Init+0x244>
 8001362:	2305      	movs	r3, #5
 8001364:	e008      	b.n	8001378 <HAL_GPIO_Init+0x244>
 8001366:	2304      	movs	r3, #4
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x244>
 800136a:	2303      	movs	r3, #3
 800136c:	e004      	b.n	8001378 <HAL_GPIO_Init+0x244>
 800136e:	2302      	movs	r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x244>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x244>
 8001376:	2300      	movs	r3, #0
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4093      	lsls	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001388:	4937      	ldr	r1, [pc, #220]	@ (8001468 <HAL_GPIO_Init+0x334>)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <HAL_GPIO_Init+0x350>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ba:	4a32      	ldr	r2, [pc, #200]	@ (8001484 <HAL_GPIO_Init+0x350>)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013c0:	4b30      	ldr	r3, [pc, #192]	@ (8001484 <HAL_GPIO_Init+0x350>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013e4:	4a27      	ldr	r2, [pc, #156]	@ (8001484 <HAL_GPIO_Init+0x350>)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013ea:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <HAL_GPIO_Init+0x350>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800140e:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <HAL_GPIO_Init+0x350>)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_GPIO_Init+0x350>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001438:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <HAL_GPIO_Init+0x350>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa22 f303 	lsr.w	r3, r2, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	f47f ae78 	bne.w	8001144 <HAL_GPIO_Init+0x10>
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000
 800146c:	48000400 	.word	0x48000400
 8001470:	48000800 	.word	0x48000800
 8001474:	48000c00 	.word	0x48000c00
 8001478:	48001000 	.word	0x48001000
 800147c:	48001400 	.word	0x48001400
 8001480:	48001800 	.word	0x48001800
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40007000 	.word	0x40007000

080014d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014e2:	d130      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e4:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014f0:	d038      	beq.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f2:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2232      	movs	r2, #50	@ 0x32
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800150e:	fba2 2303 	umull	r2, r3, r2, r3
 8001512:	0c9b      	lsrs	r3, r3, #18
 8001514:	3301      	adds	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001518:	e002      	b.n	8001520 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3b01      	subs	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001520:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152c:	d102      	bne.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x60>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f2      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800153c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001540:	d110      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e00f      	b.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001552:	d007      	beq.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800155c:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001562:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40007000 	.word	0x40007000
 8001578:	20000000 	.word	0x20000000
 800157c:	431bde83 	.word	0x431bde83

08001580 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e3ca      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001592:	4b97      	ldr	r3, [pc, #604]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800159c:	4b94      	ldr	r3, [pc, #592]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80e4 	beq.w	800177c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <HAL_RCC_OscConfig+0x4a>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	f040 808b 	bne.w	80016d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	f040 8087 	bne.w	80016d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ca:	4b89      	ldr	r3, [pc, #548]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x62>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e3a2      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1a      	ldr	r2, [r3, #32]
 80015e6:	4b82      	ldr	r3, [pc, #520]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <HAL_RCC_OscConfig+0x7c>
 80015f2:	4b7f      	ldr	r3, [pc, #508]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015fa:	e005      	b.n	8001608 <HAL_RCC_OscConfig+0x88>
 80015fc:	4b7c      	ldr	r3, [pc, #496]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001608:	4293      	cmp	r3, r2
 800160a:	d223      	bcs.n	8001654 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fd55 	bl	80020c0 <RCC_SetFlashLatencyFromMSIRange>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e383      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001620:	4b73      	ldr	r3, [pc, #460]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a72      	ldr	r2, [pc, #456]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b70      	ldr	r3, [pc, #448]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	496d      	ldr	r1, [pc, #436]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163e:	4b6c      	ldr	r3, [pc, #432]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4968      	ldr	r1, [pc, #416]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
 8001652:	e025      	b.n	80016a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001654:	4b66      	ldr	r3, [pc, #408]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a65      	ldr	r2, [pc, #404]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b63      	ldr	r3, [pc, #396]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4960      	ldr	r1, [pc, #384]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001672:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	495b      	ldr	r1, [pc, #364]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d109      	bne.n	80016a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fd15 	bl	80020c0 <RCC_SetFlashLatencyFromMSIRange>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e343      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016a0:	f000 fc4a 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b52      	ldr	r3, [pc, #328]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	4950      	ldr	r1, [pc, #320]	@ (80017f4 <HAL_RCC_OscConfig+0x274>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	4a4e      	ldr	r2, [pc, #312]	@ (80017f8 <HAL_RCC_OscConfig+0x278>)
 80016be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016c0:	4b4e      	ldr	r3, [pc, #312]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fbcf 	bl	8000e68 <HAL_InitTick>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d052      	beq.n	800177a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	e327      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d032      	beq.n	8001746 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016e0:	4b43      	ldr	r3, [pc, #268]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a42      	ldr	r2, [pc, #264]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc0c 	bl	8000f08 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f4:	f7ff fc08 	bl	8000f08 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e310      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001706:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001712:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a36      	ldr	r2, [pc, #216]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4931      	ldr	r1, [pc, #196]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001730:	4b2f      	ldr	r3, [pc, #188]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	492c      	ldr	r1, [pc, #176]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e01a      	b.n	800177c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001746:	4b2a      	ldr	r3, [pc, #168]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a29      	ldr	r2, [pc, #164]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001752:	f7ff fbd9 	bl	8000f08 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800175a:	f7ff fbd5 	bl	8000f08 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e2dd      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800176c:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x1da>
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800177a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d074      	beq.n	8001872 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d005      	beq.n	800179a <HAL_RCC_OscConfig+0x21a>
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d10e      	bne.n	80017b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2b03      	cmp	r3, #3
 8001798:	d10b      	bne.n	80017b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d064      	beq.n	8001870 <HAL_RCC_OscConfig+0x2f0>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d160      	bne.n	8001870 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e2ba      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x24a>
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80017c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e026      	b.n	8001818 <HAL_RCC_OscConfig+0x298>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d2:	d115      	bne.n	8001800 <HAL_RCC_OscConfig+0x280>
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80017da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a02      	ldr	r2, [pc, #8]	@ (80017f0 <HAL_RCC_OscConfig+0x270>)
 80017e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e014      	b.n	8001818 <HAL_RCC_OscConfig+0x298>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	08004e48 	.word	0x08004e48
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004
 8001800:	4ba0      	ldr	r3, [pc, #640]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a9f      	ldr	r2, [pc, #636]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b9d      	ldr	r3, [pc, #628]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a9c      	ldr	r2, [pc, #624]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fb72 	bl	8000f08 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fb6e 	bl	8000f08 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e276      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800183a:	4b92      	ldr	r3, [pc, #584]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x2a8>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fb5e 	bl	8000f08 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fb5a 	bl	8000f08 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	@ 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e262      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001862:	4b88      	ldr	r3, [pc, #544]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x2d0>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d060      	beq.n	8001940 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b04      	cmp	r3, #4
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x310>
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d119      	bne.n	80018be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d116      	bne.n	80018be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001890:	4b7c      	ldr	r3, [pc, #496]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_OscConfig+0x328>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e23f      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b76      	ldr	r3, [pc, #472]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	4973      	ldr	r1, [pc, #460]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018bc:	e040      	b.n	8001940 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d023      	beq.n	800190e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb19 	bl	8000f08 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fb15 	bl	8000f08 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e21d      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ec:	4b65      	ldr	r3, [pc, #404]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f8:	4b62      	ldr	r3, [pc, #392]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	061b      	lsls	r3, r3, #24
 8001906:	495f      	ldr	r1, [pc, #380]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
 800190c:	e018      	b.n	8001940 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a5c      	ldr	r2, [pc, #368]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff faf5 	bl	8000f08 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff faf1 	bl	8000f08 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1f9      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001934:	4b53      	ldr	r3, [pc, #332]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d03c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01c      	beq.n	800198e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001954:	4b4b      	ldr	r3, [pc, #300]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800195a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001964:	f7ff fad0 	bl	8000f08 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff facc 	bl	8000f08 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1d4      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800197e:	4b41      	ldr	r3, [pc, #260]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0ef      	beq.n	800196c <HAL_RCC_OscConfig+0x3ec>
 800198c:	e01b      	b.n	80019c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001994:	4a3b      	ldr	r2, [pc, #236]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff fab3 	bl	8000f08 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a6:	f7ff faaf 	bl	8000f08 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1b7      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b8:	4b32      	ldr	r3, [pc, #200]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80019ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ef      	bne.n	80019a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80a6 	beq.w	8001b20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10d      	bne.n	8001a00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e4:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e8:	4a26      	ldr	r2, [pc, #152]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80019f0:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fc:	2301      	movs	r3, #1
 80019fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a00:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <HAL_RCC_OscConfig+0x508>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d118      	bne.n	8001a3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <HAL_RCC_OscConfig+0x508>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1d      	ldr	r2, [pc, #116]	@ (8001a88 <HAL_RCC_OscConfig+0x508>)
 8001a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a18:	f7ff fa76 	bl	8000f08 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a20:	f7ff fa72 	bl	8000f08 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e17a      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_RCC_OscConfig+0x508>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d108      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4d8>
 8001a46:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a56:	e029      	b.n	8001aac <HAL_RCC_OscConfig+0x52c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d115      	bne.n	8001a8c <HAL_RCC_OscConfig+0x50c>
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a66:	4a07      	ldr	r2, [pc, #28]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a70:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a76:	4a03      	ldr	r2, [pc, #12]	@ (8001a84 <HAL_RCC_OscConfig+0x504>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a80:	e014      	b.n	8001aac <HAL_RCC_OscConfig+0x52c>
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	4b9c      	ldr	r3, [pc, #624]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a92:	4a9b      	ldr	r2, [pc, #620]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a9c:	4b98      	ldr	r3, [pc, #608]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa2:	4a97      	ldr	r2, [pc, #604]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d016      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fa28 	bl	8000f08 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff fa24 	bl	8000f08 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e12a      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ed      	beq.n	8001abc <HAL_RCC_OscConfig+0x53c>
 8001ae0:	e015      	b.n	8001b0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fa11 	bl	8000f08 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff fa0d 	bl	8000f08 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e113      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b00:	4b7f      	ldr	r3, [pc, #508]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1ed      	bne.n	8001aea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0e:	7ffb      	ldrb	r3, [r7, #31]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b14:	4b7a      	ldr	r3, [pc, #488]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b18:	4a79      	ldr	r2, [pc, #484]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80fe 	beq.w	8001d26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	f040 80d0 	bne.w	8001cd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b34:	4b72      	ldr	r3, [pc, #456]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d130      	bne.n	8001baa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	3b01      	subs	r3, #1
 8001b54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d127      	bne.n	8001baa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d11f      	bne.n	8001baa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b74:	2a07      	cmp	r2, #7
 8001b76:	bf14      	ite	ne
 8001b78:	2201      	movne	r2, #1
 8001b7a:	2200      	moveq	r2, #0
 8001b7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d113      	bne.n	8001baa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d06e      	beq.n	8001c88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	d069      	beq.n	8001c84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bb0:	4b53      	ldr	r3, [pc, #332]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bbc:	4b50      	ldr	r3, [pc, #320]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0ad      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a4b      	ldr	r2, [pc, #300]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bd8:	f7ff f996 	bl	8000f08 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff f992 	bl	8000f08 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e09a      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf2:	4b43      	ldr	r3, [pc, #268]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfe:	4b40      	ldr	r3, [pc, #256]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	4b40      	ldr	r3, [pc, #256]	@ (8001d04 <HAL_RCC_OscConfig+0x784>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c0e:	3a01      	subs	r2, #1
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c18:	0212      	lsls	r2, r2, #8
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c20:	0852      	lsrs	r2, r2, #1
 8001c22:	3a01      	subs	r2, #1
 8001c24:	0552      	lsls	r2, r2, #21
 8001c26:	4311      	orrs	r1, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c2c:	0852      	lsrs	r2, r2, #1
 8001c2e:	3a01      	subs	r2, #1
 8001c30:	0652      	lsls	r2, r2, #25
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c38:	0912      	lsrs	r2, r2, #4
 8001c3a:	0452      	lsls	r2, r2, #17
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	4930      	ldr	r1, [pc, #192]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c44:	4b2e      	ldr	r3, [pc, #184]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2d      	ldr	r2, [pc, #180]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c50:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a2a      	ldr	r2, [pc, #168]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c5c:	f7ff f954 	bl	8000f08 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff f950 	bl	8000f08 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e058      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c82:	e050      	b.n	8001d26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e04f      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d148      	bne.n	8001d26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4a16      	ldr	r2, [pc, #88]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001caa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cac:	f7ff f92c 	bl	8000f08 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff f928 	bl	8000f08 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e030      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x734>
 8001cd2:	e028      	b.n	8001d26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d023      	beq.n	8001d22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <HAL_RCC_OscConfig+0x780>)
 8001ce0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f90f 	bl	8000f08 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cec:	e00c      	b.n	8001d08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7ff f90b 	bl	8000f08 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d905      	bls.n	8001d08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e013      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
 8001d00:	40021000 	.word	0x40021000
 8001d04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <HAL_RCC_OscConfig+0x7b0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ec      	bne.n	8001cee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_RCC_OscConfig+0x7b0>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	4905      	ldr	r1, [pc, #20]	@ (8001d30 <HAL_RCC_OscConfig+0x7b0>)
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_RCC_OscConfig+0x7b4>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60cb      	str	r3, [r1, #12]
 8001d20:	e001      	b.n	8001d26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	feeefffc 	.word	0xfeeefffc

08001d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0e7      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b75      	ldr	r3, [pc, #468]	@ (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d910      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b72      	ldr	r3, [pc, #456]	@ (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0207 	bic.w	r2, r3, #7
 8001d62:	4970      	ldr	r1, [pc, #448]	@ (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0cf      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d010      	beq.n	8001daa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4b66      	ldr	r3, [pc, #408]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d908      	bls.n	8001daa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b63      	ldr	r3, [pc, #396]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4960      	ldr	r1, [pc, #384]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d04c      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbe:	4b5a      	ldr	r3, [pc, #360]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d121      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0a6      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd6:	4b54      	ldr	r3, [pc, #336]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d115      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e09a      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dee:	4b4e      	ldr	r3, [pc, #312]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e08e      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e086      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e0e:	4b46      	ldr	r3, [pc, #280]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f023 0203 	bic.w	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4943      	ldr	r1, [pc, #268]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e20:	f7ff f872 	bl	8000f08 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e28:	f7ff f86e 	bl	8000f08 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e06e      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 020c 	and.w	r2, r3, #12
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1eb      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d010      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d208      	bcs.n	8001e7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	492b      	ldr	r1, [pc, #172]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7e:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d210      	bcs.n	8001eae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8c:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 0207 	bic.w	r2, r3, #7
 8001e94:	4923      	ldr	r1, [pc, #140]	@ (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9c:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e036      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eba:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	4918      	ldr	r1, [pc, #96]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4910      	ldr	r1, [pc, #64]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eec:	f000 f824 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	490b      	ldr	r1, [pc, #44]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f4>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_RCC_ClockConfig+0x1fc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe ffa9 	bl	8000e68 <HAL_InitTick>
 8001f16:	4603      	mov	r3, r0
 8001f18:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08004e48 	.word	0x08004e48
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	@ 0x24
 8001f3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f46:	4b3e      	ldr	r3, [pc, #248]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f50:	4b3b      	ldr	r3, [pc, #236]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x34>
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d121      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d11e      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f6c:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f78:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e005      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f88:	4b2d      	ldr	r3, [pc, #180]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f94:	4a2b      	ldr	r2, [pc, #172]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10d      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d102      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fb0:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	e004      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fbc:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d134      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0xa6>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d003      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fdc:	e005      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fe0:	617b      	str	r3, [r7, #20]
      break;
 8001fe2:	e005      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fe6:	617b      	str	r3, [r7, #20]
      break;
 8001fe8:	e002      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	617b      	str	r3, [r7, #20]
      break;
 8001fee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff0:	4b13      	ldr	r3, [pc, #76]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	fb03 f202 	mul.w	r2, r3, r2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002016:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	0e5b      	lsrs	r3, r3, #25
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	3301      	adds	r3, #1
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002030:	69bb      	ldr	r3, [r7, #24]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	@ 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	08004e60 	.word	0x08004e60
 8002048:	00f42400 	.word	0x00f42400
 800204c:	007a1200 	.word	0x007a1200

08002050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b03      	ldr	r3, [pc, #12]	@ (8002064 <HAL_RCC_GetHCLKFreq+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000

08002068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800206c:	f7ff fff0 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4904      	ldr	r1, [pc, #16]	@ (8002090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	08004e58 	.word	0x08004e58

08002094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002098:	f7ff ffda 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	0adb      	lsrs	r3, r3, #11
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4904      	ldr	r1, [pc, #16]	@ (80020bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	08004e58 	.word	0x08004e58

080020c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020d8:	f7ff f9ee 	bl	80014b8 <HAL_PWREx_GetVoltageRange>
 80020dc:	6178      	str	r0, [r7, #20]
 80020de:	e014      	b.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	4a24      	ldr	r2, [pc, #144]	@ (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ec:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020f8:	f7ff f9de 	bl	80014b8 <HAL_PWREx_GetVoltageRange>
 80020fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	4a1d      	ldr	r2, [pc, #116]	@ (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002108:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002110:	d10b      	bne.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b80      	cmp	r3, #128	@ 0x80
 8002116:	d919      	bls.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2ba0      	cmp	r3, #160	@ 0xa0
 800211c:	d902      	bls.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800211e:	2302      	movs	r3, #2
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	e013      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002124:	2301      	movs	r3, #1
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	e010      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b80      	cmp	r3, #128	@ 0x80
 800212e:	d902      	bls.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002130:	2303      	movs	r3, #3
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	e00a      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b80      	cmp	r3, #128	@ 0x80
 800213a:	d102      	bne.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800213c:	2302      	movs	r3, #2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e004      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b70      	cmp	r3, #112	@ 0x70
 8002146:	d101      	bne.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002148:	2301      	movs	r3, #1
 800214a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 0207 	bic.w	r2, r3, #7
 8002154:	4909      	ldr	r1, [pc, #36]	@ (800217c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800215c:	4b07      	ldr	r3, [pc, #28]	@ (800217c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	40022000 	.word	0x40022000

08002180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002188:	2300      	movs	r3, #0
 800218a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800218c:	2300      	movs	r3, #0
 800218e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002198:	2b00      	cmp	r3, #0
 800219a:	d041      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021a4:	d02a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021aa:	d824      	bhi.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021b0:	d008      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021b6:	d81e      	bhi.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021c0:	d010      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021c2:	e018      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021c4:	4b86      	ldr	r3, [pc, #536]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a85      	ldr	r2, [pc, #532]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021d0:	e015      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fabb 	bl	8002754 <RCCEx_PLLSAI1_Config>
 80021de:	4603      	mov	r3, r0
 80021e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e2:	e00c      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3320      	adds	r3, #32
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fba6 	bl	800293c <RCCEx_PLLSAI2_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f4:	e003      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	74fb      	strb	r3, [r7, #19]
      break;
 80021fa:	e000      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10b      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002204:	4b76      	ldr	r3, [pc, #472]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002212:	4973      	ldr	r1, [pc, #460]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800221a:	e001      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d041      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002230:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002234:	d02a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002236:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800223a:	d824      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800223c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002240:	d008      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002246:	d81e      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002250:	d010      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002252:	e018      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002254:	4b62      	ldr	r3, [pc, #392]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a61      	ldr	r2, [pc, #388]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002260:	e015      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fa73 	bl	8002754 <RCCEx_PLLSAI1_Config>
 800226e:	4603      	mov	r3, r0
 8002270:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002272:	e00c      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3320      	adds	r3, #32
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fb5e 	bl	800293c <RCCEx_PLLSAI2_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002284:	e003      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	74fb      	strb	r3, [r7, #19]
      break;
 800228a:	e000      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800228c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002294:	4b52      	ldr	r3, [pc, #328]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022a2:	494f      	ldr	r1, [pc, #316]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022aa:	e001      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a0 	beq.w	80023fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022c2:	4b47      	ldr	r3, [pc, #284]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022d2:	2300      	movs	r3, #0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00d      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b41      	ldr	r3, [pc, #260]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022dc:	4a40      	ldr	r2, [pc, #256]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022e4:	4b3e      	ldr	r3, [pc, #248]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f0:	2301      	movs	r3, #1
 80022f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f4:	4b3b      	ldr	r3, [pc, #236]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a3a      	ldr	r2, [pc, #232]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002300:	f7fe fe02 	bl	8000f08 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002306:	e009      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002308:	f7fe fdfe 	bl	8000f08 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d902      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	74fb      	strb	r3, [r7, #19]
        break;
 800231a:	e005      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800231c:	4b31      	ldr	r3, [pc, #196]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ef      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d15c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800232e:	4b2c      	ldr	r3, [pc, #176]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002338:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01f      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	d019      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800234c:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002356:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002358:	4b21      	ldr	r3, [pc, #132]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235e:	4a20      	ldr	r2, [pc, #128]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002368:	4b1d      	ldr	r3, [pc, #116]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236e:	4a1c      	ldr	r2, [pc, #112]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002378:	4a19      	ldr	r2, [pc, #100]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d016      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7fe fdbd 	bl	8000f08 <HAL_GetTick>
 800238e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002390:	e00b      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe fdb9 	bl	8000f08 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d902      	bls.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	74fb      	strb	r3, [r7, #19]
            break;
 80023a8:	e006      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ec      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023be:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ce:	4904      	ldr	r1, [pc, #16]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023d6:	e009      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
 80023dc:	e006      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ec:	7c7b      	ldrb	r3, [r7, #17]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d105      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f2:	4b9e      	ldr	r3, [pc, #632]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	4a9d      	ldr	r2, [pc, #628]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800240a:	4b98      	ldr	r3, [pc, #608]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002410:	f023 0203 	bic.w	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002418:	4994      	ldr	r1, [pc, #592]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800242c:	4b8f      	ldr	r3, [pc, #572]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002432:	f023 020c 	bic.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243a:	498c      	ldr	r1, [pc, #560]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800244e:	4b87      	ldr	r3, [pc, #540]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002454:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	4983      	ldr	r1, [pc, #524]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002470:	4b7e      	ldr	r3, [pc, #504]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002476:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	497b      	ldr	r1, [pc, #492]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002492:	4b76      	ldr	r3, [pc, #472]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002498:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a0:	4972      	ldr	r1, [pc, #456]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024b4:	4b6d      	ldr	r3, [pc, #436]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	496a      	ldr	r1, [pc, #424]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024d6:	4b65      	ldr	r3, [pc, #404]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e4:	4961      	ldr	r1, [pc, #388]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024f8:	4b5c      	ldr	r3, [pc, #368]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002506:	4959      	ldr	r1, [pc, #356]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800251a:	4b54      	ldr	r3, [pc, #336]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002520:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002528:	4950      	ldr	r1, [pc, #320]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800253c:	4b4b      	ldr	r3, [pc, #300]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254a:	4948      	ldr	r1, [pc, #288]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800255e:	4b43      	ldr	r3, [pc, #268]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002564:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	493f      	ldr	r1, [pc, #252]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d028      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002580:	4b3a      	ldr	r3, [pc, #232]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002586:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800258e:	4937      	ldr	r1, [pc, #220]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800259a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800259e:	d106      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a0:	4b32      	ldr	r3, [pc, #200]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a31      	ldr	r2, [pc, #196]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025aa:	60d3      	str	r3, [r2, #12]
 80025ac:	e011      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	2101      	movs	r1, #1
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f8c8 	bl	8002754 <RCCEx_PLLSAI1_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d028      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025de:	4b23      	ldr	r3, [pc, #140]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ec:	491f      	ldr	r1, [pc, #124]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025fc:	d106      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025fe:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4a1a      	ldr	r2, [pc, #104]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002608:	60d3      	str	r3, [r2, #12]
 800260a:	e011      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002610:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002614:	d10c      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3304      	adds	r3, #4
 800261a:	2101      	movs	r1, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f899 	bl	8002754 <RCCEx_PLLSAI1_Config>
 8002622:	4603      	mov	r3, r0
 8002624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d02b      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264a:	4908      	ldr	r1, [pc, #32]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002656:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800265a:	d109      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800265c:	4b03      	ldr	r3, [pc, #12]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a02      	ldr	r2, [pc, #8]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002666:	60d3      	str	r3, [r2, #12]
 8002668:	e014      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002674:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002678:	d10c      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3304      	adds	r3, #4
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f867 	bl	8002754 <RCCEx_PLLSAI1_Config>
 8002686:	4603      	mov	r3, r0
 8002688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02f      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026ae:	4928      	ldr	r1, [pc, #160]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026be:	d10d      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	2102      	movs	r1, #2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f844 	bl	8002754 <RCCEx_PLLSAI1_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d014      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	74bb      	strb	r3, [r7, #18]
 80026da:	e011      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3320      	adds	r3, #32
 80026ea:	2102      	movs	r1, #2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f925 	bl	800293c <RCCEx_PLLSAI2_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800270c:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800271a:	490d      	ldr	r1, [pc, #52]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800272e:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002734:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800273e:	4904      	ldr	r1, [pc, #16]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002746:	7cbb      	ldrb	r3, [r7, #18]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000

08002754 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002762:	4b75      	ldr	r3, [pc, #468]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d018      	beq.n	80027a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800276e:	4b72      	ldr	r3, [pc, #456]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0203 	and.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d10d      	bne.n	800279a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
       ||
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002786:	4b6c      	ldr	r3, [pc, #432]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
       ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d047      	beq.n	800282a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
 800279e:	e044      	b.n	800282a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d018      	beq.n	80027da <RCCEx_PLLSAI1_Config+0x86>
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d825      	bhi.n	80027f8 <RCCEx_PLLSAI1_Config+0xa4>
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d002      	beq.n	80027b6 <RCCEx_PLLSAI1_Config+0x62>
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d009      	beq.n	80027c8 <RCCEx_PLLSAI1_Config+0x74>
 80027b4:	e020      	b.n	80027f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027b6:	4b60      	ldr	r3, [pc, #384]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d11d      	bne.n	80027fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c6:	e01a      	b.n	80027fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d116      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d8:	e013      	b.n	8002802 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027da:	4b57      	ldr	r3, [pc, #348]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027e6:	4b54      	ldr	r3, [pc, #336]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027f6:	e006      	b.n	8002806 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	e004      	b.n	8002808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027fe:	bf00      	nop
 8002800:	e002      	b.n	8002808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002806:	bf00      	nop
    }

    if(status == HAL_OK)
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10d      	bne.n	800282a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800280e:	4b4a      	ldr	r3, [pc, #296]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6819      	ldr	r1, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	430b      	orrs	r3, r1
 8002824:	4944      	ldr	r1, [pc, #272]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d17d      	bne.n	800292c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002830:	4b41      	ldr	r3, [pc, #260]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a40      	ldr	r2, [pc, #256]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800283a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800283c:	f7fe fb64 	bl	8000f08 <HAL_GetTick>
 8002840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002842:	e009      	b.n	8002858 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002844:	f7fe fb60 	bl	8000f08 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d902      	bls.n	8002858 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	73fb      	strb	r3, [r7, #15]
        break;
 8002856:	e005      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002858:	4b37      	ldr	r3, [pc, #220]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ef      	bne.n	8002844 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d160      	bne.n	800292c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d111      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002870:	4b31      	ldr	r3, [pc, #196]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	0211      	lsls	r1, r2, #8
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68d2      	ldr	r2, [r2, #12]
 8002886:	0912      	lsrs	r2, r2, #4
 8002888:	0452      	lsls	r2, r2, #17
 800288a:	430a      	orrs	r2, r1
 800288c:	492a      	ldr	r1, [pc, #168]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	610b      	str	r3, [r1, #16]
 8002892:	e027      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d112      	bne.n	80028c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800289a:	4b27      	ldr	r3, [pc, #156]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6892      	ldr	r2, [r2, #8]
 80028aa:	0211      	lsls	r1, r2, #8
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6912      	ldr	r2, [r2, #16]
 80028b0:	0852      	lsrs	r2, r2, #1
 80028b2:	3a01      	subs	r2, #1
 80028b4:	0552      	lsls	r2, r2, #21
 80028b6:	430a      	orrs	r2, r1
 80028b8:	491f      	ldr	r1, [pc, #124]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	610b      	str	r3, [r1, #16]
 80028be:	e011      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6892      	ldr	r2, [r2, #8]
 80028d0:	0211      	lsls	r1, r2, #8
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6952      	ldr	r2, [r2, #20]
 80028d6:	0852      	lsrs	r2, r2, #1
 80028d8:	3a01      	subs	r2, #1
 80028da:	0652      	lsls	r2, r2, #25
 80028dc:	430a      	orrs	r2, r1
 80028de:	4916      	ldr	r1, [pc, #88]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028e4:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a13      	ldr	r2, [pc, #76]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fe fb0a 	bl	8000f08 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028f6:	e009      	b.n	800290c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028f8:	f7fe fb06 	bl	8000f08 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d902      	bls.n	800290c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	73fb      	strb	r3, [r7, #15]
          break;
 800290a:	e005      	b.n	8002918 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800290c:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ef      	beq.n	80028f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800291e:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	4904      	ldr	r1, [pc, #16]	@ (8002938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000

0800293c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800294a:	4b6a      	ldr	r3, [pc, #424]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d018      	beq.n	8002988 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002956:	4b67      	ldr	r3, [pc, #412]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0203 	and.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d10d      	bne.n	8002982 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
       ||
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800296e:	4b61      	ldr	r3, [pc, #388]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
       ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d047      	beq.n	8002a12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	e044      	b.n	8002a12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d018      	beq.n	80029c2 <RCCEx_PLLSAI2_Config+0x86>
 8002990:	2b03      	cmp	r3, #3
 8002992:	d825      	bhi.n	80029e0 <RCCEx_PLLSAI2_Config+0xa4>
 8002994:	2b01      	cmp	r3, #1
 8002996:	d002      	beq.n	800299e <RCCEx_PLLSAI2_Config+0x62>
 8002998:	2b02      	cmp	r3, #2
 800299a:	d009      	beq.n	80029b0 <RCCEx_PLLSAI2_Config+0x74>
 800299c:	e020      	b.n	80029e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800299e:	4b55      	ldr	r3, [pc, #340]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d11d      	bne.n	80029e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ae:	e01a      	b.n	80029e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029b0:	4b50      	ldr	r3, [pc, #320]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d116      	bne.n	80029ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c0:	e013      	b.n	80029ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029c2:	4b4c      	ldr	r3, [pc, #304]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ce:	4b49      	ldr	r3, [pc, #292]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029de:	e006      	b.n	80029ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      break;
 80029e4:	e004      	b.n	80029f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029e6:	bf00      	nop
 80029e8:	e002      	b.n	80029f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029f6:	4b3f      	ldr	r3, [pc, #252]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	4939      	ldr	r1, [pc, #228]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d167      	bne.n	8002ae8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a18:	4b36      	ldr	r3, [pc, #216]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a35      	ldr	r2, [pc, #212]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a24:	f7fe fa70 	bl	8000f08 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a2a:	e009      	b.n	8002a40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a2c:	f7fe fa6c 	bl	8000f08 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d902      	bls.n	8002a40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a3e:	e005      	b.n	8002a4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a40:	4b2c      	ldr	r3, [pc, #176]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1ef      	bne.n	8002a2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d14a      	bne.n	8002ae8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d111      	bne.n	8002a7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a58:	4b26      	ldr	r3, [pc, #152]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6892      	ldr	r2, [r2, #8]
 8002a68:	0211      	lsls	r1, r2, #8
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68d2      	ldr	r2, [r2, #12]
 8002a6e:	0912      	lsrs	r2, r2, #4
 8002a70:	0452      	lsls	r2, r2, #17
 8002a72:	430a      	orrs	r2, r1
 8002a74:	491f      	ldr	r1, [pc, #124]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	614b      	str	r3, [r1, #20]
 8002a7a:	e011      	b.n	8002aa0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6892      	ldr	r2, [r2, #8]
 8002a8c:	0211      	lsls	r1, r2, #8
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6912      	ldr	r2, [r2, #16]
 8002a92:	0852      	lsrs	r2, r2, #1
 8002a94:	3a01      	subs	r2, #1
 8002a96:	0652      	lsls	r2, r2, #25
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	4916      	ldr	r1, [pc, #88]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002aa0:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a13      	ldr	r2, [pc, #76]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7fe fa2c 	bl	8000f08 <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ab2:	e009      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ab4:	f7fe fa28 	bl	8000f08 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d902      	bls.n	8002ac8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ac6:	e005      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ef      	beq.n	8002ab4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	4904      	ldr	r1, [pc, #16]	@ (8002af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e095      	b.n	8002c36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b1a:	d009      	beq.n	8002b30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
 8002b22:	e005      	b.n	8002b30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fd ffa0 	bl	8000a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b70:	d902      	bls.n	8002b78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	e002      	b.n	8002b7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b86:	d007      	beq.n	8002b98 <HAL_SPI_Init+0xa0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b90:	d002      	beq.n	8002b98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bda:	ea42 0103 	orr.w	r1, r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	f003 0204 	and.w	r2, r3, #4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002c14:	ea42 0103 	orr.w	r1, r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b088      	sub	sp, #32
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c4e:	f7fe f95b 	bl	8000f08 <HAL_GetTick>
 8002c52:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d001      	beq.n	8002c68 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c64:	2302      	movs	r3, #2
 8002c66:	e15c      	b.n	8002f22 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_SPI_Transmit+0x36>
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e154      	b.n	8002f22 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_SPI_Transmit+0x48>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e14d      	b.n	8002f22 <HAL_SPI_Transmit+0x2e4>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2203      	movs	r2, #3
 8002c92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	88fa      	ldrh	r2, [r7, #6]
 8002ca6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cd8:	d10f      	bne.n	8002cfa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d04:	2b40      	cmp	r3, #64	@ 0x40
 8002d06:	d007      	beq.n	8002d18 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d20:	d952      	bls.n	8002dc8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_SPI_Transmit+0xf2>
 8002d2a:	8b7b      	ldrh	r3, [r7, #26]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d145      	bne.n	8002dbc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d34:	881a      	ldrh	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d40:	1c9a      	adds	r2, r3, #2
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d54:	e032      	b.n	8002dbc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d112      	bne.n	8002d8a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d68:	881a      	ldrh	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d74:	1c9a      	adds	r2, r3, #2
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d88:	e018      	b.n	8002dbc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d8a:	f7fe f8bd 	bl	8000f08 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d803      	bhi.n	8002da2 <HAL_SPI_Transmit+0x164>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d102      	bne.n	8002da8 <HAL_SPI_Transmit+0x16a>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0b2      	b.n	8002f22 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1c7      	bne.n	8002d56 <HAL_SPI_Transmit+0x118>
 8002dc6:	e083      	b.n	8002ed0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_SPI_Transmit+0x198>
 8002dd0:	8b7b      	ldrh	r3, [r7, #26]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d177      	bne.n	8002ec6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d912      	bls.n	8002e06 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	1c9a      	adds	r2, r3, #2
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b02      	subs	r3, #2
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e04:	e05f      	b.n	8002ec6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e2c:	e04b      	b.n	8002ec6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d12b      	bne.n	8002e94 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d912      	bls.n	8002e6c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4a:	881a      	ldrh	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	1c9a      	adds	r2, r3, #2
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b02      	subs	r3, #2
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e6a:	e02c      	b.n	8002ec6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e92:	e018      	b.n	8002ec6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e94:	f7fe f838 	bl	8000f08 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d803      	bhi.n	8002eac <HAL_SPI_Transmit+0x26e>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	d102      	bne.n	8002eb2 <HAL_SPI_Transmit+0x274>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e02d      	b.n	8002f22 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ae      	bne.n	8002e2e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	6839      	ldr	r1, [r7, #0]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fcf5 	bl	80038c4 <SPI_EndRxTxTransaction>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
  }
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b088      	sub	sp, #32
 8002f2e:	af02      	add	r7, sp, #8
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
 8002f48:	e123      	b.n	8003192 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f52:	d112      	bne.n	8002f7a <HAL_SPI_Receive+0x50>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10e      	bne.n	8002f7a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f912 	bl	800319a <HAL_SPI_TransmitReceive>
 8002f76:	4603      	mov	r3, r0
 8002f78:	e10b      	b.n	8003192 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f7a:	f7fd ffc5 	bl	8000f08 <HAL_GetTick>
 8002f7e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_SPI_Receive+0x62>
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e100      	b.n	8003192 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_SPI_Receive+0x74>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e0f9      	b.n	8003192 <HAL_SPI_Receive+0x268>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ff0:	d908      	bls.n	8003004 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	e007      	b.n	8003014 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003012:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800301c:	d10f      	bne.n	800303e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800302c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003048:	2b40      	cmp	r3, #64	@ 0x40
 800304a:	d007      	beq.n	800305c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003064:	d875      	bhi.n	8003152 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003066:	e037      	b.n	80030d8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d117      	bne.n	80030a6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f103 020c 	add.w	r2, r3, #12
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80030a4:	e018      	b.n	80030d8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a6:	f7fd ff2f 	bl	8000f08 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d803      	bhi.n	80030be <HAL_SPI_Receive+0x194>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d102      	bne.n	80030c4 <HAL_SPI_Receive+0x19a>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e05c      	b.n	8003192 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1c1      	bne.n	8003068 <HAL_SPI_Receive+0x13e>
 80030e4:	e03b      	b.n	800315e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d115      	bne.n	8003120 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	b292      	uxth	r2, r2
 8003100:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	1c9a      	adds	r2, r3, #2
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800311e:	e018      	b.n	8003152 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003120:	f7fd fef2 	bl	8000f08 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d803      	bhi.n	8003138 <HAL_SPI_Receive+0x20e>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d102      	bne.n	800313e <HAL_SPI_Receive+0x214>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e01f      	b.n	8003192 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1c3      	bne.n	80030e6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fb56 	bl	8003814 <SPI_EndRxTransaction>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003190:	2300      	movs	r3, #0
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b08a      	sub	sp, #40	@ 0x28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031a8:	2301      	movs	r3, #1
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ac:	f7fd feac 	bl	8000f08 <HAL_GetTick>
 80031b0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031b8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031c0:	887b      	ldrh	r3, [r7, #2]
 80031c2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031c8:	7ffb      	ldrb	r3, [r7, #31]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d00c      	beq.n	80031e8 <HAL_SPI_TransmitReceive+0x4e>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031d4:	d106      	bne.n	80031e4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <HAL_SPI_TransmitReceive+0x4a>
 80031de:	7ffb      	ldrb	r3, [r7, #31]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d001      	beq.n	80031e8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
 80031e6:	e1f3      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_SPI_TransmitReceive+0x60>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_SPI_TransmitReceive+0x60>
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e1e8      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_SPI_TransmitReceive+0x72>
 8003208:	2302      	movs	r3, #2
 800320a:	e1e1      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x436>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b04      	cmp	r3, #4
 800321e:	d003      	beq.n	8003228 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2205      	movs	r2, #5
 8003224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	887a      	ldrh	r2, [r7, #2]
 8003238:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	887a      	ldrh	r2, [r7, #2]
 800324e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800326a:	d802      	bhi.n	8003272 <HAL_SPI_TransmitReceive+0xd8>
 800326c:	8abb      	ldrh	r3, [r7, #20]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d908      	bls.n	8003284 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	e007      	b.n	8003294 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003292:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329e:	2b40      	cmp	r3, #64	@ 0x40
 80032a0:	d007      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032ba:	f240 8083 	bls.w	80033c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_SPI_TransmitReceive+0x132>
 80032c6:	8afb      	ldrh	r3, [r7, #22]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d16f      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d0:	881a      	ldrh	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f0:	e05c      	b.n	80033ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d11b      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x19e>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d016      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x19e>
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	2b01      	cmp	r3, #1
 800330e:	d113      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003314:	881a      	ldrh	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	1c9a      	adds	r2, r3, #2
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d11c      	bne.n	8003380 <HAL_SPI_TransmitReceive+0x1e6>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	b292      	uxth	r2, r2
 800335e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800337c:	2301      	movs	r3, #1
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003380:	f7fd fdc2 	bl	8000f08 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800338c:	429a      	cmp	r2, r3
 800338e:	d80d      	bhi.n	80033ac <HAL_SPI_TransmitReceive+0x212>
 8003390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d009      	beq.n	80033ac <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e111      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d19d      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x158>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d197      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x158>
 80033c2:	e0e5      	b.n	8003590 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x23a>
 80033cc:	8afb      	ldrh	r3, [r7, #22]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 80d1 	bne.w	8003576 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d912      	bls.n	8003404 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b02      	subs	r3, #2
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003402:	e0b8      	b.n	8003576 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	7812      	ldrb	r2, [r2, #0]
 8003410:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800342a:	e0a4      	b.n	8003576 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d134      	bne.n	80034a4 <HAL_SPI_TransmitReceive+0x30a>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d02f      	beq.n	80034a4 <HAL_SPI_TransmitReceive+0x30a>
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	2b01      	cmp	r3, #1
 8003448:	d12c      	bne.n	80034a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d912      	bls.n	800347a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	881a      	ldrh	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003464:	1c9a      	adds	r2, r3, #2
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b02      	subs	r3, #2
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003478:	e012      	b.n	80034a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d148      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x3aa>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d042      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d923      	bls.n	8003512 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	b292      	uxth	r2, r2
 80034d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	1c9a      	adds	r2, r3, #2
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b02      	subs	r3, #2
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d81f      	bhi.n	8003540 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	e016      	b.n	8003540 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f103 020c 	add.w	r2, r3, #12
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	7812      	ldrb	r2, [r2, #0]
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003540:	2301      	movs	r3, #1
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003544:	f7fd fce0 	bl	8000f08 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003550:	429a      	cmp	r2, r3
 8003552:	d803      	bhi.n	800355c <HAL_SPI_TransmitReceive+0x3c2>
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d102      	bne.n	8003562 <HAL_SPI_TransmitReceive+0x3c8>
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e02c      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	f47f af55 	bne.w	800342c <HAL_SPI_TransmitReceive+0x292>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	f47f af4e 	bne.w	800342c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f995 	bl	80038c4 <SPI_EndRxTxTransaction>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00e      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80035ce:	2300      	movs	r3, #0
  }
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3728      	adds	r7, #40	@ 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035e8:	f7fd fc8e 	bl	8000f08 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	4413      	add	r3, r2
 80035f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035f8:	f7fd fc86 	bl	8000f08 <HAL_GetTick>
 80035fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035fe:	4b39      	ldr	r3, [pc, #228]	@ (80036e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	015b      	lsls	r3, r3, #5
 8003604:	0d1b      	lsrs	r3, r3, #20
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	fb02 f303 	mul.w	r3, r2, r3
 800360c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800360e:	e054      	b.n	80036ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d050      	beq.n	80036ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003618:	f7fd fc76 	bl	8000f08 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	429a      	cmp	r2, r3
 8003626:	d902      	bls.n	800362e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d13d      	bne.n	80036aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800363c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003646:	d111      	bne.n	800366c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003650:	d004      	beq.n	800365c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800365a:	d107      	bne.n	800366c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800366a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003674:	d10f      	bne.n	8003696 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003694:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e017      	b.n	80036da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4013      	ands	r3, r2
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	bf0c      	ite	eq
 80036ca:	2301      	moveq	r3, #1
 80036cc:	2300      	movne	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d19b      	bne.n	8003610 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000000 	.word	0x20000000

080036e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	@ 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036fa:	f7fd fc05 	bl	8000f08 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	4413      	add	r3, r2
 8003708:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800370a:	f7fd fbfd 	bl	8000f08 <HAL_GetTick>
 800370e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003718:	4b3d      	ldr	r3, [pc, #244]	@ (8003810 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00da      	lsls	r2, r3, #3
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	0d1b      	lsrs	r3, r3, #20
 8003728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003730:	e060      	b.n	80037f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003738:	d107      	bne.n	800374a <SPI_WaitFifoStateUntilTimeout+0x62>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003748:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d050      	beq.n	80037f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003752:	f7fd fbd9 	bl	8000f08 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800375e:	429a      	cmp	r2, r3
 8003760:	d902      	bls.n	8003768 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	2b00      	cmp	r3, #0
 8003766:	d13d      	bne.n	80037e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003776:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003780:	d111      	bne.n	80037a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800378a:	d004      	beq.n	8003796 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003794:	d107      	bne.n	80037a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ae:	d10f      	bne.n	80037d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e010      	b.n	8003806 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d196      	bne.n	8003732 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3728      	adds	r7, #40	@ 0x28
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000

08003814 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003828:	d111      	bne.n	800384e <SPI_EndRxTransaction+0x3a>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003832:	d004      	beq.n	800383e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383c:	d107      	bne.n	800384e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800384c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2200      	movs	r2, #0
 8003856:	2180      	movs	r1, #128	@ 0x80
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7ff febd 	bl	80035d8 <SPI_WaitFlagStateUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e023      	b.n	80038bc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800387c:	d11d      	bne.n	80038ba <SPI_EndRxTransaction+0xa6>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003886:	d004      	beq.n	8003892 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003890:	d113      	bne.n	80038ba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2200      	movs	r2, #0
 800389a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f7ff ff22 	bl	80036e8 <SPI_WaitFifoStateUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ae:	f043 0220 	orr.w	r2, r3, #32
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e000      	b.n	80038bc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7ff ff03 	bl	80036e8 <SPI_WaitFifoStateUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e027      	b.n	8003948 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2200      	movs	r2, #0
 8003900:	2180      	movs	r1, #128	@ 0x80
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fe68 	bl	80035d8 <SPI_WaitFlagStateUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e014      	b.n	8003948 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2200      	movs	r2, #0
 8003926:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff fedc 	bl	80036e8 <SPI_WaitFifoStateUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e000      	b.n	8003948 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e040      	b.n	80039e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd f8ee 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	@ 0x24
 800397c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fb6a 	bl	8004070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8af 	bl	8003b00 <UART_SetConfig>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e01b      	b.n	80039e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fbe9 	bl	80041b4 <UART_CheckIdleState>
 80039e2:	4603      	mov	r3, r0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	@ 0x28
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d177      	bne.n	8003af4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_UART_Transmit+0x24>
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e070      	b.n	8003af6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2221      	movs	r2, #33	@ 0x21
 8003a20:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a22:	f7fd fa71 	bl	8000f08 <HAL_GetTick>
 8003a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a40:	d108      	bne.n	8003a54 <HAL_UART_Transmit+0x68>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e003      	b.n	8003a5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a5c:	e02f      	b.n	8003abe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2180      	movs	r1, #128	@ 0x80
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fc4b 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e03b      	b.n	8003af6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a90:	b292      	uxth	r2, r2
 8003a92:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	3302      	adds	r3, #2
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e007      	b.n	8003aac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1c9      	bne.n	8003a5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2140      	movs	r1, #64	@ 0x40
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fc15 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e005      	b.n	8003af6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b04:	b08a      	sub	sp, #40	@ 0x28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4ba4      	ldr	r3, [pc, #656]	@ (8003dc0 <UART_SetConfig+0x2c0>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a99      	ldr	r2, [pc, #612]	@ (8003dc4 <UART_SetConfig+0x2c4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a90      	ldr	r2, [pc, #576]	@ (8003dc8 <UART_SetConfig+0x2c8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d126      	bne.n	8003bd8 <UART_SetConfig+0xd8>
 8003b8a:	4b90      	ldr	r3, [pc, #576]	@ (8003dcc <UART_SetConfig+0x2cc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d81b      	bhi.n	8003bd0 <UART_SetConfig+0xd0>
 8003b98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba0 <UART_SetConfig+0xa0>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bb1 	.word	0x08003bb1
 8003ba4:	08003bc1 	.word	0x08003bc1
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb6:	e116      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bbe:	e112      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc6:	e10e      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003bc8:	2308      	movs	r3, #8
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bce:	e10a      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd6:	e106      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a7c      	ldr	r2, [pc, #496]	@ (8003dd0 <UART_SetConfig+0x2d0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d138      	bne.n	8003c54 <UART_SetConfig+0x154>
 8003be2:	4b7a      	ldr	r3, [pc, #488]	@ (8003dcc <UART_SetConfig+0x2cc>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d82d      	bhi.n	8003c4c <UART_SetConfig+0x14c>
 8003bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <UART_SetConfig+0xf8>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003c4d 	.word	0x08003c4d
 8003c04:	08003c4d 	.word	0x08003c4d
 8003c08:	08003c3d 	.word	0x08003c3d
 8003c0c:	08003c4d 	.word	0x08003c4d
 8003c10:	08003c4d 	.word	0x08003c4d
 8003c14:	08003c4d 	.word	0x08003c4d
 8003c18:	08003c35 	.word	0x08003c35
 8003c1c:	08003c4d 	.word	0x08003c4d
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c45 	.word	0x08003c45
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c32:	e0d8      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c34:	2302      	movs	r3, #2
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3a:	e0d4      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c42:	e0d0      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c44:	2308      	movs	r3, #8
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4a:	e0cc      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c52:	e0c8      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd4 <UART_SetConfig+0x2d4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d125      	bne.n	8003caa <UART_SetConfig+0x1aa>
 8003c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dcc <UART_SetConfig+0x2cc>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c68:	2b30      	cmp	r3, #48	@ 0x30
 8003c6a:	d016      	beq.n	8003c9a <UART_SetConfig+0x19a>
 8003c6c:	2b30      	cmp	r3, #48	@ 0x30
 8003c6e:	d818      	bhi.n	8003ca2 <UART_SetConfig+0x1a2>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d00a      	beq.n	8003c8a <UART_SetConfig+0x18a>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d814      	bhi.n	8003ca2 <UART_SetConfig+0x1a2>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <UART_SetConfig+0x182>
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d008      	beq.n	8003c92 <UART_SetConfig+0x192>
 8003c80:	e00f      	b.n	8003ca2 <UART_SetConfig+0x1a2>
 8003c82:	2300      	movs	r3, #0
 8003c84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c88:	e0ad      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c90:	e0a9      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c92:	2304      	movs	r3, #4
 8003c94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c98:	e0a5      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca0:	e0a1      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca8:	e09d      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a4a      	ldr	r2, [pc, #296]	@ (8003dd8 <UART_SetConfig+0x2d8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d125      	bne.n	8003d00 <UART_SetConfig+0x200>
 8003cb4:	4b45      	ldr	r3, [pc, #276]	@ (8003dcc <UART_SetConfig+0x2cc>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003cbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cc0:	d016      	beq.n	8003cf0 <UART_SetConfig+0x1f0>
 8003cc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cc4:	d818      	bhi.n	8003cf8 <UART_SetConfig+0x1f8>
 8003cc6:	2b80      	cmp	r3, #128	@ 0x80
 8003cc8:	d00a      	beq.n	8003ce0 <UART_SetConfig+0x1e0>
 8003cca:	2b80      	cmp	r3, #128	@ 0x80
 8003ccc:	d814      	bhi.n	8003cf8 <UART_SetConfig+0x1f8>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <UART_SetConfig+0x1d8>
 8003cd2:	2b40      	cmp	r3, #64	@ 0x40
 8003cd4:	d008      	beq.n	8003ce8 <UART_SetConfig+0x1e8>
 8003cd6:	e00f      	b.n	8003cf8 <UART_SetConfig+0x1f8>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cde:	e082      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce6:	e07e      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cee:	e07a      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf6:	e076      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfe:	e072      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a35      	ldr	r2, [pc, #212]	@ (8003ddc <UART_SetConfig+0x2dc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d12a      	bne.n	8003d60 <UART_SetConfig+0x260>
 8003d0a:	4b30      	ldr	r3, [pc, #192]	@ (8003dcc <UART_SetConfig+0x2cc>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d18:	d01a      	beq.n	8003d50 <UART_SetConfig+0x250>
 8003d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d1e:	d81b      	bhi.n	8003d58 <UART_SetConfig+0x258>
 8003d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d24:	d00c      	beq.n	8003d40 <UART_SetConfig+0x240>
 8003d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d2a:	d815      	bhi.n	8003d58 <UART_SetConfig+0x258>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <UART_SetConfig+0x238>
 8003d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d34:	d008      	beq.n	8003d48 <UART_SetConfig+0x248>
 8003d36:	e00f      	b.n	8003d58 <UART_SetConfig+0x258>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3e:	e052      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d40:	2302      	movs	r3, #2
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d46:	e04e      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4e:	e04a      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d50:	2308      	movs	r3, #8
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d56:	e046      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5e:	e042      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a17      	ldr	r2, [pc, #92]	@ (8003dc4 <UART_SetConfig+0x2c4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d13a      	bne.n	8003de0 <UART_SetConfig+0x2e0>
 8003d6a:	4b18      	ldr	r3, [pc, #96]	@ (8003dcc <UART_SetConfig+0x2cc>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d78:	d01a      	beq.n	8003db0 <UART_SetConfig+0x2b0>
 8003d7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d7e:	d81b      	bhi.n	8003db8 <UART_SetConfig+0x2b8>
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d84:	d00c      	beq.n	8003da0 <UART_SetConfig+0x2a0>
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8a:	d815      	bhi.n	8003db8 <UART_SetConfig+0x2b8>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <UART_SetConfig+0x298>
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d94:	d008      	beq.n	8003da8 <UART_SetConfig+0x2a8>
 8003d96:	e00f      	b.n	8003db8 <UART_SetConfig+0x2b8>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9e:	e022      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003da0:	2302      	movs	r3, #2
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da6:	e01e      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003da8:	2304      	movs	r3, #4
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dae:	e01a      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003db0:	2308      	movs	r3, #8
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db6:	e016      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003db8:	2310      	movs	r3, #16
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dbe:	e012      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003dc0:	efff69f3 	.word	0xefff69f3
 8003dc4:	40008000 	.word	0x40008000
 8003dc8:	40013800 	.word	0x40013800
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40004400 	.word	0x40004400
 8003dd4:	40004800 	.word	0x40004800
 8003dd8:	40004c00 	.word	0x40004c00
 8003ddc:	40005000 	.word	0x40005000
 8003de0:	2310      	movs	r3, #16
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a9f      	ldr	r2, [pc, #636]	@ (8004068 <UART_SetConfig+0x568>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d17a      	bne.n	8003ee6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003df0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d824      	bhi.n	8003e42 <UART_SetConfig+0x342>
 8003df8:	a201      	add	r2, pc, #4	@ (adr r2, 8003e00 <UART_SetConfig+0x300>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e43 	.word	0x08003e43
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e43 	.word	0x08003e43
 8003e10:	08003e33 	.word	0x08003e33
 8003e14:	08003e43 	.word	0x08003e43
 8003e18:	08003e43 	.word	0x08003e43
 8003e1c:	08003e43 	.word	0x08003e43
 8003e20:	08003e3b 	.word	0x08003e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7fe f920 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8003e28:	61f8      	str	r0, [r7, #28]
        break;
 8003e2a:	e010      	b.n	8003e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e2c:	4b8f      	ldr	r3, [pc, #572]	@ (800406c <UART_SetConfig+0x56c>)
 8003e2e:	61fb      	str	r3, [r7, #28]
        break;
 8003e30:	e00d      	b.n	8003e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e32:	f7fe f881 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8003e36:	61f8      	str	r0, [r7, #28]
        break;
 8003e38:	e009      	b.n	8003e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e3e:	61fb      	str	r3, [r7, #28]
        break;
 8003e40:	e005      	b.n	8003e4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80fb 	beq.w	800404c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	4413      	add	r3, r2
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d305      	bcc.n	8003e72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d903      	bls.n	8003e7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e78:	e0e8      	b.n	800404c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	461c      	mov	r4, r3
 8003e80:	4615      	mov	r5, r2
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	022b      	lsls	r3, r5, #8
 8003e8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e90:	0222      	lsls	r2, r4, #8
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	6849      	ldr	r1, [r1, #4]
 8003e96:	0849      	lsrs	r1, r1, #1
 8003e98:	2000      	movs	r0, #0
 8003e9a:	4688      	mov	r8, r1
 8003e9c:	4681      	mov	r9, r0
 8003e9e:	eb12 0a08 	adds.w	sl, r2, r8
 8003ea2:	eb43 0b09 	adc.w	fp, r3, r9
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	4659      	mov	r1, fp
 8003eb8:	f7fc f986 	bl	80001c8 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eca:	d308      	bcc.n	8003ede <UART_SetConfig+0x3de>
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ed2:	d204      	bcs.n	8003ede <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	e0b6      	b.n	800404c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ee4:	e0b2      	b.n	800404c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eee:	d15e      	bne.n	8003fae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d828      	bhi.n	8003f4a <UART_SetConfig+0x44a>
 8003ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <UART_SetConfig+0x400>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f35 	.word	0x08003f35
 8003f0c:	08003f4b 	.word	0x08003f4b
 8003f10:	08003f3b 	.word	0x08003f3b
 8003f14:	08003f4b 	.word	0x08003f4b
 8003f18:	08003f4b 	.word	0x08003f4b
 8003f1c:	08003f4b 	.word	0x08003f4b
 8003f20:	08003f43 	.word	0x08003f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7fe f8a0 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8003f28:	61f8      	str	r0, [r7, #28]
        break;
 8003f2a:	e014      	b.n	8003f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f2c:	f7fe f8b2 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 8003f30:	61f8      	str	r0, [r7, #28]
        break;
 8003f32:	e010      	b.n	8003f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f34:	4b4d      	ldr	r3, [pc, #308]	@ (800406c <UART_SetConfig+0x56c>)
 8003f36:	61fb      	str	r3, [r7, #28]
        break;
 8003f38:	e00d      	b.n	8003f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3a:	f7fd fffd 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8003f3e:	61f8      	str	r0, [r7, #28]
        break;
 8003f40:	e009      	b.n	8003f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f46:	61fb      	str	r3, [r7, #28]
        break;
 8003f48:	e005      	b.n	8003f56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d077      	beq.n	800404c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	005a      	lsls	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	441a      	add	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b0f      	cmp	r3, #15
 8003f76:	d916      	bls.n	8003fa6 <UART_SetConfig+0x4a6>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f7e:	d212      	bcs.n	8003fa6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f023 030f 	bic.w	r3, r3, #15
 8003f88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	8afb      	ldrh	r3, [r7, #22]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	8afa      	ldrh	r2, [r7, #22]
 8003fa2:	60da      	str	r2, [r3, #12]
 8003fa4:	e052      	b.n	800404c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fac:	e04e      	b.n	800404c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d827      	bhi.n	8004006 <UART_SetConfig+0x506>
 8003fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <UART_SetConfig+0x4bc>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe9 	.word	0x08003fe9
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08004007 	.word	0x08004007
 8003fcc:	08003ff7 	.word	0x08003ff7
 8003fd0:	08004007 	.word	0x08004007
 8003fd4:	08004007 	.word	0x08004007
 8003fd8:	08004007 	.word	0x08004007
 8003fdc:	08003fff 	.word	0x08003fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7fe f842 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	61f8      	str	r0, [r7, #28]
        break;
 8003fe6:	e014      	b.n	8004012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7fe f854 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 8003fec:	61f8      	str	r0, [r7, #28]
        break;
 8003fee:	e010      	b.n	8004012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <UART_SetConfig+0x56c>)
 8003ff2:	61fb      	str	r3, [r7, #28]
        break;
 8003ff4:	e00d      	b.n	8004012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff6:	f7fd ff9f 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8003ffa:	61f8      	str	r0, [r7, #28]
        break;
 8003ffc:	e009      	b.n	8004012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004002:	61fb      	str	r3, [r7, #28]
        break;
 8004004:	e005      	b.n	8004012 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004010:	bf00      	nop
    }

    if (pclk != 0U)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d019      	beq.n	800404c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	085a      	lsrs	r2, r3, #1
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	441a      	add	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	d909      	bls.n	8004046 <UART_SetConfig+0x546>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004038:	d205      	bcs.n	8004046 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	e002      	b.n	800404c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004058:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800405c:	4618      	mov	r0, r3
 800405e:	3728      	adds	r7, #40	@ 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004066:	bf00      	nop
 8004068:	40008000 	.word	0x40008000
 800406c:	00f42400 	.word	0x00f42400

08004070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01a      	beq.n	8004186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800416e:	d10a      	bne.n	8004186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
  }
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b098      	sub	sp, #96	@ 0x60
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041c4:	f7fc fea0 	bl	8000f08 <HAL_GetTick>
 80041c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d12e      	bne.n	8004236 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e0:	2200      	movs	r2, #0
 80041e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f88c 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d021      	beq.n	8004236 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004206:	653b      	str	r3, [r7, #80]	@ 0x50
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004210:	647b      	str	r3, [r7, #68]	@ 0x44
 8004212:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800421e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e6      	bne.n	80041f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e062      	b.n	80042fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b04      	cmp	r3, #4
 8004242:	d149      	bne.n	80042d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004244:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424c:	2200      	movs	r2, #0
 800424e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f856 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d03c      	beq.n	80042d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	623b      	str	r3, [r7, #32]
   return(result);
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800427c:	633b      	str	r3, [r7, #48]	@ 0x30
 800427e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800428a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	60fb      	str	r3, [r7, #12]
   return(result);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042b0:	61fa      	str	r2, [r7, #28]
 80042b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	69b9      	ldr	r1, [r7, #24]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	617b      	str	r3, [r7, #20]
   return(result);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e011      	b.n	80042fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3758      	adds	r7, #88	@ 0x58
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004314:	e04f      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d04b      	beq.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fc fdf3 	bl	8000f08 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <UART_WaitOnFlagUntilTimeout+0x30>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e04e      	b.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d037      	beq.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b80      	cmp	r3, #128	@ 0x80
 800434a:	d034      	beq.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b40      	cmp	r3, #64	@ 0x40
 8004350:	d031      	beq.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d110      	bne.n	8004382 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2208      	movs	r2, #8
 8004366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f838 	bl	80043de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2208      	movs	r2, #8
 8004372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e029      	b.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800438c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004390:	d111      	bne.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800439a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f81e 	bl	80043de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e00f      	b.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4013      	ands	r3, r2
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	bf0c      	ite	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	2300      	movne	r3, #0
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d0a0      	beq.n	8004316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043de:	b480      	push	{r7}
 80043e0:	b095      	sub	sp, #84	@ 0x54
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004404:	643b      	str	r3, [r7, #64]	@ 0x40
 8004406:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800440a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e6      	bne.n	80043e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3308      	adds	r3, #8
 800441e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	61fb      	str	r3, [r7, #28]
   return(result);
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3308      	adds	r3, #8
 8004436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800443e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e5      	bne.n	8004418 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004450:	2b01      	cmp	r3, #1
 8004452:	d118      	bne.n	8004486 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	60bb      	str	r3, [r7, #8]
   return(result);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f023 0310 	bic.w	r3, r3, #16
 8004468:	647b      	str	r3, [r7, #68]	@ 0x44
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6979      	ldr	r1, [r7, #20]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	613b      	str	r3, [r7, #16]
   return(result);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e6      	bne.n	8004454 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800449a:	bf00      	nop
 800449c:	3754      	adds	r7, #84	@ 0x54
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <std>:
 80044a8:	2300      	movs	r3, #0
 80044aa:	b510      	push	{r4, lr}
 80044ac:	4604      	mov	r4, r0
 80044ae:	e9c0 3300 	strd	r3, r3, [r0]
 80044b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044b6:	6083      	str	r3, [r0, #8]
 80044b8:	8181      	strh	r1, [r0, #12]
 80044ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80044bc:	81c2      	strh	r2, [r0, #14]
 80044be:	6183      	str	r3, [r0, #24]
 80044c0:	4619      	mov	r1, r3
 80044c2:	2208      	movs	r2, #8
 80044c4:	305c      	adds	r0, #92	@ 0x5c
 80044c6:	f000 f9e7 	bl	8004898 <memset>
 80044ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004500 <std+0x58>)
 80044cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80044ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004504 <std+0x5c>)
 80044d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004508 <std+0x60>)
 80044d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044d6:	4b0d      	ldr	r3, [pc, #52]	@ (800450c <std+0x64>)
 80044d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <std+0x68>)
 80044dc:	6224      	str	r4, [r4, #32]
 80044de:	429c      	cmp	r4, r3
 80044e0:	d006      	beq.n	80044f0 <std+0x48>
 80044e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044e6:	4294      	cmp	r4, r2
 80044e8:	d002      	beq.n	80044f0 <std+0x48>
 80044ea:	33d0      	adds	r3, #208	@ 0xd0
 80044ec:	429c      	cmp	r4, r3
 80044ee:	d105      	bne.n	80044fc <std+0x54>
 80044f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f8:	f000 ba46 	b.w	8004988 <__retarget_lock_init_recursive>
 80044fc:	bd10      	pop	{r4, pc}
 80044fe:	bf00      	nop
 8004500:	080046e9 	.word	0x080046e9
 8004504:	0800470b 	.word	0x0800470b
 8004508:	08004743 	.word	0x08004743
 800450c:	08004767 	.word	0x08004767
 8004510:	20000178 	.word	0x20000178

08004514 <stdio_exit_handler>:
 8004514:	4a02      	ldr	r2, [pc, #8]	@ (8004520 <stdio_exit_handler+0xc>)
 8004516:	4903      	ldr	r1, [pc, #12]	@ (8004524 <stdio_exit_handler+0x10>)
 8004518:	4803      	ldr	r0, [pc, #12]	@ (8004528 <stdio_exit_handler+0x14>)
 800451a:	f000 b869 	b.w	80045f0 <_fwalk_sglue>
 800451e:	bf00      	nop
 8004520:	2000000c 	.word	0x2000000c
 8004524:	08004c89 	.word	0x08004c89
 8004528:	2000001c 	.word	0x2000001c

0800452c <cleanup_stdio>:
 800452c:	6841      	ldr	r1, [r0, #4]
 800452e:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <cleanup_stdio+0x34>)
 8004530:	4299      	cmp	r1, r3
 8004532:	b510      	push	{r4, lr}
 8004534:	4604      	mov	r4, r0
 8004536:	d001      	beq.n	800453c <cleanup_stdio+0x10>
 8004538:	f000 fba6 	bl	8004c88 <_fflush_r>
 800453c:	68a1      	ldr	r1, [r4, #8]
 800453e:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <cleanup_stdio+0x38>)
 8004540:	4299      	cmp	r1, r3
 8004542:	d002      	beq.n	800454a <cleanup_stdio+0x1e>
 8004544:	4620      	mov	r0, r4
 8004546:	f000 fb9f 	bl	8004c88 <_fflush_r>
 800454a:	68e1      	ldr	r1, [r4, #12]
 800454c:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <cleanup_stdio+0x3c>)
 800454e:	4299      	cmp	r1, r3
 8004550:	d004      	beq.n	800455c <cleanup_stdio+0x30>
 8004552:	4620      	mov	r0, r4
 8004554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004558:	f000 bb96 	b.w	8004c88 <_fflush_r>
 800455c:	bd10      	pop	{r4, pc}
 800455e:	bf00      	nop
 8004560:	20000178 	.word	0x20000178
 8004564:	200001e0 	.word	0x200001e0
 8004568:	20000248 	.word	0x20000248

0800456c <global_stdio_init.part.0>:
 800456c:	b510      	push	{r4, lr}
 800456e:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <global_stdio_init.part.0+0x30>)
 8004570:	4c0b      	ldr	r4, [pc, #44]	@ (80045a0 <global_stdio_init.part.0+0x34>)
 8004572:	4a0c      	ldr	r2, [pc, #48]	@ (80045a4 <global_stdio_init.part.0+0x38>)
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	4620      	mov	r0, r4
 8004578:	2200      	movs	r2, #0
 800457a:	2104      	movs	r1, #4
 800457c:	f7ff ff94 	bl	80044a8 <std>
 8004580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004584:	2201      	movs	r2, #1
 8004586:	2109      	movs	r1, #9
 8004588:	f7ff ff8e 	bl	80044a8 <std>
 800458c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004590:	2202      	movs	r2, #2
 8004592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004596:	2112      	movs	r1, #18
 8004598:	f7ff bf86 	b.w	80044a8 <std>
 800459c:	200002b0 	.word	0x200002b0
 80045a0:	20000178 	.word	0x20000178
 80045a4:	08004515 	.word	0x08004515

080045a8 <__sfp_lock_acquire>:
 80045a8:	4801      	ldr	r0, [pc, #4]	@ (80045b0 <__sfp_lock_acquire+0x8>)
 80045aa:	f000 b9ee 	b.w	800498a <__retarget_lock_acquire_recursive>
 80045ae:	bf00      	nop
 80045b0:	200002b9 	.word	0x200002b9

080045b4 <__sfp_lock_release>:
 80045b4:	4801      	ldr	r0, [pc, #4]	@ (80045bc <__sfp_lock_release+0x8>)
 80045b6:	f000 b9e9 	b.w	800498c <__retarget_lock_release_recursive>
 80045ba:	bf00      	nop
 80045bc:	200002b9 	.word	0x200002b9

080045c0 <__sinit>:
 80045c0:	b510      	push	{r4, lr}
 80045c2:	4604      	mov	r4, r0
 80045c4:	f7ff fff0 	bl	80045a8 <__sfp_lock_acquire>
 80045c8:	6a23      	ldr	r3, [r4, #32]
 80045ca:	b11b      	cbz	r3, 80045d4 <__sinit+0x14>
 80045cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d0:	f7ff bff0 	b.w	80045b4 <__sfp_lock_release>
 80045d4:	4b04      	ldr	r3, [pc, #16]	@ (80045e8 <__sinit+0x28>)
 80045d6:	6223      	str	r3, [r4, #32]
 80045d8:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <__sinit+0x2c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f5      	bne.n	80045cc <__sinit+0xc>
 80045e0:	f7ff ffc4 	bl	800456c <global_stdio_init.part.0>
 80045e4:	e7f2      	b.n	80045cc <__sinit+0xc>
 80045e6:	bf00      	nop
 80045e8:	0800452d 	.word	0x0800452d
 80045ec:	200002b0 	.word	0x200002b0

080045f0 <_fwalk_sglue>:
 80045f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045f4:	4607      	mov	r7, r0
 80045f6:	4688      	mov	r8, r1
 80045f8:	4614      	mov	r4, r2
 80045fa:	2600      	movs	r6, #0
 80045fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004600:	f1b9 0901 	subs.w	r9, r9, #1
 8004604:	d505      	bpl.n	8004612 <_fwalk_sglue+0x22>
 8004606:	6824      	ldr	r4, [r4, #0]
 8004608:	2c00      	cmp	r4, #0
 800460a:	d1f7      	bne.n	80045fc <_fwalk_sglue+0xc>
 800460c:	4630      	mov	r0, r6
 800460e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004612:	89ab      	ldrh	r3, [r5, #12]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d907      	bls.n	8004628 <_fwalk_sglue+0x38>
 8004618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800461c:	3301      	adds	r3, #1
 800461e:	d003      	beq.n	8004628 <_fwalk_sglue+0x38>
 8004620:	4629      	mov	r1, r5
 8004622:	4638      	mov	r0, r7
 8004624:	47c0      	blx	r8
 8004626:	4306      	orrs	r6, r0
 8004628:	3568      	adds	r5, #104	@ 0x68
 800462a:	e7e9      	b.n	8004600 <_fwalk_sglue+0x10>

0800462c <_puts_r>:
 800462c:	6a03      	ldr	r3, [r0, #32]
 800462e:	b570      	push	{r4, r5, r6, lr}
 8004630:	6884      	ldr	r4, [r0, #8]
 8004632:	4605      	mov	r5, r0
 8004634:	460e      	mov	r6, r1
 8004636:	b90b      	cbnz	r3, 800463c <_puts_r+0x10>
 8004638:	f7ff ffc2 	bl	80045c0 <__sinit>
 800463c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800463e:	07db      	lsls	r3, r3, #31
 8004640:	d405      	bmi.n	800464e <_puts_r+0x22>
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	0598      	lsls	r0, r3, #22
 8004646:	d402      	bmi.n	800464e <_puts_r+0x22>
 8004648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800464a:	f000 f99e 	bl	800498a <__retarget_lock_acquire_recursive>
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	0719      	lsls	r1, r3, #28
 8004652:	d502      	bpl.n	800465a <_puts_r+0x2e>
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d135      	bne.n	80046c6 <_puts_r+0x9a>
 800465a:	4621      	mov	r1, r4
 800465c:	4628      	mov	r0, r5
 800465e:	f000 f8c5 	bl	80047ec <__swsetup_r>
 8004662:	b380      	cbz	r0, 80046c6 <_puts_r+0x9a>
 8004664:	f04f 35ff 	mov.w	r5, #4294967295
 8004668:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800466a:	07da      	lsls	r2, r3, #31
 800466c:	d405      	bmi.n	800467a <_puts_r+0x4e>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	059b      	lsls	r3, r3, #22
 8004672:	d402      	bmi.n	800467a <_puts_r+0x4e>
 8004674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004676:	f000 f989 	bl	800498c <__retarget_lock_release_recursive>
 800467a:	4628      	mov	r0, r5
 800467c:	bd70      	pop	{r4, r5, r6, pc}
 800467e:	2b00      	cmp	r3, #0
 8004680:	da04      	bge.n	800468c <_puts_r+0x60>
 8004682:	69a2      	ldr	r2, [r4, #24]
 8004684:	429a      	cmp	r2, r3
 8004686:	dc17      	bgt.n	80046b8 <_puts_r+0x8c>
 8004688:	290a      	cmp	r1, #10
 800468a:	d015      	beq.n	80046b8 <_puts_r+0x8c>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	6022      	str	r2, [r4, #0]
 8004692:	7019      	strb	r1, [r3, #0]
 8004694:	68a3      	ldr	r3, [r4, #8]
 8004696:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800469a:	3b01      	subs	r3, #1
 800469c:	60a3      	str	r3, [r4, #8]
 800469e:	2900      	cmp	r1, #0
 80046a0:	d1ed      	bne.n	800467e <_puts_r+0x52>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	da11      	bge.n	80046ca <_puts_r+0x9e>
 80046a6:	4622      	mov	r2, r4
 80046a8:	210a      	movs	r1, #10
 80046aa:	4628      	mov	r0, r5
 80046ac:	f000 f85f 	bl	800476e <__swbuf_r>
 80046b0:	3001      	adds	r0, #1
 80046b2:	d0d7      	beq.n	8004664 <_puts_r+0x38>
 80046b4:	250a      	movs	r5, #10
 80046b6:	e7d7      	b.n	8004668 <_puts_r+0x3c>
 80046b8:	4622      	mov	r2, r4
 80046ba:	4628      	mov	r0, r5
 80046bc:	f000 f857 	bl	800476e <__swbuf_r>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d1e7      	bne.n	8004694 <_puts_r+0x68>
 80046c4:	e7ce      	b.n	8004664 <_puts_r+0x38>
 80046c6:	3e01      	subs	r6, #1
 80046c8:	e7e4      	b.n	8004694 <_puts_r+0x68>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	6022      	str	r2, [r4, #0]
 80046d0:	220a      	movs	r2, #10
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	e7ee      	b.n	80046b4 <_puts_r+0x88>
	...

080046d8 <puts>:
 80046d8:	4b02      	ldr	r3, [pc, #8]	@ (80046e4 <puts+0xc>)
 80046da:	4601      	mov	r1, r0
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	f7ff bfa5 	b.w	800462c <_puts_r>
 80046e2:	bf00      	nop
 80046e4:	20000018 	.word	0x20000018

080046e8 <__sread>:
 80046e8:	b510      	push	{r4, lr}
 80046ea:	460c      	mov	r4, r1
 80046ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f0:	f000 f8fc 	bl	80048ec <_read_r>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	bfab      	itete	ge
 80046f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046fa:	89a3      	ldrhlt	r3, [r4, #12]
 80046fc:	181b      	addge	r3, r3, r0
 80046fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004702:	bfac      	ite	ge
 8004704:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004706:	81a3      	strhlt	r3, [r4, #12]
 8004708:	bd10      	pop	{r4, pc}

0800470a <__swrite>:
 800470a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470e:	461f      	mov	r7, r3
 8004710:	898b      	ldrh	r3, [r1, #12]
 8004712:	05db      	lsls	r3, r3, #23
 8004714:	4605      	mov	r5, r0
 8004716:	460c      	mov	r4, r1
 8004718:	4616      	mov	r6, r2
 800471a:	d505      	bpl.n	8004728 <__swrite+0x1e>
 800471c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004720:	2302      	movs	r3, #2
 8004722:	2200      	movs	r2, #0
 8004724:	f000 f8d0 	bl	80048c8 <_lseek_r>
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800472e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004732:	81a3      	strh	r3, [r4, #12]
 8004734:	4632      	mov	r2, r6
 8004736:	463b      	mov	r3, r7
 8004738:	4628      	mov	r0, r5
 800473a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800473e:	f000 b8e7 	b.w	8004910 <_write_r>

08004742 <__sseek>:
 8004742:	b510      	push	{r4, lr}
 8004744:	460c      	mov	r4, r1
 8004746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474a:	f000 f8bd 	bl	80048c8 <_lseek_r>
 800474e:	1c43      	adds	r3, r0, #1
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	bf15      	itete	ne
 8004754:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004756:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800475a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800475e:	81a3      	strheq	r3, [r4, #12]
 8004760:	bf18      	it	ne
 8004762:	81a3      	strhne	r3, [r4, #12]
 8004764:	bd10      	pop	{r4, pc}

08004766 <__sclose>:
 8004766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800476a:	f000 b89d 	b.w	80048a8 <_close_r>

0800476e <__swbuf_r>:
 800476e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004770:	460e      	mov	r6, r1
 8004772:	4614      	mov	r4, r2
 8004774:	4605      	mov	r5, r0
 8004776:	b118      	cbz	r0, 8004780 <__swbuf_r+0x12>
 8004778:	6a03      	ldr	r3, [r0, #32]
 800477a:	b90b      	cbnz	r3, 8004780 <__swbuf_r+0x12>
 800477c:	f7ff ff20 	bl	80045c0 <__sinit>
 8004780:	69a3      	ldr	r3, [r4, #24]
 8004782:	60a3      	str	r3, [r4, #8]
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	071a      	lsls	r2, r3, #28
 8004788:	d501      	bpl.n	800478e <__swbuf_r+0x20>
 800478a:	6923      	ldr	r3, [r4, #16]
 800478c:	b943      	cbnz	r3, 80047a0 <__swbuf_r+0x32>
 800478e:	4621      	mov	r1, r4
 8004790:	4628      	mov	r0, r5
 8004792:	f000 f82b 	bl	80047ec <__swsetup_r>
 8004796:	b118      	cbz	r0, 80047a0 <__swbuf_r+0x32>
 8004798:	f04f 37ff 	mov.w	r7, #4294967295
 800479c:	4638      	mov	r0, r7
 800479e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	6922      	ldr	r2, [r4, #16]
 80047a4:	1a98      	subs	r0, r3, r2
 80047a6:	6963      	ldr	r3, [r4, #20]
 80047a8:	b2f6      	uxtb	r6, r6
 80047aa:	4283      	cmp	r3, r0
 80047ac:	4637      	mov	r7, r6
 80047ae:	dc05      	bgt.n	80047bc <__swbuf_r+0x4e>
 80047b0:	4621      	mov	r1, r4
 80047b2:	4628      	mov	r0, r5
 80047b4:	f000 fa68 	bl	8004c88 <_fflush_r>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d1ed      	bne.n	8004798 <__swbuf_r+0x2a>
 80047bc:	68a3      	ldr	r3, [r4, #8]
 80047be:	3b01      	subs	r3, #1
 80047c0:	60a3      	str	r3, [r4, #8]
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	6022      	str	r2, [r4, #0]
 80047c8:	701e      	strb	r6, [r3, #0]
 80047ca:	6962      	ldr	r2, [r4, #20]
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d004      	beq.n	80047dc <__swbuf_r+0x6e>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	07db      	lsls	r3, r3, #31
 80047d6:	d5e1      	bpl.n	800479c <__swbuf_r+0x2e>
 80047d8:	2e0a      	cmp	r6, #10
 80047da:	d1df      	bne.n	800479c <__swbuf_r+0x2e>
 80047dc:	4621      	mov	r1, r4
 80047de:	4628      	mov	r0, r5
 80047e0:	f000 fa52 	bl	8004c88 <_fflush_r>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d0d9      	beq.n	800479c <__swbuf_r+0x2e>
 80047e8:	e7d6      	b.n	8004798 <__swbuf_r+0x2a>
	...

080047ec <__swsetup_r>:
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	4b29      	ldr	r3, [pc, #164]	@ (8004894 <__swsetup_r+0xa8>)
 80047f0:	4605      	mov	r5, r0
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	460c      	mov	r4, r1
 80047f6:	b118      	cbz	r0, 8004800 <__swsetup_r+0x14>
 80047f8:	6a03      	ldr	r3, [r0, #32]
 80047fa:	b90b      	cbnz	r3, 8004800 <__swsetup_r+0x14>
 80047fc:	f7ff fee0 	bl	80045c0 <__sinit>
 8004800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004804:	0719      	lsls	r1, r3, #28
 8004806:	d422      	bmi.n	800484e <__swsetup_r+0x62>
 8004808:	06da      	lsls	r2, r3, #27
 800480a:	d407      	bmi.n	800481c <__swsetup_r+0x30>
 800480c:	2209      	movs	r2, #9
 800480e:	602a      	str	r2, [r5, #0]
 8004810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	f04f 30ff 	mov.w	r0, #4294967295
 800481a:	e033      	b.n	8004884 <__swsetup_r+0x98>
 800481c:	0758      	lsls	r0, r3, #29
 800481e:	d512      	bpl.n	8004846 <__swsetup_r+0x5a>
 8004820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004822:	b141      	cbz	r1, 8004836 <__swsetup_r+0x4a>
 8004824:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004828:	4299      	cmp	r1, r3
 800482a:	d002      	beq.n	8004832 <__swsetup_r+0x46>
 800482c:	4628      	mov	r0, r5
 800482e:	f000 f8af 	bl	8004990 <_free_r>
 8004832:	2300      	movs	r3, #0
 8004834:	6363      	str	r3, [r4, #52]	@ 0x34
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	2300      	movs	r3, #0
 8004840:	6063      	str	r3, [r4, #4]
 8004842:	6923      	ldr	r3, [r4, #16]
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	f043 0308 	orr.w	r3, r3, #8
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	b94b      	cbnz	r3, 8004866 <__swsetup_r+0x7a>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485c:	d003      	beq.n	8004866 <__swsetup_r+0x7a>
 800485e:	4621      	mov	r1, r4
 8004860:	4628      	mov	r0, r5
 8004862:	f000 fa5f 	bl	8004d24 <__smakebuf_r>
 8004866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800486a:	f013 0201 	ands.w	r2, r3, #1
 800486e:	d00a      	beq.n	8004886 <__swsetup_r+0x9a>
 8004870:	2200      	movs	r2, #0
 8004872:	60a2      	str	r2, [r4, #8]
 8004874:	6962      	ldr	r2, [r4, #20]
 8004876:	4252      	negs	r2, r2
 8004878:	61a2      	str	r2, [r4, #24]
 800487a:	6922      	ldr	r2, [r4, #16]
 800487c:	b942      	cbnz	r2, 8004890 <__swsetup_r+0xa4>
 800487e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004882:	d1c5      	bne.n	8004810 <__swsetup_r+0x24>
 8004884:	bd38      	pop	{r3, r4, r5, pc}
 8004886:	0799      	lsls	r1, r3, #30
 8004888:	bf58      	it	pl
 800488a:	6962      	ldrpl	r2, [r4, #20]
 800488c:	60a2      	str	r2, [r4, #8]
 800488e:	e7f4      	b.n	800487a <__swsetup_r+0x8e>
 8004890:	2000      	movs	r0, #0
 8004892:	e7f7      	b.n	8004884 <__swsetup_r+0x98>
 8004894:	20000018 	.word	0x20000018

08004898 <memset>:
 8004898:	4402      	add	r2, r0
 800489a:	4603      	mov	r3, r0
 800489c:	4293      	cmp	r3, r2
 800489e:	d100      	bne.n	80048a2 <memset+0xa>
 80048a0:	4770      	bx	lr
 80048a2:	f803 1b01 	strb.w	r1, [r3], #1
 80048a6:	e7f9      	b.n	800489c <memset+0x4>

080048a8 <_close_r>:
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	4d06      	ldr	r5, [pc, #24]	@ (80048c4 <_close_r+0x1c>)
 80048ac:	2300      	movs	r3, #0
 80048ae:	4604      	mov	r4, r0
 80048b0:	4608      	mov	r0, r1
 80048b2:	602b      	str	r3, [r5, #0]
 80048b4:	f7fc fa12 	bl	8000cdc <_close>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_close_r+0x1a>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_close_r+0x1a>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	200002b4 	.word	0x200002b4

080048c8 <_lseek_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d07      	ldr	r5, [pc, #28]	@ (80048e8 <_lseek_r+0x20>)
 80048cc:	4604      	mov	r4, r0
 80048ce:	4608      	mov	r0, r1
 80048d0:	4611      	mov	r1, r2
 80048d2:	2200      	movs	r2, #0
 80048d4:	602a      	str	r2, [r5, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f7fc fa27 	bl	8000d2a <_lseek>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_lseek_r+0x1e>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_lseek_r+0x1e>
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	200002b4 	.word	0x200002b4

080048ec <_read_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4d07      	ldr	r5, [pc, #28]	@ (800490c <_read_r+0x20>)
 80048f0:	4604      	mov	r4, r0
 80048f2:	4608      	mov	r0, r1
 80048f4:	4611      	mov	r1, r2
 80048f6:	2200      	movs	r2, #0
 80048f8:	602a      	str	r2, [r5, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f7fc f9b5 	bl	8000c6a <_read>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_read_r+0x1e>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_read_r+0x1e>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	200002b4 	.word	0x200002b4

08004910 <_write_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4d07      	ldr	r5, [pc, #28]	@ (8004930 <_write_r+0x20>)
 8004914:	4604      	mov	r4, r0
 8004916:	4608      	mov	r0, r1
 8004918:	4611      	mov	r1, r2
 800491a:	2200      	movs	r2, #0
 800491c:	602a      	str	r2, [r5, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f7fc f9c0 	bl	8000ca4 <_write>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_write_r+0x1e>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b103      	cbz	r3, 800492e <_write_r+0x1e>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	200002b4 	.word	0x200002b4

08004934 <__errno>:
 8004934:	4b01      	ldr	r3, [pc, #4]	@ (800493c <__errno+0x8>)
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20000018 	.word	0x20000018

08004940 <__libc_init_array>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	4d0d      	ldr	r5, [pc, #52]	@ (8004978 <__libc_init_array+0x38>)
 8004944:	4c0d      	ldr	r4, [pc, #52]	@ (800497c <__libc_init_array+0x3c>)
 8004946:	1b64      	subs	r4, r4, r5
 8004948:	10a4      	asrs	r4, r4, #2
 800494a:	2600      	movs	r6, #0
 800494c:	42a6      	cmp	r6, r4
 800494e:	d109      	bne.n	8004964 <__libc_init_array+0x24>
 8004950:	4d0b      	ldr	r5, [pc, #44]	@ (8004980 <__libc_init_array+0x40>)
 8004952:	4c0c      	ldr	r4, [pc, #48]	@ (8004984 <__libc_init_array+0x44>)
 8004954:	f000 fa54 	bl	8004e00 <_init>
 8004958:	1b64      	subs	r4, r4, r5
 800495a:	10a4      	asrs	r4, r4, #2
 800495c:	2600      	movs	r6, #0
 800495e:	42a6      	cmp	r6, r4
 8004960:	d105      	bne.n	800496e <__libc_init_array+0x2e>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	f855 3b04 	ldr.w	r3, [r5], #4
 8004968:	4798      	blx	r3
 800496a:	3601      	adds	r6, #1
 800496c:	e7ee      	b.n	800494c <__libc_init_array+0xc>
 800496e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004972:	4798      	blx	r3
 8004974:	3601      	adds	r6, #1
 8004976:	e7f2      	b.n	800495e <__libc_init_array+0x1e>
 8004978:	08004e98 	.word	0x08004e98
 800497c:	08004e98 	.word	0x08004e98
 8004980:	08004e98 	.word	0x08004e98
 8004984:	08004e9c 	.word	0x08004e9c

08004988 <__retarget_lock_init_recursive>:
 8004988:	4770      	bx	lr

0800498a <__retarget_lock_acquire_recursive>:
 800498a:	4770      	bx	lr

0800498c <__retarget_lock_release_recursive>:
 800498c:	4770      	bx	lr
	...

08004990 <_free_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4605      	mov	r5, r0
 8004994:	2900      	cmp	r1, #0
 8004996:	d041      	beq.n	8004a1c <_free_r+0x8c>
 8004998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499c:	1f0c      	subs	r4, r1, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bfb8      	it	lt
 80049a2:	18e4      	addlt	r4, r4, r3
 80049a4:	f000 f8e0 	bl	8004b68 <__malloc_lock>
 80049a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a20 <_free_r+0x90>)
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	b933      	cbnz	r3, 80049bc <_free_r+0x2c>
 80049ae:	6063      	str	r3, [r4, #4]
 80049b0:	6014      	str	r4, [r2, #0]
 80049b2:	4628      	mov	r0, r5
 80049b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b8:	f000 b8dc 	b.w	8004b74 <__malloc_unlock>
 80049bc:	42a3      	cmp	r3, r4
 80049be:	d908      	bls.n	80049d2 <_free_r+0x42>
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	1821      	adds	r1, r4, r0
 80049c4:	428b      	cmp	r3, r1
 80049c6:	bf01      	itttt	eq
 80049c8:	6819      	ldreq	r1, [r3, #0]
 80049ca:	685b      	ldreq	r3, [r3, #4]
 80049cc:	1809      	addeq	r1, r1, r0
 80049ce:	6021      	streq	r1, [r4, #0]
 80049d0:	e7ed      	b.n	80049ae <_free_r+0x1e>
 80049d2:	461a      	mov	r2, r3
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	b10b      	cbz	r3, 80049dc <_free_r+0x4c>
 80049d8:	42a3      	cmp	r3, r4
 80049da:	d9fa      	bls.n	80049d2 <_free_r+0x42>
 80049dc:	6811      	ldr	r1, [r2, #0]
 80049de:	1850      	adds	r0, r2, r1
 80049e0:	42a0      	cmp	r0, r4
 80049e2:	d10b      	bne.n	80049fc <_free_r+0x6c>
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	4401      	add	r1, r0
 80049e8:	1850      	adds	r0, r2, r1
 80049ea:	4283      	cmp	r3, r0
 80049ec:	6011      	str	r1, [r2, #0]
 80049ee:	d1e0      	bne.n	80049b2 <_free_r+0x22>
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	6053      	str	r3, [r2, #4]
 80049f6:	4408      	add	r0, r1
 80049f8:	6010      	str	r0, [r2, #0]
 80049fa:	e7da      	b.n	80049b2 <_free_r+0x22>
 80049fc:	d902      	bls.n	8004a04 <_free_r+0x74>
 80049fe:	230c      	movs	r3, #12
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	e7d6      	b.n	80049b2 <_free_r+0x22>
 8004a04:	6820      	ldr	r0, [r4, #0]
 8004a06:	1821      	adds	r1, r4, r0
 8004a08:	428b      	cmp	r3, r1
 8004a0a:	bf04      	itt	eq
 8004a0c:	6819      	ldreq	r1, [r3, #0]
 8004a0e:	685b      	ldreq	r3, [r3, #4]
 8004a10:	6063      	str	r3, [r4, #4]
 8004a12:	bf04      	itt	eq
 8004a14:	1809      	addeq	r1, r1, r0
 8004a16:	6021      	streq	r1, [r4, #0]
 8004a18:	6054      	str	r4, [r2, #4]
 8004a1a:	e7ca      	b.n	80049b2 <_free_r+0x22>
 8004a1c:	bd38      	pop	{r3, r4, r5, pc}
 8004a1e:	bf00      	nop
 8004a20:	200002c0 	.word	0x200002c0

08004a24 <sbrk_aligned>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	4e0f      	ldr	r6, [pc, #60]	@ (8004a64 <sbrk_aligned+0x40>)
 8004a28:	460c      	mov	r4, r1
 8004a2a:	6831      	ldr	r1, [r6, #0]
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	b911      	cbnz	r1, 8004a36 <sbrk_aligned+0x12>
 8004a30:	f000 f9d6 	bl	8004de0 <_sbrk_r>
 8004a34:	6030      	str	r0, [r6, #0]
 8004a36:	4621      	mov	r1, r4
 8004a38:	4628      	mov	r0, r5
 8004a3a:	f000 f9d1 	bl	8004de0 <_sbrk_r>
 8004a3e:	1c43      	adds	r3, r0, #1
 8004a40:	d103      	bne.n	8004a4a <sbrk_aligned+0x26>
 8004a42:	f04f 34ff 	mov.w	r4, #4294967295
 8004a46:	4620      	mov	r0, r4
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
 8004a4a:	1cc4      	adds	r4, r0, #3
 8004a4c:	f024 0403 	bic.w	r4, r4, #3
 8004a50:	42a0      	cmp	r0, r4
 8004a52:	d0f8      	beq.n	8004a46 <sbrk_aligned+0x22>
 8004a54:	1a21      	subs	r1, r4, r0
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 f9c2 	bl	8004de0 <_sbrk_r>
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d1f2      	bne.n	8004a46 <sbrk_aligned+0x22>
 8004a60:	e7ef      	b.n	8004a42 <sbrk_aligned+0x1e>
 8004a62:	bf00      	nop
 8004a64:	200002bc 	.word	0x200002bc

08004a68 <_malloc_r>:
 8004a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a6c:	1ccd      	adds	r5, r1, #3
 8004a6e:	f025 0503 	bic.w	r5, r5, #3
 8004a72:	3508      	adds	r5, #8
 8004a74:	2d0c      	cmp	r5, #12
 8004a76:	bf38      	it	cc
 8004a78:	250c      	movcc	r5, #12
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	db01      	blt.n	8004a84 <_malloc_r+0x1c>
 8004a80:	42a9      	cmp	r1, r5
 8004a82:	d904      	bls.n	8004a8e <_malloc_r+0x26>
 8004a84:	230c      	movs	r3, #12
 8004a86:	6033      	str	r3, [r6, #0]
 8004a88:	2000      	movs	r0, #0
 8004a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b64 <_malloc_r+0xfc>
 8004a92:	f000 f869 	bl	8004b68 <__malloc_lock>
 8004a96:	f8d8 3000 	ldr.w	r3, [r8]
 8004a9a:	461c      	mov	r4, r3
 8004a9c:	bb44      	cbnz	r4, 8004af0 <_malloc_r+0x88>
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f7ff ffbf 	bl	8004a24 <sbrk_aligned>
 8004aa6:	1c43      	adds	r3, r0, #1
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	d158      	bne.n	8004b5e <_malloc_r+0xf6>
 8004aac:	f8d8 4000 	ldr.w	r4, [r8]
 8004ab0:	4627      	mov	r7, r4
 8004ab2:	2f00      	cmp	r7, #0
 8004ab4:	d143      	bne.n	8004b3e <_malloc_r+0xd6>
 8004ab6:	2c00      	cmp	r4, #0
 8004ab8:	d04b      	beq.n	8004b52 <_malloc_r+0xea>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	4639      	mov	r1, r7
 8004abe:	4630      	mov	r0, r6
 8004ac0:	eb04 0903 	add.w	r9, r4, r3
 8004ac4:	f000 f98c 	bl	8004de0 <_sbrk_r>
 8004ac8:	4581      	cmp	r9, r0
 8004aca:	d142      	bne.n	8004b52 <_malloc_r+0xea>
 8004acc:	6821      	ldr	r1, [r4, #0]
 8004ace:	1a6d      	subs	r5, r5, r1
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7ff ffa6 	bl	8004a24 <sbrk_aligned>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d03a      	beq.n	8004b52 <_malloc_r+0xea>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	442b      	add	r3, r5
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	bb62      	cbnz	r2, 8004b44 <_malloc_r+0xdc>
 8004aea:	f8c8 7000 	str.w	r7, [r8]
 8004aee:	e00f      	b.n	8004b10 <_malloc_r+0xa8>
 8004af0:	6822      	ldr	r2, [r4, #0]
 8004af2:	1b52      	subs	r2, r2, r5
 8004af4:	d420      	bmi.n	8004b38 <_malloc_r+0xd0>
 8004af6:	2a0b      	cmp	r2, #11
 8004af8:	d917      	bls.n	8004b2a <_malloc_r+0xc2>
 8004afa:	1961      	adds	r1, r4, r5
 8004afc:	42a3      	cmp	r3, r4
 8004afe:	6025      	str	r5, [r4, #0]
 8004b00:	bf18      	it	ne
 8004b02:	6059      	strne	r1, [r3, #4]
 8004b04:	6863      	ldr	r3, [r4, #4]
 8004b06:	bf08      	it	eq
 8004b08:	f8c8 1000 	streq.w	r1, [r8]
 8004b0c:	5162      	str	r2, [r4, r5]
 8004b0e:	604b      	str	r3, [r1, #4]
 8004b10:	4630      	mov	r0, r6
 8004b12:	f000 f82f 	bl	8004b74 <__malloc_unlock>
 8004b16:	f104 000b 	add.w	r0, r4, #11
 8004b1a:	1d23      	adds	r3, r4, #4
 8004b1c:	f020 0007 	bic.w	r0, r0, #7
 8004b20:	1ac2      	subs	r2, r0, r3
 8004b22:	bf1c      	itt	ne
 8004b24:	1a1b      	subne	r3, r3, r0
 8004b26:	50a3      	strne	r3, [r4, r2]
 8004b28:	e7af      	b.n	8004a8a <_malloc_r+0x22>
 8004b2a:	6862      	ldr	r2, [r4, #4]
 8004b2c:	42a3      	cmp	r3, r4
 8004b2e:	bf0c      	ite	eq
 8004b30:	f8c8 2000 	streq.w	r2, [r8]
 8004b34:	605a      	strne	r2, [r3, #4]
 8004b36:	e7eb      	b.n	8004b10 <_malloc_r+0xa8>
 8004b38:	4623      	mov	r3, r4
 8004b3a:	6864      	ldr	r4, [r4, #4]
 8004b3c:	e7ae      	b.n	8004a9c <_malloc_r+0x34>
 8004b3e:	463c      	mov	r4, r7
 8004b40:	687f      	ldr	r7, [r7, #4]
 8004b42:	e7b6      	b.n	8004ab2 <_malloc_r+0x4a>
 8004b44:	461a      	mov	r2, r3
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	d1fb      	bne.n	8004b44 <_malloc_r+0xdc>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6053      	str	r3, [r2, #4]
 8004b50:	e7de      	b.n	8004b10 <_malloc_r+0xa8>
 8004b52:	230c      	movs	r3, #12
 8004b54:	6033      	str	r3, [r6, #0]
 8004b56:	4630      	mov	r0, r6
 8004b58:	f000 f80c 	bl	8004b74 <__malloc_unlock>
 8004b5c:	e794      	b.n	8004a88 <_malloc_r+0x20>
 8004b5e:	6005      	str	r5, [r0, #0]
 8004b60:	e7d6      	b.n	8004b10 <_malloc_r+0xa8>
 8004b62:	bf00      	nop
 8004b64:	200002c0 	.word	0x200002c0

08004b68 <__malloc_lock>:
 8004b68:	4801      	ldr	r0, [pc, #4]	@ (8004b70 <__malloc_lock+0x8>)
 8004b6a:	f7ff bf0e 	b.w	800498a <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	200002b8 	.word	0x200002b8

08004b74 <__malloc_unlock>:
 8004b74:	4801      	ldr	r0, [pc, #4]	@ (8004b7c <__malloc_unlock+0x8>)
 8004b76:	f7ff bf09 	b.w	800498c <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	200002b8 	.word	0x200002b8

08004b80 <__sflush_r>:
 8004b80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b88:	0716      	lsls	r6, r2, #28
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	d454      	bmi.n	8004c3a <__sflush_r+0xba>
 8004b90:	684b      	ldr	r3, [r1, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	dc02      	bgt.n	8004b9c <__sflush_r+0x1c>
 8004b96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	dd48      	ble.n	8004c2e <__sflush_r+0xae>
 8004b9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b9e:	2e00      	cmp	r6, #0
 8004ba0:	d045      	beq.n	8004c2e <__sflush_r+0xae>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ba8:	682f      	ldr	r7, [r5, #0]
 8004baa:	6a21      	ldr	r1, [r4, #32]
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	d030      	beq.n	8004c12 <__sflush_r+0x92>
 8004bb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	0759      	lsls	r1, r3, #29
 8004bb6:	d505      	bpl.n	8004bc4 <__sflush_r+0x44>
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	1ad2      	subs	r2, r2, r3
 8004bbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bbe:	b10b      	cbz	r3, 8004bc4 <__sflush_r+0x44>
 8004bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bc2:	1ad2      	subs	r2, r2, r3
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bc8:	6a21      	ldr	r1, [r4, #32]
 8004bca:	4628      	mov	r0, r5
 8004bcc:	47b0      	blx	r6
 8004bce:	1c43      	adds	r3, r0, #1
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	d106      	bne.n	8004be2 <__sflush_r+0x62>
 8004bd4:	6829      	ldr	r1, [r5, #0]
 8004bd6:	291d      	cmp	r1, #29
 8004bd8:	d82b      	bhi.n	8004c32 <__sflush_r+0xb2>
 8004bda:	4a2a      	ldr	r2, [pc, #168]	@ (8004c84 <__sflush_r+0x104>)
 8004bdc:	410a      	asrs	r2, r1
 8004bde:	07d6      	lsls	r6, r2, #31
 8004be0:	d427      	bmi.n	8004c32 <__sflush_r+0xb2>
 8004be2:	2200      	movs	r2, #0
 8004be4:	6062      	str	r2, [r4, #4]
 8004be6:	04d9      	lsls	r1, r3, #19
 8004be8:	6922      	ldr	r2, [r4, #16]
 8004bea:	6022      	str	r2, [r4, #0]
 8004bec:	d504      	bpl.n	8004bf8 <__sflush_r+0x78>
 8004bee:	1c42      	adds	r2, r0, #1
 8004bf0:	d101      	bne.n	8004bf6 <__sflush_r+0x76>
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	b903      	cbnz	r3, 8004bf8 <__sflush_r+0x78>
 8004bf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8004bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bfa:	602f      	str	r7, [r5, #0]
 8004bfc:	b1b9      	cbz	r1, 8004c2e <__sflush_r+0xae>
 8004bfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c02:	4299      	cmp	r1, r3
 8004c04:	d002      	beq.n	8004c0c <__sflush_r+0x8c>
 8004c06:	4628      	mov	r0, r5
 8004c08:	f7ff fec2 	bl	8004990 <_free_r>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c10:	e00d      	b.n	8004c2e <__sflush_r+0xae>
 8004c12:	2301      	movs	r3, #1
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b0      	blx	r6
 8004c18:	4602      	mov	r2, r0
 8004c1a:	1c50      	adds	r0, r2, #1
 8004c1c:	d1c9      	bne.n	8004bb2 <__sflush_r+0x32>
 8004c1e:	682b      	ldr	r3, [r5, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0c6      	beq.n	8004bb2 <__sflush_r+0x32>
 8004c24:	2b1d      	cmp	r3, #29
 8004c26:	d001      	beq.n	8004c2c <__sflush_r+0xac>
 8004c28:	2b16      	cmp	r3, #22
 8004c2a:	d11e      	bne.n	8004c6a <__sflush_r+0xea>
 8004c2c:	602f      	str	r7, [r5, #0]
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e022      	b.n	8004c78 <__sflush_r+0xf8>
 8004c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c36:	b21b      	sxth	r3, r3
 8004c38:	e01b      	b.n	8004c72 <__sflush_r+0xf2>
 8004c3a:	690f      	ldr	r7, [r1, #16]
 8004c3c:	2f00      	cmp	r7, #0
 8004c3e:	d0f6      	beq.n	8004c2e <__sflush_r+0xae>
 8004c40:	0793      	lsls	r3, r2, #30
 8004c42:	680e      	ldr	r6, [r1, #0]
 8004c44:	bf08      	it	eq
 8004c46:	694b      	ldreq	r3, [r1, #20]
 8004c48:	600f      	str	r7, [r1, #0]
 8004c4a:	bf18      	it	ne
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	eba6 0807 	sub.w	r8, r6, r7
 8004c52:	608b      	str	r3, [r1, #8]
 8004c54:	f1b8 0f00 	cmp.w	r8, #0
 8004c58:	dde9      	ble.n	8004c2e <__sflush_r+0xae>
 8004c5a:	6a21      	ldr	r1, [r4, #32]
 8004c5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c5e:	4643      	mov	r3, r8
 8004c60:	463a      	mov	r2, r7
 8004c62:	4628      	mov	r0, r5
 8004c64:	47b0      	blx	r6
 8004c66:	2800      	cmp	r0, #0
 8004c68:	dc08      	bgt.n	8004c7c <__sflush_r+0xfc>
 8004c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c72:	81a3      	strh	r3, [r4, #12]
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c7c:	4407      	add	r7, r0
 8004c7e:	eba8 0800 	sub.w	r8, r8, r0
 8004c82:	e7e7      	b.n	8004c54 <__sflush_r+0xd4>
 8004c84:	dfbffffe 	.word	0xdfbffffe

08004c88 <_fflush_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	690b      	ldr	r3, [r1, #16]
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	b913      	cbnz	r3, 8004c98 <_fflush_r+0x10>
 8004c92:	2500      	movs	r5, #0
 8004c94:	4628      	mov	r0, r5
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	b118      	cbz	r0, 8004ca2 <_fflush_r+0x1a>
 8004c9a:	6a03      	ldr	r3, [r0, #32]
 8004c9c:	b90b      	cbnz	r3, 8004ca2 <_fflush_r+0x1a>
 8004c9e:	f7ff fc8f 	bl	80045c0 <__sinit>
 8004ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f3      	beq.n	8004c92 <_fflush_r+0xa>
 8004caa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004cac:	07d0      	lsls	r0, r2, #31
 8004cae:	d404      	bmi.n	8004cba <_fflush_r+0x32>
 8004cb0:	0599      	lsls	r1, r3, #22
 8004cb2:	d402      	bmi.n	8004cba <_fflush_r+0x32>
 8004cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cb6:	f7ff fe68 	bl	800498a <__retarget_lock_acquire_recursive>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	f7ff ff5f 	bl	8004b80 <__sflush_r>
 8004cc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cc4:	07da      	lsls	r2, r3, #31
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	d4e4      	bmi.n	8004c94 <_fflush_r+0xc>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	059b      	lsls	r3, r3, #22
 8004cce:	d4e1      	bmi.n	8004c94 <_fflush_r+0xc>
 8004cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cd2:	f7ff fe5b 	bl	800498c <__retarget_lock_release_recursive>
 8004cd6:	e7dd      	b.n	8004c94 <_fflush_r+0xc>

08004cd8 <__swhatbuf_r>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	460c      	mov	r4, r1
 8004cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	b096      	sub	sp, #88	@ 0x58
 8004ce4:	4615      	mov	r5, r2
 8004ce6:	461e      	mov	r6, r3
 8004ce8:	da0d      	bge.n	8004d06 <__swhatbuf_r+0x2e>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004cf0:	f04f 0100 	mov.w	r1, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2340      	movne	r3, #64	@ 0x40
 8004cf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	6031      	str	r1, [r6, #0]
 8004d00:	602b      	str	r3, [r5, #0]
 8004d02:	b016      	add	sp, #88	@ 0x58
 8004d04:	bd70      	pop	{r4, r5, r6, pc}
 8004d06:	466a      	mov	r2, sp
 8004d08:	f000 f848 	bl	8004d9c <_fstat_r>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	dbec      	blt.n	8004cea <__swhatbuf_r+0x12>
 8004d10:	9901      	ldr	r1, [sp, #4]
 8004d12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d1a:	4259      	negs	r1, r3
 8004d1c:	4159      	adcs	r1, r3
 8004d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d22:	e7eb      	b.n	8004cfc <__swhatbuf_r+0x24>

08004d24 <__smakebuf_r>:
 8004d24:	898b      	ldrh	r3, [r1, #12]
 8004d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d28:	079d      	lsls	r5, r3, #30
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	d507      	bpl.n	8004d40 <__smakebuf_r+0x1c>
 8004d30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	2301      	movs	r3, #1
 8004d3a:	6163      	str	r3, [r4, #20]
 8004d3c:	b003      	add	sp, #12
 8004d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d40:	ab01      	add	r3, sp, #4
 8004d42:	466a      	mov	r2, sp
 8004d44:	f7ff ffc8 	bl	8004cd8 <__swhatbuf_r>
 8004d48:	9f00      	ldr	r7, [sp, #0]
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f7ff fe8a 	bl	8004a68 <_malloc_r>
 8004d54:	b948      	cbnz	r0, 8004d6a <__smakebuf_r+0x46>
 8004d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5a:	059a      	lsls	r2, r3, #22
 8004d5c:	d4ee      	bmi.n	8004d3c <__smakebuf_r+0x18>
 8004d5e:	f023 0303 	bic.w	r3, r3, #3
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	81a3      	strh	r3, [r4, #12]
 8004d68:	e7e2      	b.n	8004d30 <__smakebuf_r+0xc>
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	6020      	str	r0, [r4, #0]
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d72:	81a3      	strh	r3, [r4, #12]
 8004d74:	9b01      	ldr	r3, [sp, #4]
 8004d76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d7a:	b15b      	cbz	r3, 8004d94 <__smakebuf_r+0x70>
 8004d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 f81d 	bl	8004dc0 <_isatty_r>
 8004d86:	b128      	cbz	r0, 8004d94 <__smakebuf_r+0x70>
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	431d      	orrs	r5, r3
 8004d98:	81a5      	strh	r5, [r4, #12]
 8004d9a:	e7cf      	b.n	8004d3c <__smakebuf_r+0x18>

08004d9c <_fstat_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4d07      	ldr	r5, [pc, #28]	@ (8004dbc <_fstat_r+0x20>)
 8004da0:	2300      	movs	r3, #0
 8004da2:	4604      	mov	r4, r0
 8004da4:	4608      	mov	r0, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	602b      	str	r3, [r5, #0]
 8004daa:	f7fb ffa3 	bl	8000cf4 <_fstat>
 8004dae:	1c43      	adds	r3, r0, #1
 8004db0:	d102      	bne.n	8004db8 <_fstat_r+0x1c>
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	b103      	cbz	r3, 8004db8 <_fstat_r+0x1c>
 8004db6:	6023      	str	r3, [r4, #0]
 8004db8:	bd38      	pop	{r3, r4, r5, pc}
 8004dba:	bf00      	nop
 8004dbc:	200002b4 	.word	0x200002b4

08004dc0 <_isatty_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4d06      	ldr	r5, [pc, #24]	@ (8004ddc <_isatty_r+0x1c>)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	4608      	mov	r0, r1
 8004dca:	602b      	str	r3, [r5, #0]
 8004dcc:	f7fb ffa2 	bl	8000d14 <_isatty>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_isatty_r+0x1a>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_isatty_r+0x1a>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	200002b4 	.word	0x200002b4

08004de0 <_sbrk_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4d06      	ldr	r5, [pc, #24]	@ (8004dfc <_sbrk_r+0x1c>)
 8004de4:	2300      	movs	r3, #0
 8004de6:	4604      	mov	r4, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	602b      	str	r3, [r5, #0]
 8004dec:	f7fb ffaa 	bl	8000d44 <_sbrk>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_sbrk_r+0x1a>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_sbrk_r+0x1a>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	200002b4 	.word	0x200002b4

08004e00 <_init>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr

08004e0c <_fini>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr
