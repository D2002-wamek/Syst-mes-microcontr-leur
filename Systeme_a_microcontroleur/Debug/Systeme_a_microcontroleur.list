
Systeme_a_microcontroleur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006610  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006798  08006798  00007798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006810  08006810  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006810  08006810  00007810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006818  08006818  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800681c  0800681c  0000781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006820  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000068  08006888  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08006888  000084b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012620  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026bd  00000000  00000000  0001a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d15  00000000  00000000  0001de38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c91  00000000  00000000  0001eb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c95  00000000  00000000  000467de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f12d1  00000000  00000000  0005b473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c744  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c80  00000000  00000000  0014c788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  00151408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006780 	.word	0x08006780

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08006780 	.word	0x08006780

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MCP23S17_WriteRegister>:
static void MX_SAI2_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */

/* Fonction d'écriture d'un registre */
void MCP23S17_WriteRegister(MCP23S17_HandleTypeDef *dev, uint8_t reg, uint8_t value) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
 80004c4:	4613      	mov	r3, r2
 80004c6:	70bb      	strb	r3, [r7, #2]
    uint8_t data[3] = {MCP23S17_ADDRESS, reg, value};
 80004c8:	2340      	movs	r3, #64	@ 0x40
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	78fb      	ldrb	r3, [r7, #3]
 80004ce:	737b      	strb	r3, [r7, #13]
 80004d0:	78bb      	ldrb	r3, [r7, #2]
 80004d2:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_RESET);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6858      	ldr	r0, [r3, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	891b      	ldrh	r3, [r3, #8]
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	f001 fb54 	bl	8001b8c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(dev->hspi, data, 3, HAL_MAX_DELAY);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	f107 010c 	add.w	r1, r7, #12
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295
 80004f0:	2203      	movs	r2, #3
 80004f2:	f004 fc13 	bl	8004d1c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_SET);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6858      	ldr	r0, [r3, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	891b      	ldrh	r3, [r3, #8]
 80004fe:	2201      	movs	r2, #1
 8000500:	4619      	mov	r1, r3
 8000502:	f001 fb43 	bl	8001b8c <HAL_GPIO_WritePin>
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int chr)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000518:	1d39      	adds	r1, r7, #4
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	2201      	movs	r2, #1
 8000520:	4803      	ldr	r0, [pc, #12]	@ (8000530 <__io_putchar+0x20>)
 8000522:	f004 ff23 	bl	800536c <HAL_UART_Transmit>
 return chr;
 8000526:	687b      	ldr	r3, [r7, #4]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200002d4 	.word	0x200002d4

08000534 <MCP23S17_Init>:

/* Initialisation du MCP23S17 */
void MCP23S17_Init(MCP23S17_HandleTypeDef *dev) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->RST_Port, dev->RST_Pin, GPIO_PIN_RESET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	68d8      	ldr	r0, [r3, #12]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	8a1b      	ldrh	r3, [r3, #16]
 8000544:	2200      	movs	r2, #0
 8000546:	4619      	mov	r1, r3
 8000548:	f001 fb20 	bl	8001b8c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800054c:	200a      	movs	r0, #10
 800054e:	f000 fe57 	bl	8001200 <HAL_Delay>
    HAL_GPIO_WritePin(dev->RST_Port, dev->RST_Pin, GPIO_PIN_SET);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	68d8      	ldr	r0, [r3, #12]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	8a1b      	ldrh	r3, [r3, #16]
 800055a:	2201      	movs	r2, #1
 800055c:	4619      	mov	r1, r3
 800055e:	f001 fb15 	bl	8001b8c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000562:	200a      	movs	r0, #10
 8000564:	f000 fe4c 	bl	8001200 <HAL_Delay>
    MCP23S17_WriteRegister(dev, MCP23S17_IOCON, 0x08);
 8000568:	2208      	movs	r2, #8
 800056a:	210a      	movs	r1, #10
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff ffa3 	bl	80004b8 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(dev, MCP23S17_IODIRA, 0x00);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f7ff ff9e 	bl	80004b8 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(dev, MCP23S17_IODIRB, 0x00);
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff ff99 	bl	80004b8 <MCP23S17_WriteRegister>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fdb7 	bl	8001108 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f82d 	bl	80005f8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800059e:	f000 f87c 	bl	800069a <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f9d9 	bl	8000958 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 f9b1 	bl	800090c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 f97f 	bl	80008ac <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80005ae:	f000 f93f 	bl	8000830 <MX_SPI3_Init>
  MX_SAI2_Init();
 80005b2:	f000 f8dd 	bl	8000770 <MX_SAI2_Init>
  MX_I2C2_Init();
 80005b6:	f000 f89b 	bl	80006f0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <main+0x5c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <main+0x5c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80005c8:	601a      	str	r2, [r3, #0]
  printf("\r\n==== Systeme micro ====\r\n");
 80005ca:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <main+0x60>)
 80005cc:	f005 fd44 	bl	8006058 <puts>

  MCP23S17_HandleTypeDef mcp23s17 = {
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <main+0x64>)
 80005d2:	1d3c      	adds	r4, r7, #4
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	682b      	ldr	r3, [r5, #0]
 80005dc:	6023      	str	r3, [r4, #0]
         .CS_Port = GPIOB,
         .CS_Pin = GPIO_PIN_7,
         .RST_Port = GPIOA,
         .RST_Pin = GPIO_PIN_0
     };
  MCP23S17_Init(&mcp23s17);
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffa7 	bl	8000534 <MCP23S17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e6:	bf00      	nop
 80005e8:	e7fd      	b.n	80005e6 <main+0x56>
 80005ea:	bf00      	nop
 80005ec:	200000d8 	.word	0x200000d8
 80005f0:	08006798 	.word	0x08006798
 80005f4:	080067b4 	.word	0x080067b4

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	@ 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	@ 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fe06 	bl	8006218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f001 fc0d 	bl	8001e3c <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 fa12 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2310      	movs	r3, #16
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000646:	230a      	movs	r3, #10
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fc44 	bl	8001ee8 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000666:	f000 f9f3 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2303      	movs	r3, #3
 8000670:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	2104      	movs	r1, #4
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f80c 	bl	80026a0 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068e:	f000 f9df 	bl	8000a50 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3758      	adds	r7, #88	@ 0x58
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b0a2      	sub	sp, #136	@ 0x88
 800069e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2288      	movs	r2, #136	@ 0x88
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 fdb6 	bl	8006218 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006b6:	2302      	movs	r3, #2
 80006b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 80006be:	230d      	movs	r3, #13
 80006c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80006c2:	2311      	movs	r3, #17
 80006c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80006ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fa06 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 80006e2:	f000 f9b5 	bl	8000a50 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3788      	adds	r7, #136	@ 0x88
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_I2C2_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000768 <MX_I2C2_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <MX_I2C2_Init+0x74>)
 80006fc:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <MX_I2C2_Init+0x7c>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_I2C2_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_I2C2_Init+0x74>)
 8000708:	2201      	movs	r2, #1
 800070a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_I2C2_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_I2C2_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_I2C2_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_I2C2_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800072a:	480e      	ldr	r0, [pc, #56]	@ (8000764 <MX_I2C2_Init+0x74>)
 800072c:	f001 fa46 	bl	8001bbc <HAL_I2C_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000736:	f000 f98b 	bl	8000a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4809      	ldr	r0, [pc, #36]	@ (8000764 <MX_I2C2_Init+0x74>)
 800073e:	f001 fad8 	bl	8001cf2 <HAL_I2CEx_ConfigAnalogFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000748:	f000 f982 	bl	8000a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_I2C2_Init+0x74>)
 8000750:	f001 fb1a 	bl	8001d88 <HAL_I2CEx_ConfigDigitalFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 f979 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000084 	.word	0x20000084
 8000768:	40005800 	.word	0x40005800
 800076c:	10d19ce4 	.word	0x10d19ce4

08000770 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000774:	4b2a      	ldr	r3, [pc, #168]	@ (8000820 <MX_SAI2_Init+0xb0>)
 8000776:	4a2b      	ldr	r2, [pc, #172]	@ (8000824 <MX_SAI2_Init+0xb4>)
 8000778:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800077a:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <MX_SAI2_Init+0xb0>)
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000780:	4b27      	ldr	r3, [pc, #156]	@ (8000820 <MX_SAI2_Init+0xb0>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000786:	4b26      	ldr	r3, [pc, #152]	@ (8000820 <MX_SAI2_Init+0xb0>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800078c:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <MX_SAI2_Init+0xb0>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000792:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <MX_SAI2_Init+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000798:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <MX_SAI2_Init+0xb0>)
 800079a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800079e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <MX_SAI2_Init+0xb0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80007a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <MX_SAI2_Init+0xb0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_SAI2_Init+0xb0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_SAI2_Init+0xb0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80007b8:	2302      	movs	r3, #2
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	4818      	ldr	r0, [pc, #96]	@ (8000820 <MX_SAI2_Init+0xb0>)
 80007c0:	f003 fcac 	bl	800411c <HAL_SAI_InitProtocol>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 80007ca:	f000 f941 	bl	8000a50 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80007ce:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_SAI2_Init+0xb8>)
 80007d0:	4a16      	ldr	r2, [pc, #88]	@ (800082c <MX_SAI2_Init+0xbc>)
 80007d2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80007d4:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_SAI2_Init+0xb8>)
 80007d6:	2203      	movs	r2, #3
 80007d8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80007da:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_SAI2_Init+0xb8>)
 80007dc:	2201      	movs	r2, #1
 80007de:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_SAI2_Init+0xb8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_SAI2_Init+0xb8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_SAI2_Init+0xb8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <MX_SAI2_Init+0xb8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_SAI2_Init+0xb8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_SAI2_Init+0xb8>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000804:	2302      	movs	r3, #2
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	4807      	ldr	r0, [pc, #28]	@ (8000828 <MX_SAI2_Init+0xb8>)
 800080c:	f003 fc86 	bl	800411c <HAL_SAI_InitProtocol>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000816:	f000 f91b 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000d8 	.word	0x200000d8
 8000824:	40015804 	.word	0x40015804
 8000828:	2000015c 	.word	0x2000015c
 800082c:	40015824 	.word	0x40015824

08000830 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000834:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <MX_SPI3_Init+0x74>)
 8000836:	4a1c      	ldr	r2, [pc, #112]	@ (80008a8 <MX_SPI3_Init+0x78>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_SPI3_Init+0x74>)
 800083c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000840:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <MX_SPI3_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MX_SPI3_Init+0x74>)
 800084a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800084e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_SPI3_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_SPI3_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_SPI3_Init+0x74>)
 800085e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000862:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_SPI3_Init+0x74>)
 8000866:	2228      	movs	r2, #40	@ 0x28
 8000868:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_SPI3_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_SPI3_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_SPI3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_SPI3_Init+0x74>)
 800087e:	2207      	movs	r2, #7
 8000880:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_SPI3_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_SPI3_Init+0x74>)
 800088a:	2208      	movs	r2, #8
 800088c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_SPI3_Init+0x74>)
 8000890:	f004 f9a1 	bl	8004bd6 <HAL_SPI_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 f8d9 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000270 	.word	0x20000270
 80008a8:	40003c00 	.word	0x40003c00

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */



  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	@ (8000908 <MX_USART2_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_USART2_UART_Init+0x58>)
 80008f0:	f004 fcee 	bl	80052d0 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f8a9 	bl	8000a50 <Error_Handler>



  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200002d4 	.word	0x200002d4
 8000908:	40004400 	.word	0x40004400

0800090c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MX_DMA_Init+0x48>)
 8000914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000916:	4a0f      	ldr	r2, [pc, #60]	@ (8000954 <MX_DMA_Init+0x48>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6493      	str	r3, [r2, #72]	@ 0x48
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <MX_DMA_Init+0x48>)
 8000920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2010      	movs	r0, #16
 8000930:	f000 fd65 	bl	80013fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000934:	2010      	movs	r0, #16
 8000936:	f000 fd7e 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2011      	movs	r0, #17
 8000940:	f000 fd5d 	bl	80013fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000944:	2011      	movs	r0, #17
 8000946:	f000 fd76 	bl	8001436 <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b35      	ldr	r3, [pc, #212]	@ (8000a44 <MX_GPIO_Init+0xec>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	4a34      	ldr	r2, [pc, #208]	@ (8000a44 <MX_GPIO_Init+0xec>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097a:	4b32      	ldr	r3, [pc, #200]	@ (8000a44 <MX_GPIO_Init+0xec>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	4b2f      	ldr	r3, [pc, #188]	@ (8000a44 <MX_GPIO_Init+0xec>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	4a2e      	ldr	r2, [pc, #184]	@ (8000a44 <MX_GPIO_Init+0xec>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000992:	4b2c      	ldr	r3, [pc, #176]	@ (8000a44 <MX_GPIO_Init+0xec>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <MX_GPIO_Init+0xec>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	4a28      	ldr	r2, [pc, #160]	@ (8000a44 <MX_GPIO_Init+0xec>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009aa:	4b26      	ldr	r3, [pc, #152]	@ (8000a44 <MX_GPIO_Init+0xec>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b23      	ldr	r3, [pc, #140]	@ (8000a44 <MX_GPIO_Init+0xec>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	4a22      	ldr	r2, [pc, #136]	@ (8000a44 <MX_GPIO_Init+0xec>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c2:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <MX_GPIO_Init+0xec>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2121      	movs	r1, #33	@ 0x21
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d6:	f001 f8d9 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2180      	movs	r1, #128	@ 0x80
 80009de:	481a      	ldr	r0, [pc, #104]	@ (8000a48 <MX_GPIO_Init+0xf0>)
 80009e0:	f001 f8d4 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4814      	ldr	r0, [pc, #80]	@ (8000a4c <MX_GPIO_Init+0xf4>)
 80009fc:	f000 ff1c 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 8000a00:	2321      	movs	r3, #33	@ 0x21
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1a:	f000 ff0d 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 8000a1e:	2380      	movs	r3, #128	@ 0x80
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <MX_GPIO_Init+0xf0>)
 8000a36:	f000 feff 	bl	8001838 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	@ 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	48000800 	.word	0x48000800

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7e:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0ac      	sub	sp, #176	@ 0xb0
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2288      	movs	r2, #136	@ 0x88
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fba7 	bl	8006218 <memset>
  if(hi2c->Instance==I2C2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a21      	ldr	r2, [pc, #132]	@ (8000b54 <HAL_I2C_MspInit+0xb0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d13b      	bne.n	8000b4c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 f801 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000aec:	f7ff ffb0 	bl	8000a50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a18      	ldr	r2, [pc, #96]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b08:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b10:	2312      	movs	r3, #18
 8000b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b22:	2304      	movs	r3, #4
 8000b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <HAL_I2C_MspInit+0xb8>)
 8000b30:	f000 fe82 	bl	8001838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b38:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000b3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000b4c:	bf00      	nop
 8000b4e:	37b0      	adds	r7, #176	@ 0xb0
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40005800 	.word	0x40005800
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000400 	.word	0x48000400

08000b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a25      	ldr	r2, [pc, #148]	@ (8000c14 <HAL_SPI_MspInit+0xb4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d144      	bne.n	8000c0c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b82:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <HAL_SPI_MspInit+0xb8>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b86:	4a24      	ldr	r2, [pc, #144]	@ (8000c18 <HAL_SPI_MspInit+0xb8>)
 8000b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b8e:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <HAL_SPI_MspInit+0xb8>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <HAL_SPI_MspInit+0xb8>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <HAL_SPI_MspInit+0xb8>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <HAL_SPI_MspInit+0xb8>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_SPI_MspInit+0xb8>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	4a18      	ldr	r2, [pc, #96]	@ (8000c18 <HAL_SPI_MspInit+0xb8>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_SPI_MspInit+0xb8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bdc:	2306      	movs	r3, #6
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <HAL_SPI_MspInit+0xbc>)
 8000be8:	f000 fe26 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bec:	2320      	movs	r3, #32
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <HAL_SPI_MspInit+0xc0>)
 8000c08:	f000 fe16 	bl	8001838 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	@ 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40003c00 	.word	0x40003c00
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48000800 	.word	0x48000800
 8000c20:	48000400 	.word	0x48000400

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0ac      	sub	sp, #176	@ 0xb0
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2288      	movs	r2, #136	@ 0x88
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f005 fae7 	bl	8006218 <memset>
  if(huart->Instance==USART2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a21      	ldr	r2, [pc, #132]	@ (8000cd4 <HAL_UART_MspInit+0xb0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d13b      	bne.n	8000ccc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4618      	mov	r0, r3
 8000c62:	f001 ff41 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c6c:	f7ff fef0 	bl	8000a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c70:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_UART_MspInit+0xb4>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c74:	4a18      	ldr	r2, [pc, #96]	@ (8000cd8 <HAL_UART_MspInit+0xb4>)
 8000c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <HAL_UART_MspInit+0xb4>)
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <HAL_UART_MspInit+0xb4>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <HAL_UART_MspInit+0xb4>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_UART_MspInit+0xb4>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc8:	f000 fdb6 	bl	8001838 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ccc:	bf00      	nop
 8000cce:	37b0      	adds	r7, #176	@ 0xb0
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a64      	ldr	r2, [pc, #400]	@ (8000e7c <HAL_SAI_MspInit+0x1a0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d15e      	bne.n	8000dac <HAL_SAI_MspInit+0xd0>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8000cee:	4b64      	ldr	r3, [pc, #400]	@ (8000e80 <HAL_SAI_MspInit+0x1a4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d113      	bne.n	8000d1e <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000cf6:	4b63      	ldr	r3, [pc, #396]	@ (8000e84 <HAL_SAI_MspInit+0x1a8>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfa:	4a62      	ldr	r2, [pc, #392]	@ (8000e84 <HAL_SAI_MspInit+0x1a8>)
 8000cfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d02:	4b60      	ldr	r3, [pc, #384]	@ (8000e84 <HAL_SAI_MspInit+0x1a8>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	204b      	movs	r0, #75	@ 0x4b
 8000d14:	f000 fb73 	bl	80013fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000d18:	204b      	movs	r0, #75	@ 0x4b
 8000d1a:	f000 fb8c 	bl	8001436 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000d1e:	4b58      	ldr	r3, [pc, #352]	@ (8000e80 <HAL_SAI_MspInit+0x1a4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a56      	ldr	r2, [pc, #344]	@ (8000e80 <HAL_SAI_MspInit+0x1a4>)
 8000d26:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d28:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d3a:	230d      	movs	r3, #13
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4850      	ldr	r0, [pc, #320]	@ (8000e88 <HAL_SAI_MspInit+0x1ac>)
 8000d46:	f000 fd77 	bl	8001838 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000d4a:	4b50      	ldr	r3, [pc, #320]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d4c:	4a50      	ldr	r2, [pc, #320]	@ (8000e90 <HAL_SAI_MspInit+0x1b4>)
 8000d4e:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000d50:	4b4e      	ldr	r3, [pc, #312]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d56:	4b4d      	ldr	r3, [pc, #308]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d58:	2210      	movs	r2, #16
 8000d5a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000d62:	4b4a      	ldr	r3, [pc, #296]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d68:	4b48      	ldr	r3, [pc, #288]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d6e:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d70:	4b46      	ldr	r3, [pc, #280]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d76:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000d78:	4b44      	ldr	r3, [pc, #272]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000d7e:	4b43      	ldr	r3, [pc, #268]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000d84:	4841      	ldr	r0, [pc, #260]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d86:	f000 fb71 	bl	800146c <HAL_DMA_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000d90:	f7ff fe5e 	bl	8000a50 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3d      	ldr	r2, [pc, #244]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d98:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a3a      	ldr	r2, [pc, #232]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000da4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000da6:	4a39      	ldr	r2, [pc, #228]	@ (8000e8c <HAL_SAI_MspInit+0x1b0>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6293      	str	r3, [r2, #40]	@ 0x28

    }
    if(hsai->Instance==SAI2_Block_B)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a38      	ldr	r2, [pc, #224]	@ (8000e94 <HAL_SAI_MspInit+0x1b8>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d15e      	bne.n	8000e74 <HAL_SAI_MspInit+0x198>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8000db6:	4b32      	ldr	r3, [pc, #200]	@ (8000e80 <HAL_SAI_MspInit+0x1a4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d113      	bne.n	8000de6 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000dbe:	4b31      	ldr	r3, [pc, #196]	@ (8000e84 <HAL_SAI_MspInit+0x1a8>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc2:	4a30      	ldr	r2, [pc, #192]	@ (8000e84 <HAL_SAI_MspInit+0x1a8>)
 8000dc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dca:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <HAL_SAI_MspInit+0x1a8>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	204b      	movs	r0, #75	@ 0x4b
 8000ddc:	f000 fb0f 	bl	80013fe <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000de0:	204b      	movs	r0, #75	@ 0x4b
 8000de2:	f000 fb28 	bl	8001436 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000de6:	4b26      	ldr	r3, [pc, #152]	@ (8000e80 <HAL_SAI_MspInit+0x1a4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a24      	ldr	r2, [pc, #144]	@ (8000e80 <HAL_SAI_MspInit+0x1a4>)
 8000dee:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e02:	230d      	movs	r3, #13
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4822      	ldr	r0, [pc, #136]	@ (8000e98 <HAL_SAI_MspInit+0x1bc>)
 8000e0e:	f000 fd13 	bl	8001838 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000e12:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e14:	4a22      	ldr	r2, [pc, #136]	@ (8000ea0 <HAL_SAI_MspInit+0x1c4>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000e18:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e2c:	2280      	movs	r2, #128	@ 0x80
 8000e2e:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e36:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e38:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e3e:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000e40:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e42:	2220      	movs	r2, #32
 8000e44:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000e4c:	4813      	ldr	r0, [pc, #76]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e4e:	f000 fb0d 	bl	800146c <HAL_DMA_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000e58:	f7ff fdfa 	bl	8000a50 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e60:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e62:	4a0e      	ldr	r2, [pc, #56]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e6c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <HAL_SAI_MspInit+0x1c0>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	@ 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40015804 	.word	0x40015804
 8000e80:	2000035c 	.word	0x2000035c
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	200001e0 	.word	0x200001e0
 8000e90:	4002006c 	.word	0x4002006c
 8000e94:	40015824 	.word	0x40015824
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	20000228 	.word	0x20000228
 8000ea0:	40020080 	.word	0x40020080

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efa:	f000 f961 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <DMA1_Channel6_IRQHandler+0x10>)
 8000f0a:	f000 fbe6 	bl	80016da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001e0 	.word	0x200001e0

08000f18 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <DMA1_Channel7_IRQHandler+0x10>)
 8000f1e:	f000 fbdc 	bl	80016da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000228 	.word	0x20000228

08000f2c <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <SAI2_IRQHandler+0x14>)
 8000f32:	f003 fafd 	bl	8004530 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8000f36:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <SAI2_IRQHandler+0x18>)
 8000f38:	f003 fafa 	bl	8004530 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200000d8 	.word	0x200000d8
 8000f44:	2000015c 	.word	0x2000015c

08000f48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e00a      	b.n	8000f70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	4601      	mov	r1, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <_read+0x12>
  }

  return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e009      	b.n	8000fa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fab7 	bl	8000510 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf1      	blt.n	8000f94 <_write+0x12>
  }
  return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_close>:

int _close(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_isatty>:

int _isatty(int file)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800102c:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <_sbrk+0x5c>)
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <_sbrk+0x60>)
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <_sbrk+0x64>)
 8001042:	4a12      	ldr	r2, [pc, #72]	@ (800108c <_sbrk+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d207      	bcs.n	8001064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001054:	f005 f92e 	bl	80062b4 <__errno>
 8001058:	4603      	mov	r3, r0
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e009      	b.n	8001078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106a:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <_sbrk+0x64>)
 8001074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20018000 	.word	0x20018000
 8001084:	00000400 	.word	0x00000400
 8001088:	20000360 	.word	0x20000360
 800108c:	200004b8 	.word	0x200004b8

08001090 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b8:	f7ff ffea 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	@ (80010f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <LoopForever+0xe>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001100 <LoopForever+0x16>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f005 f8ed 	bl	80062c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e6:	f7ff fa53 	bl	8000590 <main>

080010ea <LoopForever>:

LoopForever:
    b LoopForever
 80010ea:	e7fe      	b.n	80010ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010f8:	08006820 	.word	0x08006820
  ldr r2, =_sbss
 80010fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001100:	200004b4 	.word	0x200004b4

08001104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_2_IRQHandler>
	...

08001108 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_Init+0x3c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <HAL_Init+0x3c>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111e:	2003      	movs	r0, #3
 8001120:	f000 f962 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001124:	2000      	movs	r0, #0
 8001126:	f000 f80f 	bl	8001148 <HAL_InitTick>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	e001      	b.n	800113a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001136:	f7ff fc91 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113a:	79fb      	ldrb	r3, [r7, #7]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_InitTick+0x6c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d023      	beq.n	80011a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_InitTick+0x70>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_InitTick+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f96d 	bl	8001452 <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10f      	bne.n	800119e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d809      	bhi.n	8001198 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f000 f937 	bl	80013fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001190:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_InitTick+0x74>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e007      	b.n	80011a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e004      	b.n	80011a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e001      	b.n	80011a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000364 	.word	0x20000364

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000364 	.word	0x20000364

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff ffee 	bl	80011e8 <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800121a:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffde 	bl	80011e8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	@ (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	@ (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	@ (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	@ (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	@ 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	@ 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f7ff ff8e 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff29 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff3e 	bl	8001290 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff8e 	bl	800133c <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5d 	bl	80012e8 <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff31 	bl	80012ac <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa2 	bl	80013a4 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e098      	b.n	80015b0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b4d      	ldr	r3, [pc, #308]	@ (80015bc <HAL_DMA_Init+0x150>)
 8001486:	429a      	cmp	r2, r3
 8001488:	d80f      	bhi.n	80014aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	4b4b      	ldr	r3, [pc, #300]	@ (80015c0 <HAL_DMA_Init+0x154>)
 8001492:	4413      	add	r3, r2
 8001494:	4a4b      	ldr	r2, [pc, #300]	@ (80015c4 <HAL_DMA_Init+0x158>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	009a      	lsls	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a48      	ldr	r2, [pc, #288]	@ (80015c8 <HAL_DMA_Init+0x15c>)
 80014a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80014a8:	e00e      	b.n	80014c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <HAL_DMA_Init+0x160>)
 80014b2:	4413      	add	r3, r2
 80014b4:	4a43      	ldr	r2, [pc, #268]	@ (80015c4 <HAL_DMA_Init+0x158>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	009a      	lsls	r2, r3, #2
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a42      	ldr	r2, [pc, #264]	@ (80015d0 <HAL_DMA_Init+0x164>)
 80014c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2202      	movs	r2, #2
 80014cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80014de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001522:	d039      	beq.n	8001598 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	4a27      	ldr	r2, [pc, #156]	@ (80015c8 <HAL_DMA_Init+0x15c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d11a      	bne.n	8001564 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800152e:	4b29      	ldr	r3, [pc, #164]	@ (80015d4 <HAL_DMA_Init+0x168>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	f003 031c 	and.w	r3, r3, #28
 800153a:	210f      	movs	r1, #15
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	4924      	ldr	r1, [pc, #144]	@ (80015d4 <HAL_DMA_Init+0x168>)
 8001544:	4013      	ands	r3, r2
 8001546:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001548:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <HAL_DMA_Init+0x168>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001554:	f003 031c 	and.w	r3, r3, #28
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	491d      	ldr	r1, [pc, #116]	@ (80015d4 <HAL_DMA_Init+0x168>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
 8001562:	e019      	b.n	8001598 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <HAL_DMA_Init+0x16c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156c:	f003 031c 	and.w	r3, r3, #28
 8001570:	210f      	movs	r1, #15
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	4917      	ldr	r1, [pc, #92]	@ (80015d8 <HAL_DMA_Init+0x16c>)
 800157a:	4013      	ands	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800157e:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <HAL_DMA_Init+0x16c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6859      	ldr	r1, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	f003 031c 	and.w	r3, r3, #28
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	4911      	ldr	r1, [pc, #68]	@ (80015d8 <HAL_DMA_Init+0x16c>)
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40020407 	.word	0x40020407
 80015c0:	bffdfff8 	.word	0xbffdfff8
 80015c4:	cccccccd 	.word	0xcccccccd
 80015c8:	40020000 	.word	0x40020000
 80015cc:	bffdfbf8 	.word	0xbffdfbf8
 80015d0:	40020400 	.word	0x40020400
 80015d4:	400200a8 	.word	0x400200a8
 80015d8:	400204a8 	.word	0x400204a8

080015dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d008      	beq.n	8001606 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2204      	movs	r2, #4
 80015f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e022      	b.n	800164c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 020e 	bic.w	r2, r2, #14
 8001614:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0201 	bic.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f003 021c 	and.w	r2, r3, #28
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d005      	beq.n	800167c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2204      	movs	r2, #4
 8001674:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	e029      	b.n	80016d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 020e 	bic.w	r2, r2, #14
 800168a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a0:	f003 021c 	and.w	r2, r3, #28
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	2101      	movs	r1, #1
 80016aa:	fa01 f202 	lsl.w	r2, r1, r2
 80016ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
    }
  }
  return status;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	f003 031c 	and.w	r3, r3, #28
 80016fa:	2204      	movs	r2, #4
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d026      	beq.n	8001754 <HAL_DMA_IRQHandler+0x7a>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d021      	beq.n	8001754 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	2b00      	cmp	r3, #0
 800171c:	d107      	bne.n	800172e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0204 	bic.w	r2, r2, #4
 800172c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f003 021c 	and.w	r2, r3, #28
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	2104      	movs	r1, #4
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	2b00      	cmp	r3, #0
 8001748:	d071      	beq.n	800182e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001752:	e06c      	b.n	800182e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001758:	f003 031c 	and.w	r3, r3, #28
 800175c:	2202      	movs	r2, #2
 800175e:	409a      	lsls	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d02e      	beq.n	80017c6 <HAL_DMA_IRQHandler+0xec>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d029      	beq.n	80017c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10b      	bne.n	8001798 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 020a 	bic.w	r2, r2, #10
 800178e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179c:	f003 021c 	and.w	r2, r3, #28
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	2102      	movs	r1, #2
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d038      	beq.n	800182e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017c4:	e033      	b.n	800182e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f003 031c 	and.w	r3, r3, #28
 80017ce:	2208      	movs	r2, #8
 80017d0:	409a      	lsls	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d02a      	beq.n	8001830 <HAL_DMA_IRQHandler+0x156>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d025      	beq.n	8001830 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 020e 	bic.w	r2, r2, #14
 80017f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f8:	f003 021c 	and.w	r2, r3, #28
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001822:	2b00      	cmp	r3, #0
 8001824:	d004      	beq.n	8001830 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800182e:	bf00      	nop
 8001830:	bf00      	nop
}
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001846:	e17f      	b.n	8001b48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2101      	movs	r1, #1
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8171 	beq.w	8001b42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b01      	cmp	r3, #1
 800186a:	d005      	beq.n	8001878 <HAL_GPIO_Init+0x40>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d130      	bne.n	80018da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ae:	2201      	movs	r2, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 0201 	and.w	r2, r3, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d118      	bne.n	8001918 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b03      	cmp	r3, #3
 8001922:	d017      	beq.n	8001954 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	6939      	ldr	r1, [r7, #16]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80ac 	beq.w	8001b42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001b68 <HAL_GPIO_Init+0x330>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001b68 <HAL_GPIO_Init+0x330>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b68 <HAL_GPIO_Init+0x330>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a02:	4a5a      	ldr	r2, [pc, #360]	@ (8001b6c <HAL_GPIO_Init+0x334>)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a2c:	d025      	beq.n	8001a7a <HAL_GPIO_Init+0x242>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4f      	ldr	r2, [pc, #316]	@ (8001b70 <HAL_GPIO_Init+0x338>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01f      	beq.n	8001a76 <HAL_GPIO_Init+0x23e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4e      	ldr	r2, [pc, #312]	@ (8001b74 <HAL_GPIO_Init+0x33c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x23a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4d      	ldr	r2, [pc, #308]	@ (8001b78 <HAL_GPIO_Init+0x340>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x236>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4c      	ldr	r2, [pc, #304]	@ (8001b7c <HAL_GPIO_Init+0x344>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x232>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4b      	ldr	r2, [pc, #300]	@ (8001b80 <HAL_GPIO_Init+0x348>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x22e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4a      	ldr	r2, [pc, #296]	@ (8001b84 <HAL_GPIO_Init+0x34c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x22a>
 8001a5e:	2306      	movs	r3, #6
 8001a60:	e00c      	b.n	8001a7c <HAL_GPIO_Init+0x244>
 8001a62:	2307      	movs	r3, #7
 8001a64:	e00a      	b.n	8001a7c <HAL_GPIO_Init+0x244>
 8001a66:	2305      	movs	r3, #5
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_Init+0x244>
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x244>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x244>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x244>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x244>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	f002 0203 	and.w	r2, r2, #3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a8c:	4937      	ldr	r1, [pc, #220]	@ (8001b6c <HAL_GPIO_Init+0x334>)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <HAL_GPIO_Init+0x350>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001abe:	4a32      	ldr	r2, [pc, #200]	@ (8001b88 <HAL_GPIO_Init+0x350>)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ac4:	4b30      	ldr	r3, [pc, #192]	@ (8001b88 <HAL_GPIO_Init+0x350>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae8:	4a27      	ldr	r2, [pc, #156]	@ (8001b88 <HAL_GPIO_Init+0x350>)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aee:	4b26      	ldr	r3, [pc, #152]	@ (8001b88 <HAL_GPIO_Init+0x350>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b12:	4a1d      	ldr	r2, [pc, #116]	@ (8001b88 <HAL_GPIO_Init+0x350>)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_GPIO_Init+0x350>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b3c:	4a12      	ldr	r2, [pc, #72]	@ (8001b88 <HAL_GPIO_Init+0x350>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f47f ae78 	bne.w	8001848 <HAL_GPIO_Init+0x10>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	48000400 	.word	0x48000400
 8001b74:	48000800 	.word	0x48000800
 8001b78:	48000c00 	.word	0x48000c00
 8001b7c:	48001000 	.word	0x48001000
 8001b80:	48001400 	.word	0x48001400
 8001b84:	48001800 	.word	0x48001800
 8001b88:	40010400 	.word	0x40010400

08001b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba8:	e002      	b.n	8001bb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e08d      	b.n	8001cea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe ff5e 	bl	8000aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2224      	movs	r2, #36	@ 0x24
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	e006      	b.n	8001c44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d108      	bne.n	8001c5e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	e007      	b.n	8001c6e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69d9      	ldr	r1, [r3, #28]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1a      	ldr	r2, [r3, #32]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d138      	bne.n	8001d7a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e032      	b.n	8001d7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2224      	movs	r2, #36	@ 0x24
 8001d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d44:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6819      	ldr	r1, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d139      	bne.n	8001e12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e033      	b.n	8001e14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2224      	movs	r2, #36	@ 0x24
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001dda:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40007000 	.word	0x40007000

08001e3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e4a:	d130      	bne.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e4c:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e58:	d038      	beq.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5a:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e62:	4a1e      	ldr	r2, [pc, #120]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2232      	movs	r2, #50	@ 0x32
 8001e70:	fb02 f303 	mul.w	r3, r2, r3
 8001e74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0c9b      	lsrs	r3, r3, #18
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e80:	e002      	b.n	8001e88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e88:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e94:	d102      	bne.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f2      	bne.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea8:	d110      	bne.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e00f      	b.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eba:	d007      	beq.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec4:	4a05      	ldr	r2, [pc, #20]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e3ca      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efa:	4b97      	ldr	r3, [pc, #604]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f04:	4b94      	ldr	r3, [pc, #592]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80e4 	beq.w	80020e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_RCC_OscConfig+0x4a>
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	f040 808b 	bne.w	8002040 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	f040 8087 	bne.w	8002040 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f32:	4b89      	ldr	r3, [pc, #548]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x62>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e3a2      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1a      	ldr	r2, [r3, #32]
 8001f4e:	4b82      	ldr	r3, [pc, #520]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <HAL_RCC_OscConfig+0x7c>
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f62:	e005      	b.n	8001f70 <HAL_RCC_OscConfig+0x88>
 8001f64:	4b7c      	ldr	r3, [pc, #496]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d223      	bcs.n	8001fbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fd55 	bl	8002a28 <RCC_SetFlashLatencyFromMSIRange>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e383      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f88:	4b73      	ldr	r3, [pc, #460]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a72      	ldr	r2, [pc, #456]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	f043 0308 	orr.w	r3, r3, #8
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b70      	ldr	r3, [pc, #448]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	496d      	ldr	r1, [pc, #436]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa6:	4b6c      	ldr	r3, [pc, #432]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	4968      	ldr	r1, [pc, #416]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
 8001fba:	e025      	b.n	8002008 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fbc:	4b66      	ldr	r3, [pc, #408]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a65      	ldr	r2, [pc, #404]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	f043 0308 	orr.w	r3, r3, #8
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4b63      	ldr	r3, [pc, #396]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4960      	ldr	r1, [pc, #384]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fda:	4b5f      	ldr	r3, [pc, #380]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	495b      	ldr	r1, [pc, #364]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fd15 	bl	8002a28 <RCC_SetFlashLatencyFromMSIRange>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e343      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002008:	f000 fc4a 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b52      	ldr	r3, [pc, #328]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	4950      	ldr	r1, [pc, #320]	@ (800215c <HAL_RCC_OscConfig+0x274>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
 8002024:	4a4e      	ldr	r2, [pc, #312]	@ (8002160 <HAL_RCC_OscConfig+0x278>)
 8002026:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002028:	4b4e      	ldr	r3, [pc, #312]	@ (8002164 <HAL_RCC_OscConfig+0x27c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f88b 	bl	8001148 <HAL_InitTick>
 8002032:	4603      	mov	r3, r0
 8002034:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d052      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	e327      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d032      	beq.n	80020ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002048:	4b43      	ldr	r3, [pc, #268]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a42      	ldr	r2, [pc, #264]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002054:	f7ff f8c8 	bl	80011e8 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800205c:	f7ff f8c4 	bl	80011e8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e310      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206e:	4b3a      	ldr	r3, [pc, #232]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207a:	4b37      	ldr	r3, [pc, #220]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a36      	ldr	r2, [pc, #216]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b34      	ldr	r3, [pc, #208]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4931      	ldr	r1, [pc, #196]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002098:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	492c      	ldr	r1, [pc, #176]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
 80020ac:	e01a      	b.n	80020e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a29      	ldr	r2, [pc, #164]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020ba:	f7ff f895 	bl	80011e8 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c2:	f7ff f891 	bl	80011e8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e2dd      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d4:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x1da>
 80020e0:	e000      	b.n	80020e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d074      	beq.n	80021da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d005      	beq.n	8002102 <HAL_RCC_OscConfig+0x21a>
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d10e      	bne.n	800211a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d10b      	bne.n	800211a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d064      	beq.n	80021d8 <HAL_RCC_OscConfig+0x2f0>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d160      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e2ba      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x24a>
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	e026      	b.n	8002180 <HAL_RCC_OscConfig+0x298>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800213a:	d115      	bne.n	8002168 <HAL_RCC_OscConfig+0x280>
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 8002142:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b03      	ldr	r3, [pc, #12]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a02      	ldr	r2, [pc, #8]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e014      	b.n	8002180 <HAL_RCC_OscConfig+0x298>
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	080067c8 	.word	0x080067c8
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004
 8002168:	4ba0      	ldr	r3, [pc, #640]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a9f      	ldr	r2, [pc, #636]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 800216e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b9d      	ldr	r3, [pc, #628]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a9c      	ldr	r2, [pc, #624]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 800217a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800217e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff f82e 	bl	80011e8 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002190:	f7ff f82a 	bl	80011e8 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b64      	cmp	r3, #100	@ 0x64
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e276      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a2:	4b92      	ldr	r3, [pc, #584]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x2a8>
 80021ae:	e014      	b.n	80021da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff f81a 	bl	80011e8 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7ff f816 	bl	80011e8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	@ 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e262      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ca:	4b88      	ldr	r3, [pc, #544]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2d0>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d060      	beq.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_OscConfig+0x310>
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d119      	bne.n	8002226 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d116      	bne.n	8002226 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f8:	4b7c      	ldr	r3, [pc, #496]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_OscConfig+0x328>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e23f      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4b76      	ldr	r3, [pc, #472]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	4973      	ldr	r1, [pc, #460]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002224:	e040      	b.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d023      	beq.n	8002276 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222e:	4b6f      	ldr	r3, [pc, #444]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a6e      	ldr	r2, [pc, #440]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7fe ffd5 	bl	80011e8 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002242:	f7fe ffd1 	bl	80011e8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e21d      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002254:	4b65      	ldr	r3, [pc, #404]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b62      	ldr	r3, [pc, #392]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	495f      	ldr	r1, [pc, #380]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
 8002274:	e018      	b.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b5d      	ldr	r3, [pc, #372]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a5c      	ldr	r2, [pc, #368]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 800227c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7fe ffb1 	bl	80011e8 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228a:	f7fe ffad 	bl	80011e8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e1f9      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800229c:	4b53      	ldr	r3, [pc, #332]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d03c      	beq.n	800232e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01c      	beq.n	80022f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022bc:	4b4b      	ldr	r3, [pc, #300]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c2:	4a4a      	ldr	r2, [pc, #296]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022cc:	f7fe ff8c 	bl	80011e8 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7fe ff88 	bl	80011e8 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1d4      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e6:	4b41      	ldr	r3, [pc, #260]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80022e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ef      	beq.n	80022d4 <HAL_RCC_OscConfig+0x3ec>
 80022f4:	e01b      	b.n	800232e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f6:	4b3d      	ldr	r3, [pc, #244]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80022f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fc:	4a3b      	ldr	r2, [pc, #236]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe ff6f 	bl	80011e8 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230e:	f7fe ff6b 	bl	80011e8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1b7      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002320:	4b32      	ldr	r3, [pc, #200]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ef      	bne.n	800230e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80a6 	beq.w	8002488 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002340:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10d      	bne.n	8002368 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b27      	ldr	r3, [pc, #156]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	4a26      	ldr	r2, [pc, #152]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002356:	6593      	str	r3, [r2, #88]	@ 0x58
 8002358:	4b24      	ldr	r3, [pc, #144]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002364:	2301      	movs	r3, #1
 8002366:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002368:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <HAL_RCC_OscConfig+0x508>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d118      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002374:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <HAL_RCC_OscConfig+0x508>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1d      	ldr	r2, [pc, #116]	@ (80023f0 <HAL_RCC_OscConfig+0x508>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800237e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002380:	f7fe ff32 	bl	80011e8 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002388:	f7fe ff2e 	bl	80011e8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e17a      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239a:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <HAL_RCC_OscConfig+0x508>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d108      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4d8>
 80023ae:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b4:	4a0d      	ldr	r2, [pc, #52]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023be:	e029      	b.n	8002414 <HAL_RCC_OscConfig+0x52c>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d115      	bne.n	80023f4 <HAL_RCC_OscConfig+0x50c>
 80023c8:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ce:	4a07      	ldr	r2, [pc, #28]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023d8:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023de:	4a03      	ldr	r2, [pc, #12]	@ (80023ec <HAL_RCC_OscConfig+0x504>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023e8:	e014      	b.n	8002414 <HAL_RCC_OscConfig+0x52c>
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
 80023f4:	4b9c      	ldr	r3, [pc, #624]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fa:	4a9b      	ldr	r2, [pc, #620]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002404:	4b98      	ldr	r3, [pc, #608]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240a:	4a97      	ldr	r2, [pc, #604]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d016      	beq.n	800244a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe fee4 	bl	80011e8 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f7fe fee0 	bl	80011e8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e12a      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	4b8b      	ldr	r3, [pc, #556]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ed      	beq.n	8002424 <HAL_RCC_OscConfig+0x53c>
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe fecd 	bl	80011e8 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fec9 	bl	80011e8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e113      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002468:	4b7f      	ldr	r3, [pc, #508]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ed      	bne.n	8002452 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002476:	7ffb      	ldrb	r3, [r7, #31]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d105      	bne.n	8002488 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247c:	4b7a      	ldr	r3, [pc, #488]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	4a79      	ldr	r2, [pc, #484]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 8002482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002486:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80fe 	beq.w	800268e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	2b02      	cmp	r3, #2
 8002498:	f040 80d0 	bne.w	800263c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800249c:	4b72      	ldr	r3, [pc, #456]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0203 	and.w	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d130      	bne.n	8002512 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	3b01      	subs	r3, #1
 80024bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d127      	bne.n	8002512 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d11f      	bne.n	8002512 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024dc:	2a07      	cmp	r2, #7
 80024de:	bf14      	ite	ne
 80024e0:	2201      	movne	r2, #1
 80024e2:	2200      	moveq	r2, #0
 80024e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d113      	bne.n	8002512 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	3b01      	subs	r3, #1
 800250c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d06e      	beq.n	80025f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d069      	beq.n	80025ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002518:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002524:	4b50      	ldr	r3, [pc, #320]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0ad      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002534:	4b4c      	ldr	r3, [pc, #304]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a4b      	ldr	r2, [pc, #300]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 800253a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800253e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002540:	f7fe fe52 	bl	80011e8 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fe4e 	bl	80011e8 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e09a      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255a:	4b43      	ldr	r3, [pc, #268]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002566:	4b40      	ldr	r3, [pc, #256]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	4b40      	ldr	r3, [pc, #256]	@ (800266c <HAL_RCC_OscConfig+0x784>)
 800256c:	4013      	ands	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002576:	3a01      	subs	r2, #1
 8002578:	0112      	lsls	r2, r2, #4
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002580:	0212      	lsls	r2, r2, #8
 8002582:	4311      	orrs	r1, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002588:	0852      	lsrs	r2, r2, #1
 800258a:	3a01      	subs	r2, #1
 800258c:	0552      	lsls	r2, r2, #21
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002594:	0852      	lsrs	r2, r2, #1
 8002596:	3a01      	subs	r2, #1
 8002598:	0652      	lsls	r2, r2, #25
 800259a:	4311      	orrs	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025a0:	0912      	lsrs	r2, r2, #4
 80025a2:	0452      	lsls	r2, r2, #17
 80025a4:	430a      	orrs	r2, r1
 80025a6:	4930      	ldr	r1, [pc, #192]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 80025b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025c4:	f7fe fe10 	bl	80011e8 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe fe0c 	bl	80011e8 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e058      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025de:	4b22      	ldr	r3, [pc, #136]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ea:	e050      	b.n	800268e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e04f      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d148      	bne.n	800268e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002606:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002608:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a16      	ldr	r2, [pc, #88]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 800260e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002612:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002614:	f7fe fde8 	bl	80011e8 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fde4 	bl	80011e8 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e030      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x734>
 800263a:	e028      	b.n	800268e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d023      	beq.n	800268a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a08      	ldr	r2, [pc, #32]	@ (8002668 <HAL_RCC_OscConfig+0x780>)
 8002648:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800264c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fdcb 	bl	80011e8 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002654:	e00c      	b.n	8002670 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe fdc7 	bl	80011e8 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d905      	bls.n	8002670 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e013      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
 8002668:	40021000 	.word	0x40021000
 800266c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_RCC_OscConfig+0x7b0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ec      	bne.n	8002656 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800267c:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_RCC_OscConfig+0x7b0>)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	4905      	ldr	r1, [pc, #20]	@ (8002698 <HAL_RCC_OscConfig+0x7b0>)
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_OscConfig+0x7b4>)
 8002684:	4013      	ands	r3, r2
 8002686:	60cb      	str	r3, [r1, #12]
 8002688:	e001      	b.n	800268e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	feeefffc 	.word	0xfeeefffc

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0e7      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b75      	ldr	r3, [pc, #468]	@ (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d910      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b72      	ldr	r3, [pc, #456]	@ (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4970      	ldr	r1, [pc, #448]	@ (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b6e      	ldr	r3, [pc, #440]	@ (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0cf      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d010      	beq.n	8002712 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4b66      	ldr	r3, [pc, #408]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d908      	bls.n	8002712 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b63      	ldr	r3, [pc, #396]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4960      	ldr	r1, [pc, #384]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d04c      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	4b5a      	ldr	r3, [pc, #360]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d121      	bne.n	8002776 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0a6      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273e:	4b54      	ldr	r3, [pc, #336]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d115      	bne.n	8002776 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e09a      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002756:	4b4e      	ldr	r3, [pc, #312]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e08e      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002766:	4b4a      	ldr	r3, [pc, #296]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e086      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002776:	4b46      	ldr	r3, [pc, #280]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f023 0203 	bic.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4943      	ldr	r1, [pc, #268]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002784:	4313      	orrs	r3, r2
 8002786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002788:	f7fe fd2e 	bl	80011e8 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002790:	f7fe fd2a 	bl	80011e8 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e06e      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 020c 	and.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1eb      	bne.n	8002790 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d010      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	4b31      	ldr	r3, [pc, #196]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d208      	bcs.n	80027e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	492b      	ldr	r1, [pc, #172]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e6:	4b29      	ldr	r3, [pc, #164]	@ (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d210      	bcs.n	8002816 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f4:	4b25      	ldr	r3, [pc, #148]	@ (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 0207 	bic.w	r2, r3, #7
 80027fc:	4923      	ldr	r1, [pc, #140]	@ (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002804:	4b21      	ldr	r3, [pc, #132]	@ (800288c <HAL_RCC_ClockConfig+0x1ec>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d001      	beq.n	8002816 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e036      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002822:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4918      	ldr	r1, [pc, #96]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002840:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4910      	ldr	r1, [pc, #64]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002854:	f000 f824 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	490b      	ldr	r1, [pc, #44]	@ (8002894 <HAL_RCC_ClockConfig+0x1f4>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
 8002870:	4a09      	ldr	r2, [pc, #36]	@ (8002898 <HAL_RCC_ClockConfig+0x1f8>)
 8002872:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002874:	4b09      	ldr	r3, [pc, #36]	@ (800289c <HAL_RCC_ClockConfig+0x1fc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fc65 	bl	8001148 <HAL_InitTick>
 800287e:	4603      	mov	r3, r0
 8002880:	72fb      	strb	r3, [r7, #11]

  return status;
 8002882:	7afb      	ldrb	r3, [r7, #11]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40022000 	.word	0x40022000
 8002890:	40021000 	.word	0x40021000
 8002894:	080067c8 	.word	0x080067c8
 8002898:	20000000 	.word	0x20000000
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	@ 0x24
 80028a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ae:	4b3e      	ldr	r3, [pc, #248]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b8:	4b3b      	ldr	r3, [pc, #236]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x34>
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d121      	bne.n	8002912 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d11e      	bne.n	8002912 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028d4:	4b34      	ldr	r3, [pc, #208]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028e0:	4b31      	ldr	r3, [pc, #196]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	e005      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028f0:	4b2d      	ldr	r3, [pc, #180]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028fc:	4a2b      	ldr	r2, [pc, #172]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002904:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10d      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d102      	bne.n	800291e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002918:	4b25      	ldr	r3, [pc, #148]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	e004      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d101      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002924:	4b23      	ldr	r3, [pc, #140]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002926:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d134      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800292e:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d003      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0xa6>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d003      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0xac>
 8002944:	e005      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002946:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002948:	617b      	str	r3, [r7, #20]
      break;
 800294a:	e005      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800294c:	4b19      	ldr	r3, [pc, #100]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800294e:	617b      	str	r3, [r7, #20]
      break;
 8002950:	e002      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	617b      	str	r3, [r7, #20]
      break;
 8002956:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	3301      	adds	r3, #1
 8002964:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	fb03 f202 	mul.w	r2, r3, r2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	0e5b      	lsrs	r3, r3, #25
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	3301      	adds	r3, #1
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002998:	69bb      	ldr	r3, [r7, #24]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	@ 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	080067e0 	.word	0x080067e0
 80029b0:	00f42400 	.word	0x00f42400
 80029b4:	007a1200 	.word	0x007a1200

080029b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <HAL_RCC_GetHCLKFreq+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000000 	.word	0x20000000

080029d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029d4:	f7ff fff0 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4904      	ldr	r1, [pc, #16]	@ (80029f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029e6:	5ccb      	ldrb	r3, [r1, r3]
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	080067d8 	.word	0x080067d8

080029fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a00:	f7ff ffda 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0adb      	lsrs	r3, r3, #11
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4904      	ldr	r1, [pc, #16]	@ (8002a24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	080067d8 	.word	0x080067d8

08002a28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a34:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a40:	f7ff f9ee 	bl	8001e20 <HAL_PWREx_GetVoltageRange>
 8002a44:	6178      	str	r0, [r7, #20]
 8002a46:	e014      	b.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a48:	4b25      	ldr	r3, [pc, #148]	@ (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4c:	4a24      	ldr	r2, [pc, #144]	@ (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a54:	4b22      	ldr	r3, [pc, #136]	@ (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a60:	f7ff f9de 	bl	8001e20 <HAL_PWREx_GetVoltageRange>
 8002a64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a70:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a78:	d10b      	bne.n	8002a92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b80      	cmp	r3, #128	@ 0x80
 8002a7e:	d919      	bls.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a84:	d902      	bls.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a86:	2302      	movs	r3, #2
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	e013      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	e010      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b80      	cmp	r3, #128	@ 0x80
 8002a96:	d902      	bls.n	8002a9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a98:	2303      	movs	r3, #3
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	e00a      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b80      	cmp	r3, #128	@ 0x80
 8002aa2:	d102      	bne.n	8002aaa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	e004      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b70      	cmp	r3, #112	@ 0x70
 8002aae:	d101      	bne.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 0207 	bic.w	r2, r3, #7
 8002abc:	4909      	ldr	r1, [pc, #36]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ac4:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40022000 	.word	0x40022000

08002ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002af0:	2300      	movs	r3, #0
 8002af2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002af4:	2300      	movs	r3, #0
 8002af6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d041      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b0c:	d02a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b12:	d824      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b18:	d008      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b1e:	d81e      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b28:	d010      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b2a:	e018      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b2c:	4b86      	ldr	r3, [pc, #536]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a85      	ldr	r2, [pc, #532]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b38:	e015      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f001 f829 	bl	8003b98 <RCCEx_PLLSAI1_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b4a:	e00c      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3320      	adds	r3, #32
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 f914 	bl	8003d80 <RCCEx_PLLSAI2_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b5c:	e003      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	74fb      	strb	r3, [r7, #19]
      break;
 8002b62:	e000      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b6c:	4b76      	ldr	r3, [pc, #472]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b7a:	4973      	ldr	r1, [pc, #460]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b82:	e001      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d041      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b9c:	d02a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ba2:	d824      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ba8:	d008      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002baa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002bae:	d81e      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb8:	d010      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bba:	e018      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bbc:	4b62      	ldr	r3, [pc, #392]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a61      	ldr	r2, [pc, #388]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bc8:	e015      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 ffe1 	bl	8003b98 <RCCEx_PLLSAI1_Config>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bda:	e00c      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3320      	adds	r3, #32
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 f8cc 	bl	8003d80 <RCCEx_PLLSAI2_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bec:	e003      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	74fb      	strb	r3, [r7, #19]
      break;
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf6:	7cfb      	ldrb	r3, [r7, #19]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bfc:	4b52      	ldr	r3, [pc, #328]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c0a:	494f      	ldr	r1, [pc, #316]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c12:	e001      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a0 	beq.w	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c2a:	4b47      	ldr	r3, [pc, #284]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00d      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c40:	4b41      	ldr	r3, [pc, #260]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c44:	4a40      	ldr	r2, [pc, #256]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a3a      	ldr	r2, [pc, #232]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c68:	f7fe fabe 	bl	80011e8 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c6e:	e009      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c70:	f7fe faba 	bl	80011e8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d902      	bls.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	74fb      	strb	r3, [r7, #19]
        break;
 8002c82:	e005      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c84:	4b31      	ldr	r3, [pc, #196]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ef      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d15c      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c96:	4b2c      	ldr	r3, [pc, #176]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01f      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d019      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cb4:	4b24      	ldr	r3, [pc, #144]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc0:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc6:	4a20      	ldr	r2, [pc, #128]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ce0:	4a19      	ldr	r2, [pc, #100]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe fa79 	bl	80011e8 <HAL_GetTick>
 8002cf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe fa75 	bl	80011e8 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d902      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d10:	e006      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d12:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ec      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d26:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d36:	4904      	ldr	r1, [pc, #16]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d3e:	e009      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	74bb      	strb	r3, [r7, #18]
 8002d44:	e006      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d54:	7c7b      	ldrb	r3, [r7, #17]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4b9e      	ldr	r3, [pc, #632]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	4a9d      	ldr	r2, [pc, #628]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d72:	4b98      	ldr	r3, [pc, #608]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d78:	f023 0203 	bic.w	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d80:	4994      	ldr	r1, [pc, #592]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d94:	4b8f      	ldr	r3, [pc, #572]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	f023 020c 	bic.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da2:	498c      	ldr	r1, [pc, #560]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db6:	4b87      	ldr	r3, [pc, #540]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	4983      	ldr	r1, [pc, #524]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	497b      	ldr	r1, [pc, #492]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dfa:	4b76      	ldr	r3, [pc, #472]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e08:	4972      	ldr	r1, [pc, #456]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e1c:	4b6d      	ldr	r3, [pc, #436]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2a:	496a      	ldr	r1, [pc, #424]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e3e:	4b65      	ldr	r3, [pc, #404]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4c:	4961      	ldr	r1, [pc, #388]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e60:	4b5c      	ldr	r3, [pc, #368]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e6e:	4959      	ldr	r1, [pc, #356]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e82:	4b54      	ldr	r3, [pc, #336]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e90:	4950      	ldr	r1, [pc, #320]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eaa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb2:	4948      	ldr	r1, [pc, #288]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ec6:	4b43      	ldr	r3, [pc, #268]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ecc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	493f      	ldr	r1, [pc, #252]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d028      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ee8:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ef6:	4937      	ldr	r1, [pc, #220]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f06:	d106      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f08:	4b32      	ldr	r3, [pc, #200]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a31      	ldr	r2, [pc, #196]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f12:	60d3      	str	r3, [r2, #12]
 8002f14:	e011      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	2101      	movs	r1, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fe36 	bl	8003b98 <RCCEx_PLLSAI1_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d028      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f46:	4b23      	ldr	r3, [pc, #140]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f54:	491f      	ldr	r1, [pc, #124]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f64:	d106      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f66:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f70:	60d3      	str	r3, [r2, #12]
 8002f72:	e011      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2101      	movs	r1, #1
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fe07 	bl	8003b98 <RCCEx_PLLSAI1_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d02b      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002faa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb2:	4908      	ldr	r1, [pc, #32]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc2:	d109      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a02      	ldr	r2, [pc, #8]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fce:	60d3      	str	r3, [r2, #12]
 8002fd0:	e014      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fdd5 	bl	8003b98 <RCCEx_PLLSAI1_Config>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d02f      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003008:	4b2b      	ldr	r3, [pc, #172]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003016:	4928      	ldr	r1, [pc, #160]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003026:	d10d      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	2102      	movs	r1, #2
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fdb2 	bl	8003b98 <RCCEx_PLLSAI1_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d014      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	74bb      	strb	r3, [r7, #18]
 8003042:	e011      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800304c:	d10c      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3320      	adds	r3, #32
 8003052:	2102      	movs	r1, #2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fe93 	bl	8003d80 <RCCEx_PLLSAI2_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003074:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003082:	490d      	ldr	r1, [pc, #52]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003096:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030a6:	4904      	ldr	r1, [pc, #16]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030ce:	d13e      	bne.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80030d0:	4bb2      	ldr	r3, [pc, #712]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030da:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e2:	d028      	beq.n	8003136 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ea:	f200 8542 	bhi.w	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f4:	d005      	beq.n	8003102 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030fc:	d00e      	beq.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80030fe:	f000 bd38 	b.w	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003102:	4ba6      	ldr	r3, [pc, #664]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b02      	cmp	r3, #2
 800310e:	f040 8532 	bne.w	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003116:	61fb      	str	r3, [r7, #28]
      break;
 8003118:	f000 bd2d 	b.w	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800311c:	4b9f      	ldr	r3, [pc, #636]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	f040 8527 	bne.w	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 800312c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003130:	61fb      	str	r3, [r7, #28]
      break;
 8003132:	f000 bd22 	b.w	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003136:	4b99      	ldr	r3, [pc, #612]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003142:	f040 851c 	bne.w	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003146:	4b96      	ldr	r3, [pc, #600]	@ (80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003148:	61fb      	str	r3, [r7, #28]
      break;
 800314a:	f000 bd18 	b.w	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800314e:	4b93      	ldr	r3, [pc, #588]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d036      	beq.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d840      	bhi.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d003      	beq.n	8003172 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d020      	beq.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003170:	e039      	b.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003172:	4b8a      	ldr	r3, [pc, #552]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d116      	bne.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800317e:	4b87      	ldr	r3, [pc, #540]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800318a:	4b84      	ldr	r3, [pc, #528]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	e005      	b.n	80031a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003196:	4b81      	ldr	r3, [pc, #516]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	4a80      	ldr	r2, [pc, #512]	@ (80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80031a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80031aa:	e01f      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
      break;
 80031b0:	e01c      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80031b2:	4b7a      	ldr	r3, [pc, #488]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031be:	d102      	bne.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80031c0:	4b79      	ldr	r3, [pc, #484]	@ (80033a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80031c2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80031c4:	e012      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
      break;
 80031ca:	e00f      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80031cc:	4b73      	ldr	r3, [pc, #460]	@ (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031d8:	d102      	bne.n	80031e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80031da:	4b74      	ldr	r3, [pc, #464]	@ (80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80031dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80031de:	e005      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61bb      	str	r3, [r7, #24]
      break;
 80031e4:	e002      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
      break;
 80031ea:	bf00      	nop
    }

    switch(PeriphClk)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031f2:	f000 80dd 	beq.w	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031fc:	f200 84c1 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003206:	f000 80d3 	beq.w	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003210:	f200 84b7 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800321a:	f000 835f 	beq.w	80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003224:	f200 84ad 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800322e:	f000 847e 	beq.w	8003b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003238:	f200 84a3 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003242:	f000 82cd 	beq.w	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800324c:	f200 8499 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003256:	f000 80ab 	beq.w	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003260:	f200 848f 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326a:	f000 8090 	beq.w	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003274:	f200 8485 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327e:	d07f      	beq.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003286:	f200 847c 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003290:	f000 8403 	beq.w	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329a:	f200 8472 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a4:	f000 83af 	beq.w	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ae:	f200 8468 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b8:	f000 8379 	beq.w	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c2:	f200 845e 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b80      	cmp	r3, #128	@ 0x80
 80032ca:	f000 8344 	beq.w	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b80      	cmp	r3, #128	@ 0x80
 80032d2:	f200 8456 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d84b      	bhi.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 844f 	beq.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	2b1f      	cmp	r3, #31
 80032ea:	f200 844a 	bhi.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80032ee:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	080034dd 	.word	0x080034dd
 80032f8:	0800354b 	.word	0x0800354b
 80032fc:	08003b83 	.word	0x08003b83
 8003300:	080035df 	.word	0x080035df
 8003304:	08003b83 	.word	0x08003b83
 8003308:	08003b83 	.word	0x08003b83
 800330c:	08003b83 	.word	0x08003b83
 8003310:	08003665 	.word	0x08003665
 8003314:	08003b83 	.word	0x08003b83
 8003318:	08003b83 	.word	0x08003b83
 800331c:	08003b83 	.word	0x08003b83
 8003320:	08003b83 	.word	0x08003b83
 8003324:	08003b83 	.word	0x08003b83
 8003328:	08003b83 	.word	0x08003b83
 800332c:	08003b83 	.word	0x08003b83
 8003330:	080036dd 	.word	0x080036dd
 8003334:	08003b83 	.word	0x08003b83
 8003338:	08003b83 	.word	0x08003b83
 800333c:	08003b83 	.word	0x08003b83
 8003340:	08003b83 	.word	0x08003b83
 8003344:	08003b83 	.word	0x08003b83
 8003348:	08003b83 	.word	0x08003b83
 800334c:	08003b83 	.word	0x08003b83
 8003350:	08003b83 	.word	0x08003b83
 8003354:	08003b83 	.word	0x08003b83
 8003358:	08003b83 	.word	0x08003b83
 800335c:	08003b83 	.word	0x08003b83
 8003360:	08003b83 	.word	0x08003b83
 8003364:	08003b83 	.word	0x08003b83
 8003368:	08003b83 	.word	0x08003b83
 800336c:	08003b83 	.word	0x08003b83
 8003370:	0800375f 	.word	0x0800375f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b40      	cmp	r3, #64	@ 0x40
 8003378:	f000 82c1 	beq.w	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800337c:	f000 bc01 	b.w	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003380:	69b9      	ldr	r1, [r7, #24]
 8003382:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003386:	f000 fdd9 	bl	8003f3c <RCCEx_GetSAIxPeriphCLKFreq>
 800338a:	61f8      	str	r0, [r7, #28]
      break;
 800338c:	e3fa      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800338e:	69b9      	ldr	r1, [r7, #24]
 8003390:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003394:	f000 fdd2 	bl	8003f3c <RCCEx_GetSAIxPeriphCLKFreq>
 8003398:	61f8      	str	r0, [r7, #28]
      break;
 800339a:	e3f3      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800339c:	40021000 	.word	0x40021000
 80033a0:	0003d090 	.word	0x0003d090
 80033a4:	080067e0 	.word	0x080067e0
 80033a8:	00f42400 	.word	0x00f42400
 80033ac:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80033b0:	4ba9      	ldr	r3, [pc, #676]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80033c2:	d00c      	beq.n	80033de <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80033ca:	d87f      	bhi.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033d2:	d04e      	beq.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033da:	d01d      	beq.n	8003418 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80033dc:	e076      	b.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80033de:	4b9e      	ldr	r3, [pc, #632]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d172      	bne.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80033ea:	4b9b      	ldr	r3, [pc, #620]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80033f6:	4b98      	ldr	r3, [pc, #608]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	e005      	b.n	800340e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003402:	4b95      	ldr	r3, [pc, #596]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	4a93      	ldr	r2, [pc, #588]	@ (800365c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003414:	61fb      	str	r3, [r7, #28]
          break;
 8003416:	e05b      	b.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003418:	4b8f      	ldr	r3, [pc, #572]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003420:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003424:	d156      	bne.n	80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003426:	4b8c      	ldr	r3, [pc, #560]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800342e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003432:	d14f      	bne.n	80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003434:	4b88      	ldr	r3, [pc, #544]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800343e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	fb03 f202 	mul.w	r2, r3, r2
 8003448:	4b83      	ldr	r3, [pc, #524]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	3301      	adds	r3, #1
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800345a:	4b7f      	ldr	r3, [pc, #508]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	0d5b      	lsrs	r3, r3, #21
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	3301      	adds	r3, #1
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	61fb      	str	r3, [r7, #28]
          break;
 8003470:	e030      	b.n	80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003472:	4b79      	ldr	r3, [pc, #484]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800347a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800347e:	d12b      	bne.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003480:	4b75      	ldr	r3, [pc, #468]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800348c:	d124      	bne.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800348e:	4b72      	ldr	r3, [pc, #456]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003498:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	fb03 f202 	mul.w	r2, r3, r2
 80034a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	3301      	adds	r3, #1
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80034b4:	4b68      	ldr	r3, [pc, #416]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	0d5b      	lsrs	r3, r3, #21
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	3301      	adds	r3, #1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	61fb      	str	r3, [r7, #28]
          break;
 80034ca:	e005      	b.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80034cc:	bf00      	nop
 80034ce:	e359      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80034d0:	bf00      	nop
 80034d2:	e357      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80034d4:	bf00      	nop
 80034d6:	e355      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80034d8:	bf00      	nop
        break;
 80034da:	e353      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80034dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d827      	bhi.n	800353e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80034ee:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003505 	.word	0x08003505
 80034f8:	0800350d 	.word	0x0800350d
 80034fc:	08003515 	.word	0x08003515
 8003500:	08003529 	.word	0x08003529
          frequency = HAL_RCC_GetPCLK2Freq();
 8003504:	f7ff fa7a 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 8003508:	61f8      	str	r0, [r7, #28]
          break;
 800350a:	e01d      	b.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 800350c:	f7ff f9c8 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003510:	61f8      	str	r0, [r7, #28]
          break;
 8003512:	e019      	b.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003514:	4b50      	ldr	r3, [pc, #320]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003520:	d10f      	bne.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8003522:	4b4f      	ldr	r3, [pc, #316]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003524:	61fb      	str	r3, [r7, #28]
          break;
 8003526:	e00c      	b.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003528:	4b4b      	ldr	r3, [pc, #300]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b02      	cmp	r3, #2
 8003534:	d107      	bne.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8003536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800353a:	61fb      	str	r3, [r7, #28]
          break;
 800353c:	e003      	b.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800353e:	bf00      	nop
 8003540:	e320      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003542:	bf00      	nop
 8003544:	e31e      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003546:	bf00      	nop
        break;
 8003548:	e31c      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800354a:	4b43      	ldr	r3, [pc, #268]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b0c      	cmp	r3, #12
 800355a:	d83a      	bhi.n	80035d2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800355c:	a201      	add	r2, pc, #4	@ (adr r2, 8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003599 	.word	0x08003599
 8003568:	080035d3 	.word	0x080035d3
 800356c:	080035d3 	.word	0x080035d3
 8003570:	080035d3 	.word	0x080035d3
 8003574:	080035a1 	.word	0x080035a1
 8003578:	080035d3 	.word	0x080035d3
 800357c:	080035d3 	.word	0x080035d3
 8003580:	080035d3 	.word	0x080035d3
 8003584:	080035a9 	.word	0x080035a9
 8003588:	080035d3 	.word	0x080035d3
 800358c:	080035d3 	.word	0x080035d3
 8003590:	080035d3 	.word	0x080035d3
 8003594:	080035bd 	.word	0x080035bd
          frequency = HAL_RCC_GetPCLK1Freq();
 8003598:	f7ff fa1a 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 800359c:	61f8      	str	r0, [r7, #28]
          break;
 800359e:	e01d      	b.n	80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80035a0:	f7ff f97e 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80035a4:	61f8      	str	r0, [r7, #28]
          break;
 80035a6:	e019      	b.n	80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80035a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b4:	d10f      	bne.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80035b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80035b8:	61fb      	str	r3, [r7, #28]
          break;
 80035ba:	e00c      	b.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80035bc:	4b26      	ldr	r3, [pc, #152]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d107      	bne.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80035ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ce:	61fb      	str	r3, [r7, #28]
          break;
 80035d0:	e003      	b.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80035d2:	bf00      	nop
 80035d4:	e2d6      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80035d6:	bf00      	nop
 80035d8:	e2d4      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80035da:	bf00      	nop
        break;
 80035dc:	e2d2      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80035de:	4b1e      	ldr	r3, [pc, #120]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b30      	cmp	r3, #48	@ 0x30
 80035ee:	d021      	beq.n	8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b30      	cmp	r3, #48	@ 0x30
 80035f4:	d829      	bhi.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d011      	beq.n	8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d823      	bhi.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b10      	cmp	r3, #16
 800360c:	d004      	beq.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800360e:	e01c      	b.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003610:	f7ff f9de 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8003614:	61f8      	str	r0, [r7, #28]
          break;
 8003616:	e01d      	b.n	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003618:	f7ff f942 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800361c:	61f8      	str	r0, [r7, #28]
          break;
 800361e:	e019      	b.n	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003620:	4b0d      	ldr	r3, [pc, #52]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362c:	d10f      	bne.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800362e:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003630:	61fb      	str	r3, [r7, #28]
          break;
 8003632:	e00c      	b.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003634:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d107      	bne.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8003642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003646:	61fb      	str	r3, [r7, #28]
          break;
 8003648:	e003      	b.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800364a:	bf00      	nop
 800364c:	e29a      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800364e:	bf00      	nop
 8003650:	e298      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003652:	bf00      	nop
        break;
 8003654:	e296      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000
 800365c:	080067e0 	.word	0x080067e0
 8003660:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003664:	4b9b      	ldr	r3, [pc, #620]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2bc0      	cmp	r3, #192	@ 0xc0
 8003674:	d021      	beq.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2bc0      	cmp	r3, #192	@ 0xc0
 800367a:	d829      	bhi.n	80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b80      	cmp	r3, #128	@ 0x80
 8003680:	d011      	beq.n	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b80      	cmp	r3, #128	@ 0x80
 8003686:	d823      	bhi.n	80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b40      	cmp	r3, #64	@ 0x40
 8003692:	d004      	beq.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003694:	e01c      	b.n	80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003696:	f7ff f99b 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 800369a:	61f8      	str	r0, [r7, #28]
          break;
 800369c:	e01d      	b.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800369e:	f7ff f8ff 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80036a2:	61f8      	str	r0, [r7, #28]
          break;
 80036a4:	e019      	b.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80036a6:	4b8b      	ldr	r3, [pc, #556]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b2:	d10f      	bne.n	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80036b4:	4b88      	ldr	r3, [pc, #544]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80036b6:	61fb      	str	r3, [r7, #28]
          break;
 80036b8:	e00c      	b.n	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80036ba:	4b86      	ldr	r3, [pc, #536]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d107      	bne.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80036c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036cc:	61fb      	str	r3, [r7, #28]
          break;
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80036d0:	bf00      	nop
 80036d2:	e257      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80036d4:	bf00      	nop
 80036d6:	e255      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80036d8:	bf00      	nop
        break;
 80036da:	e253      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80036dc:	4b7d      	ldr	r3, [pc, #500]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ee:	d025      	beq.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036f6:	d82c      	bhi.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036fe:	d013      	beq.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003706:	d824      	bhi.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003714:	d004      	beq.n	8003720 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003716:	e01c      	b.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003718:	f7ff f95a 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 800371c:	61f8      	str	r0, [r7, #28]
          break;
 800371e:	e01d      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003720:	f7ff f8be 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003724:	61f8      	str	r0, [r7, #28]
          break;
 8003726:	e019      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003728:	4b6a      	ldr	r3, [pc, #424]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003734:	d10f      	bne.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003736:	4b68      	ldr	r3, [pc, #416]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003738:	61fb      	str	r3, [r7, #28]
          break;
 800373a:	e00c      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800373c:	4b65      	ldr	r3, [pc, #404]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d107      	bne.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800374a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800374e:	61fb      	str	r3, [r7, #28]
          break;
 8003750:	e003      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003752:	bf00      	nop
 8003754:	e216      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003756:	bf00      	nop
 8003758:	e214      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800375a:	bf00      	nop
        break;
 800375c:	e212      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800375e:	4b5d      	ldr	r3, [pc, #372]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003764:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003770:	d025      	beq.n	80037be <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003778:	d82c      	bhi.n	80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003780:	d013      	beq.n	80037aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003788:	d824      	bhi.n	80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003796:	d004      	beq.n	80037a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003798:	e01c      	b.n	80037d4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800379a:	f7ff f919 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 800379e:	61f8      	str	r0, [r7, #28]
          break;
 80037a0:	e01d      	b.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80037a2:	f7ff f87d 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80037a6:	61f8      	str	r0, [r7, #28]
          break;
 80037a8:	e019      	b.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80037aa:	4b4a      	ldr	r3, [pc, #296]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b6:	d10f      	bne.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80037b8:	4b47      	ldr	r3, [pc, #284]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80037ba:	61fb      	str	r3, [r7, #28]
          break;
 80037bc:	e00c      	b.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80037be:	4b45      	ldr	r3, [pc, #276]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d107      	bne.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80037cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037d0:	61fb      	str	r3, [r7, #28]
          break;
 80037d2:	e003      	b.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80037d4:	bf00      	nop
 80037d6:	e1d5      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037d8:	bf00      	nop
 80037da:	e1d3      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037dc:	bf00      	nop
        break;
 80037de:	e1d1      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80037e0:	4b3c      	ldr	r3, [pc, #240]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037f2:	d00c      	beq.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037fa:	d864      	bhi.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003802:	d008      	beq.n	8003816 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800380a:	d030      	beq.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800380c:	e05b      	b.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800380e:	f7ff f847 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003812:	61f8      	str	r0, [r7, #28]
          break;
 8003814:	e05c      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003816:	4b2f      	ldr	r3, [pc, #188]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800381e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003822:	d152      	bne.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003824:	4b2b      	ldr	r3, [pc, #172]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d04c      	beq.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003830:	4b28      	ldr	r3, [pc, #160]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800383a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	fb03 f202 	mul.w	r2, r3, r2
 8003844:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	3301      	adds	r3, #1
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003856:	4b1f      	ldr	r3, [pc, #124]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	0e5b      	lsrs	r3, r3, #25
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	3301      	adds	r3, #1
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	61fb      	str	r3, [r7, #28]
          break;
 800386c:	e02d      	b.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800386e:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800387a:	d128      	bne.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800387c:	4b15      	ldr	r3, [pc, #84]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d022      	beq.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003888:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003892:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	fb03 f202 	mul.w	r2, r3, r2
 800389c:	4b0d      	ldr	r3, [pc, #52]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	3301      	adds	r3, #1
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80038ae:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	0e5b      	lsrs	r3, r3, #25
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	3301      	adds	r3, #1
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	61fb      	str	r3, [r7, #28]
          break;
 80038c4:	e003      	b.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80038c6:	bf00      	nop
 80038c8:	e15c      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038ca:	bf00      	nop
 80038cc:	e15a      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038ce:	bf00      	nop
        break;
 80038d0:	e158      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80038dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038e6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80038ee:	f7ff f885 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 80038f2:	61f8      	str	r0, [r7, #28]
        break;
 80038f4:	e146      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80038f6:	f7fe ffd3 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80038fa:	61f8      	str	r0, [r7, #28]
        break;
 80038fc:	e142      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80038fe:	4b95      	ldr	r3, [pc, #596]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003910:	d013      	beq.n	800393a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003918:	d819      	bhi.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003926:	d004      	beq.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8003928:	e011      	b.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800392a:	f7ff f851 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 800392e:	61f8      	str	r0, [r7, #28]
          break;
 8003930:	e010      	b.n	8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8003932:	f7fe ffb5 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003936:	61f8      	str	r0, [r7, #28]
          break;
 8003938:	e00c      	b.n	8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800393a:	4b86      	ldr	r3, [pc, #536]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003946:	d104      	bne.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8003948:	4b83      	ldr	r3, [pc, #524]	@ (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800394a:	61fb      	str	r3, [r7, #28]
          break;
 800394c:	e001      	b.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800394e:	bf00      	nop
 8003950:	e118      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003952:	bf00      	nop
        break;
 8003954:	e116      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003956:	4b7f      	ldr	r3, [pc, #508]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003968:	d013      	beq.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003970:	d819      	bhi.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800397e:	d004      	beq.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003980:	e011      	b.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003982:	f7ff f825 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8003986:	61f8      	str	r0, [r7, #28]
          break;
 8003988:	e010      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800398a:	f7fe ff89 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800398e:	61f8      	str	r0, [r7, #28]
          break;
 8003990:	e00c      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003992:	4b70      	ldr	r3, [pc, #448]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399e:	d104      	bne.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80039a0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80039a2:	61fb      	str	r3, [r7, #28]
          break;
 80039a4:	e001      	b.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80039a6:	bf00      	nop
 80039a8:	e0ec      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80039aa:	bf00      	nop
        break;
 80039ac:	e0ea      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80039ae:	4b69      	ldr	r3, [pc, #420]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039c0:	d013      	beq.n	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039c8:	d819      	bhi.n	80039fe <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d6:	d004      	beq.n	80039e2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80039d8:	e011      	b.n	80039fe <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80039da:	f7fe fff9 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 80039de:	61f8      	str	r0, [r7, #28]
          break;
 80039e0:	e010      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80039e2:	f7fe ff5d 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80039e6:	61f8      	str	r0, [r7, #28]
          break;
 80039e8:	e00c      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f6:	d104      	bne.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80039f8:	4b57      	ldr	r3, [pc, #348]	@ (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80039fa:	61fb      	str	r3, [r7, #28]
          break;
 80039fc:	e001      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80039fe:	bf00      	nop
 8003a00:	e0c0      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a02:	bf00      	nop
        break;
 8003a04:	e0be      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003a06:	4b53      	ldr	r3, [pc, #332]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a18:	d02c      	beq.n	8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a20:	d833      	bhi.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a28:	d01a      	beq.n	8003a60 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a30:	d82b      	bhi.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a3e:	d004      	beq.n	8003a4a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003a40:	e023      	b.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a42:	f7fe ffc5 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8003a46:	61f8      	str	r0, [r7, #28]
          break;
 8003a48:	e026      	b.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003a4a:	4b42      	ldr	r3, [pc, #264]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d11a      	bne.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8003a58:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003a5c:	61fb      	str	r3, [r7, #28]
          break;
 8003a5e:	e016      	b.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a60:	4b3c      	ldr	r3, [pc, #240]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6c:	d111      	bne.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003a70:	61fb      	str	r3, [r7, #28]
          break;
 8003a72:	e00e      	b.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003a74:	4b37      	ldr	r3, [pc, #220]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d109      	bne.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8003a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a86:	61fb      	str	r3, [r7, #28]
          break;
 8003a88:	e005      	b.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003a8a:	bf00      	nop
 8003a8c:	e07a      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a8e:	bf00      	nop
 8003a90:	e078      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a92:	bf00      	nop
 8003a94:	e076      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a96:	bf00      	nop
        break;
 8003a98:	e074      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003aac:	d02c      	beq.n	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ab4:	d833      	bhi.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003abc:	d01a      	beq.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ac4:	d82b      	bhi.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ad2:	d004      	beq.n	8003ade <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003ad4:	e023      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ad6:	f7fe ff7b 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8003ada:	61f8      	str	r0, [r7, #28]
          break;
 8003adc:	e026      	b.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003ade:	4b1d      	ldr	r3, [pc, #116]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d11a      	bne.n	8003b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003aec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003af0:	61fb      	str	r3, [r7, #28]
          break;
 8003af2:	e016      	b.n	8003b22 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003af4:	4b17      	ldr	r3, [pc, #92]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b00:	d111      	bne.n	8003b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8003b02:	4b15      	ldr	r3, [pc, #84]	@ (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003b04:	61fb      	str	r3, [r7, #28]
          break;
 8003b06:	e00e      	b.n	8003b26 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b08:	4b12      	ldr	r3, [pc, #72]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d109      	bne.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8003b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b1a:	61fb      	str	r3, [r7, #28]
          break;
 8003b1c:	e005      	b.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003b1e:	bf00      	nop
 8003b20:	e030      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b22:	bf00      	nop
 8003b24:	e02e      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b26:	bf00      	nop
 8003b28:	e02c      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b2a:	bf00      	nop
        break;
 8003b2c:	e02a      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003b2e:	4b09      	ldr	r3, [pc, #36]	@ (8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b46:	d009      	beq.n	8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8003b48:	e012      	b.n	8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b4a:	f7fe ff41 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8003b4e:	61f8      	str	r0, [r7, #28]
          break;
 8003b50:	e00e      	b.n	8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b68:	d101      	bne.n	8003b6e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003b6c:	61fb      	str	r3, [r7, #28]
          break;
 8003b6e:	bf00      	nop
        break;
 8003b70:	e008      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e006      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003b76:	bf00      	nop
 8003b78:	e004      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e002      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003b82:	bf00      	nop
    }
  }

  return(frequency);
 8003b84:	69fb      	ldr	r3, [r7, #28]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	00f42400 	.word	0x00f42400

08003b98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ba6:	4b75      	ldr	r3, [pc, #468]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bb2:	4b72      	ldr	r3, [pc, #456]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0203 	and.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10d      	bne.n	8003bde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
       ||
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bca:	4b6c      	ldr	r3, [pc, #432]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d047      	beq.n	8003c6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
 8003be2:	e044      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d018      	beq.n	8003c1e <RCCEx_PLLSAI1_Config+0x86>
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d825      	bhi.n	8003c3c <RCCEx_PLLSAI1_Config+0xa4>
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d002      	beq.n	8003bfa <RCCEx_PLLSAI1_Config+0x62>
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d009      	beq.n	8003c0c <RCCEx_PLLSAI1_Config+0x74>
 8003bf8:	e020      	b.n	8003c3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bfa:	4b60      	ldr	r3, [pc, #384]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d11d      	bne.n	8003c42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0a:	e01a      	b.n	8003c42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d116      	bne.n	8003c46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1c:	e013      	b.n	8003c46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c1e:	4b57      	ldr	r3, [pc, #348]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c2a:	4b54      	ldr	r3, [pc, #336]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c3a:	e006      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c40:	e004      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c42:	bf00      	nop
 8003c44:	e002      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10d      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c52:	4b4a      	ldr	r3, [pc, #296]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6819      	ldr	r1, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	430b      	orrs	r3, r1
 8003c68:	4944      	ldr	r1, [pc, #272]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d17d      	bne.n	8003d70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c74:	4b41      	ldr	r3, [pc, #260]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a40      	ldr	r2, [pc, #256]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c80:	f7fd fab2 	bl	80011e8 <HAL_GetTick>
 8003c84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c86:	e009      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c88:	f7fd faae 	bl	80011e8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d902      	bls.n	8003c9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	73fb      	strb	r3, [r7, #15]
        break;
 8003c9a:	e005      	b.n	8003ca8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c9c:	4b37      	ldr	r3, [pc, #220]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1ef      	bne.n	8003c88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d160      	bne.n	8003d70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d111      	bne.n	8003cd8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb4:	4b31      	ldr	r3, [pc, #196]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	0211      	lsls	r1, r2, #8
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68d2      	ldr	r2, [r2, #12]
 8003cca:	0912      	lsrs	r2, r2, #4
 8003ccc:	0452      	lsls	r2, r2, #17
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	492a      	ldr	r1, [pc, #168]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	610b      	str	r3, [r1, #16]
 8003cd6:	e027      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d112      	bne.n	8003d04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cde:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003ce6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6892      	ldr	r2, [r2, #8]
 8003cee:	0211      	lsls	r1, r2, #8
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6912      	ldr	r2, [r2, #16]
 8003cf4:	0852      	lsrs	r2, r2, #1
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	0552      	lsls	r2, r2, #21
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	491f      	ldr	r1, [pc, #124]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	610b      	str	r3, [r1, #16]
 8003d02:	e011      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d04:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6892      	ldr	r2, [r2, #8]
 8003d14:	0211      	lsls	r1, r2, #8
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6952      	ldr	r2, [r2, #20]
 8003d1a:	0852      	lsrs	r2, r2, #1
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	0652      	lsls	r2, r2, #25
 8003d20:	430a      	orrs	r2, r1
 8003d22:	4916      	ldr	r1, [pc, #88]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d28:	4b14      	ldr	r3, [pc, #80]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a13      	ldr	r2, [pc, #76]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fd fa58 	bl	80011e8 <HAL_GetTick>
 8003d38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d3a:	e009      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d3c:	f7fd fa54 	bl	80011e8 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d902      	bls.n	8003d50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d4e:	e005      	b.n	8003d5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d50:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ef      	beq.n	8003d3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d62:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	4904      	ldr	r1, [pc, #16]	@ (8003d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000

08003d80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d018      	beq.n	8003dcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d9a:	4b67      	ldr	r3, [pc, #412]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0203 	and.w	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d10d      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
       ||
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003db2:	4b61      	ldr	r3, [pc, #388]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
       ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d047      	beq.n	8003e56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
 8003dca:	e044      	b.n	8003e56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d018      	beq.n	8003e06 <RCCEx_PLLSAI2_Config+0x86>
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d825      	bhi.n	8003e24 <RCCEx_PLLSAI2_Config+0xa4>
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d002      	beq.n	8003de2 <RCCEx_PLLSAI2_Config+0x62>
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d009      	beq.n	8003df4 <RCCEx_PLLSAI2_Config+0x74>
 8003de0:	e020      	b.n	8003e24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003de2:	4b55      	ldr	r3, [pc, #340]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d11d      	bne.n	8003e2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df2:	e01a      	b.n	8003e2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003df4:	4b50      	ldr	r3, [pc, #320]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d116      	bne.n	8003e2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e04:	e013      	b.n	8003e2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e06:	4b4c      	ldr	r3, [pc, #304]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e12:	4b49      	ldr	r3, [pc, #292]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e22:	e006      	b.n	8003e32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      break;
 8003e28:	e004      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10d      	bne.n	8003e56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6819      	ldr	r1, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	4939      	ldr	r1, [pc, #228]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d167      	bne.n	8003f2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e5c:	4b36      	ldr	r3, [pc, #216]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a35      	ldr	r2, [pc, #212]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e68:	f7fd f9be 	bl	80011e8 <HAL_GetTick>
 8003e6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e6e:	e009      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e70:	f7fd f9ba 	bl	80011e8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d902      	bls.n	8003e84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	73fb      	strb	r3, [r7, #15]
        break;
 8003e82:	e005      	b.n	8003e90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e84:	4b2c      	ldr	r3, [pc, #176]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ef      	bne.n	8003e70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d14a      	bne.n	8003f2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d111      	bne.n	8003ec0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e9c:	4b26      	ldr	r3, [pc, #152]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6892      	ldr	r2, [r2, #8]
 8003eac:	0211      	lsls	r1, r2, #8
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68d2      	ldr	r2, [r2, #12]
 8003eb2:	0912      	lsrs	r2, r2, #4
 8003eb4:	0452      	lsls	r2, r2, #17
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	491f      	ldr	r1, [pc, #124]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	614b      	str	r3, [r1, #20]
 8003ebe:	e011      	b.n	8003ee4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ec8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6892      	ldr	r2, [r2, #8]
 8003ed0:	0211      	lsls	r1, r2, #8
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6912      	ldr	r2, [r2, #16]
 8003ed6:	0852      	lsrs	r2, r2, #1
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	0652      	lsls	r2, r2, #25
 8003edc:	430a      	orrs	r2, r1
 8003ede:	4916      	ldr	r1, [pc, #88]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ee4:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a13      	ldr	r2, [pc, #76]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fd f97a 	bl	80011e8 <HAL_GetTick>
 8003ef4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ef6:	e009      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ef8:	f7fd f976 	bl	80011e8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d902      	bls.n	8003f0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	73fb      	strb	r3, [r7, #15]
          break;
 8003f0a:	e005      	b.n	8003f18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ef      	beq.n	8003ef8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	4904      	ldr	r1, [pc, #16]	@ (8003f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000

08003f3c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	@ 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f58:	d10c      	bne.n	8003f74 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003f5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f60:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003f64:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f6c:	d112      	bne.n	8003f94 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004118 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	e00f      	b.n	8003f94 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7a:	d10b      	bne.n	8003f94 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003f7c:	4b65      	ldr	r3, [pc, #404]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f82:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8003f86:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f8e:	d101      	bne.n	8003f94 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8003f90:	4b61      	ldr	r3, [pc, #388]	@ (8004118 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8003f92:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 80b4 	bne.w	8004104 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fa6:	d003      	beq.n	8003fb0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fae:	d135      	bne.n	800401c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003fb0:	4b58      	ldr	r3, [pc, #352]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fbc:	f040 80a1 	bne.w	8004102 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8003fc0:	4b54      	ldr	r3, [pc, #336]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 809a 	beq.w	8004102 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003fce:	4b51      	ldr	r3, [pc, #324]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	3301      	adds	r3, #1
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003fe2:	4b4c      	ldr	r3, [pc, #304]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fec:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003ff4:	4b47      	ldr	r3, [pc, #284]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004000:	2311      	movs	r3, #17
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e001      	b.n	800400a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004006:	2307      	movs	r3, #7
 8004008:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	fb03 f202 	mul.w	r2, r3, r2
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800401a:	e072      	b.n	8004102 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d133      	bne.n	800408a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004022:	4b3c      	ldr	r3, [pc, #240]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800402a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800402e:	d169      	bne.n	8004104 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004030:	4b38      	ldr	r3, [pc, #224]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d063      	beq.n	8004104 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800403c:	4b35      	ldr	r3, [pc, #212]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	3301      	adds	r3, #1
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004050:	4b30      	ldr	r3, [pc, #192]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800405a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004062:	4b2c      	ldr	r3, [pc, #176]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800406e:	2311      	movs	r3, #17
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e001      	b.n	8004078 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004074:	2307      	movs	r3, #7
 8004076:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	fb03 f202 	mul.w	r2, r3, r2
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e03c      	b.n	8004104 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004090:	d003      	beq.n	800409a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004098:	d134      	bne.n	8004104 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800409a:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040a6:	d12d      	bne.n	8004104 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80040a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d027      	beq.n	8004104 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80040b4:	4b17      	ldr	r3, [pc, #92]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	3301      	adds	r3, #1
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80040c8:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	0a1b      	lsrs	r3, r3, #8
 80040ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040d2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80040da:	4b0e      	ldr	r3, [pc, #56]	@ (8004114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80040e6:	2311      	movs	r3, #17
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e001      	b.n	80040f0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80040ec:	2307      	movs	r3, #7
 80040ee:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	fb03 f202 	mul.w	r2, r3, r2
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	e000      	b.n	8004104 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004102:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004104:	69fb      	ldr	r3, [r7, #28]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	@ 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	001fff68 	.word	0x001fff68

0800411c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d904      	bls.n	800413a <HAL_SAI_InitProtocol+0x1e>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	3b03      	subs	r3, #3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d812      	bhi.n	800415e <HAL_SAI_InitProtocol+0x42>
 8004138:	e008      	b.n	800414c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 fba3 	bl	800488c <SAI_InitI2S>
 8004146:	4603      	mov	r3, r0
 8004148:	75fb      	strb	r3, [r7, #23]
      break;
 800414a:	e00b      	b.n	8004164 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fc4c 	bl	80049f0 <SAI_InitPCM>
 8004158:	4603      	mov	r3, r0
 800415a:	75fb      	strb	r3, [r7, #23]
      break;
 800415c:	e002      	b.n	8004164 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	75fb      	strb	r3, [r7, #23]
      break;
 8004162:	bf00      	nop
  }

  if (status == HAL_OK)
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d104      	bne.n	8004174 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f808 	bl	8004180 <HAL_SAI_Init>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004174:	7dfb      	ldrb	r3, [r7, #23]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e155      	b.n	800443e <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc fd98 	bl	8000cdc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fca1 	bl	8004af4 <SAI_Disable>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e140      	b.n	800443e <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d00c      	beq.n	80041e6 <HAL_SAI_Init+0x66>
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d80d      	bhi.n	80041ec <HAL_SAI_Init+0x6c>
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_SAI_Init+0x5a>
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d003      	beq.n	80041e0 <HAL_SAI_Init+0x60>
 80041d8:	e008      	b.n	80041ec <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
      break;
 80041de:	e008      	b.n	80041f2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80041e0:	2310      	movs	r3, #16
 80041e2:	61fb      	str	r3, [r7, #28]
      break;
 80041e4:	e005      	b.n	80041f2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80041e6:	2320      	movs	r3, #32
 80041e8:	61fb      	str	r3, [r7, #28]
      break;
 80041ea:	e002      	b.n	80041f2 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
      break;
 80041f0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d81d      	bhi.n	8004236 <HAL_SAI_Init+0xb6>
 80041fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004200 <HAL_SAI_Init+0x80>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004211 	.word	0x08004211
 8004204:	08004217 	.word	0x08004217
 8004208:	0800421f 	.word	0x0800421f
 800420c:	08004227 	.word	0x08004227
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
      break;
 8004214:	e012      	b.n	800423c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800421a:	617b      	str	r3, [r7, #20]
      break;
 800421c:	e00e      	b.n	800423c <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800421e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004222:	617b      	str	r3, [r7, #20]
      break;
 8004224:	e00a      	b.n	800423c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004226:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800422a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	61fb      	str	r3, [r7, #28]
      break;
 8004234:	e002      	b.n	800423c <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
      break;
 800423a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a81      	ldr	r2, [pc, #516]	@ (8004448 <HAL_SAI_Init+0x2c8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_SAI_Init+0xd0>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a80      	ldr	r2, [pc, #512]	@ (800444c <HAL_SAI_Init+0x2cc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d103      	bne.n	8004258 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004250:	4a7f      	ldr	r2, [pc, #508]	@ (8004450 <HAL_SAI_Init+0x2d0>)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e002      	b.n	800425e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004258:	4a7e      	ldr	r2, [pc, #504]	@ (8004454 <HAL_SAI_Init+0x2d4>)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d041      	beq.n	80042ea <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a77      	ldr	r2, [pc, #476]	@ (8004448 <HAL_SAI_Init+0x2c8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d004      	beq.n	800427a <HAL_SAI_Init+0xfa>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a75      	ldr	r2, [pc, #468]	@ (800444c <HAL_SAI_Init+0x2cc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d105      	bne.n	8004286 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800427a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800427e:	f7fe ff1d 	bl	80030bc <HAL_RCCEx_GetPeriphCLKFreq>
 8004282:	6138      	str	r0, [r7, #16]
 8004284:	e004      	b.n	8004290 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004286:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800428a:	f7fe ff17 	bl	80030bc <HAL_RCCEx_GetPeriphCLKFreq>
 800428e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	461a      	mov	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	025b      	lsls	r3, r3, #9
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004458 <HAL_SAI_Init+0x2d8>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	08da      	lsrs	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	4b67      	ldr	r3, [pc, #412]	@ (8004458 <HAL_SAI_Init+0x2d8>)
 80042ba:	fba3 2301 	umull	r2, r3, r3, r1
 80042be:	08da      	lsrs	r2, r3, #3
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	1aca      	subs	r2, r1, r3
 80042ca:	2a08      	cmp	r2, #8
 80042cc:	d904      	bls.n	80042d8 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d104      	bne.n	80042ea <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	085a      	lsrs	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_SAI_Init+0x17a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d109      	bne.n	800430e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_SAI_Init+0x186>
 8004302:	2300      	movs	r3, #0
 8004304:	e001      	b.n	800430a <HAL_SAI_Init+0x18a>
 8004306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e008      	b.n	8004320 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004312:	2b01      	cmp	r3, #1
 8004314:	d102      	bne.n	800431c <HAL_SAI_Init+0x19c>
 8004316:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800431a:	e000      	b.n	800431e <HAL_SAI_Init+0x19e>
 800431c:	2300      	movs	r3, #0
 800431e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b4c      	ldr	r3, [pc, #304]	@ (800445c <HAL_SAI_Init+0x2dc>)
 800432c:	400b      	ands	r3, r1
 800432e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6819      	ldr	r1, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004344:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434a:	431a      	orrs	r2, r3
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004358:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004364:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	051b      	lsls	r3, r3, #20
 800436c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004384:	f023 030f 	bic.w	r3, r3, #15
 8004388:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6859      	ldr	r1, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6899      	ldr	r1, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004460 <HAL_SAI_Init+0x2e0>)
 80043b4:	400b      	ands	r3, r1
 80043b6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6899      	ldr	r1, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80043c8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80043ce:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80043d4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	3b01      	subs	r3, #1
 80043dc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80043de:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68d9      	ldr	r1, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80043f6:	400b      	ands	r3, r1
 80043f8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68d9      	ldr	r1, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004410:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004416:	3b01      	subs	r3, #1
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40015404 	.word	0x40015404
 800444c:	40015424 	.word	0x40015424
 8004450:	40015400 	.word	0x40015400
 8004454:	40015800 	.word	0x40015800
 8004458:	cccccccd 	.word	0xcccccccd
 800445c:	ff05c010 	.word	0xff05c010
 8004460:	fff88000 	.word	0xfff88000

08004464 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_SAI_Abort+0x1a>
 800447a:	2302      	movs	r3, #2
 800447c:	e053      	b.n	8004526 <HAL_SAI_Abort+0xc2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fb34 	bl	8004af4 <SAI_Disable>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044a4:	d125      	bne.n	80044f2 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80044b4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b12      	cmp	r3, #18
 80044c0:	d108      	bne.n	80044d4 <HAL_SAI_Abort+0x70>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d004      	beq.n	80044d4 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd f884 	bl	80015dc <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b22      	cmp	r3, #34	@ 0x22
 80044de:	d108      	bne.n	80044f2 <HAL_SAI_Abort+0x8e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fd f875 	bl	80015dc <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004502:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0208 	orr.w	r2, r2, #8
 8004512:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8192 	beq.w	800486a <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_SAI_IRQHandler+0x4c>
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
 800457a:	e176      	b.n	800486a <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01e      	beq.n	80045c4 <HAL_SAI_IRQHandler+0x94>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d019      	beq.n	80045c4 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2201      	movs	r2, #1
 8004596:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b22      	cmp	r3, #34	@ 0x22
 80045a2:	d101      	bne.n	80045a8 <HAL_SAI_IRQHandler+0x78>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <HAL_SAI_IRQHandler+0x7a>
 80045a8:	2302      	movs	r3, #2
 80045aa:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f95b 	bl	8004878 <HAL_SAI_ErrorCallback>
 80045c2:	e152      	b.n	800486a <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d011      	beq.n	80045f2 <HAL_SAI_IRQHandler+0xc2>
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00c      	beq.n	80045f2 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2202      	movs	r2, #2
 80045de:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8140 	beq.w	800486a <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ee:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80045f0:	e13b      	b.n	800486a <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d055      	beq.n	80046a8 <HAL_SAI_IRQHandler+0x178>
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d050      	beq.n	80046a8 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2220      	movs	r2, #32
 800460c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004614:	f043 0204 	orr.w	r2, r3, #4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d038      	beq.n	800469a <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d016      	beq.n	800465e <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004634:	4a8f      	ldr	r2, [pc, #572]	@ (8004874 <HAL_SAI_IRQHandler+0x344>)
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800463c:	4618      	mov	r0, r3
 800463e:	f7fd f80b 	bl	8001658 <HAL_DMA_Abort_IT>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800464e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f90d 	bl	8004878 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 80fc 	beq.w	8004860 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466c:	4a81      	ldr	r2, [pc, #516]	@ (8004874 <HAL_SAI_IRQHandler+0x344>)
 800466e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004674:	4618      	mov	r0, r3
 8004676:	f7fc ffef 	bl	8001658 <HAL_DMA_Abort_IT>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80ef 	beq.w	8004860 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004688:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8f0 	bl	8004878 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004698:	e0e2      	b.n	8004860 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff fee2 	bl	8004464 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f8e9 	bl	8004878 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80046a6:	e0db      	b.n	8004860 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d055      	beq.n	800475e <HAL_SAI_IRQHandler+0x22e>
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d050      	beq.n	800475e <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2240      	movs	r2, #64	@ 0x40
 80046c2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ca:	f043 0208 	orr.w	r2, r3, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d038      	beq.n	8004750 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d016      	beq.n	8004714 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ea:	4a62      	ldr	r2, [pc, #392]	@ (8004874 <HAL_SAI_IRQHandler+0x344>)
 80046ec:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fc ffb0 	bl	8001658 <HAL_DMA_Abort_IT>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004704:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8b2 	bl	8004878 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80a3 	beq.w	8004864 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	4a54      	ldr	r2, [pc, #336]	@ (8004874 <HAL_SAI_IRQHandler+0x344>)
 8004724:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472a:	4618      	mov	r0, r3
 800472c:	f7fc ff94 	bl	8001658 <HAL_DMA_Abort_IT>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8096 	beq.w	8004864 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800473e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f895 	bl	8004878 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800474e:	e089      	b.n	8004864 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff fe87 	bl	8004464 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f88e 	bl	8004878 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800475c:	e082      	b.n	8004864 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d061      	beq.n	800482c <HAL_SAI_IRQHandler+0x2fc>
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d05c      	beq.n	800482c <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2204      	movs	r2, #4
 8004778:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004780:	f043 0220 	orr.w	r2, r3, #32
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d036      	beq.n	8004802 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d016      	beq.n	80047ca <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a0:	4a34      	ldr	r2, [pc, #208]	@ (8004874 <HAL_SAI_IRQHandler+0x344>)
 80047a2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fc ff55 	bl	8001658 <HAL_DMA_Abort_IT>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f857 	bl	8004878 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d04a      	beq.n	8004868 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	4a27      	ldr	r2, [pc, #156]	@ (8004874 <HAL_SAI_IRQHandler+0x344>)
 80047d8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fc ff3a 	bl	8001658 <HAL_DMA_Abort_IT>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d03e      	beq.n	8004868 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f83c 	bl	8004878 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004800:	e032      	b.n	8004868 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f04f 32ff 	mov.w	r2, #4294967295
 8004812:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f827 	bl	8004878 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800482a:	e01d      	b.n	8004868 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b00      	cmp	r3, #0
 8004834:	d019      	beq.n	800486a <HAL_SAI_IRQHandler+0x33a>
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	d014      	beq.n	800486a <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2210      	movs	r2, #16
 8004846:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800484e:	f043 0210 	orr.w	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f80d 	bl	8004878 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800485e:	e004      	b.n	800486a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004860:	bf00      	nop
 8004862:	e002      	b.n	800486a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004868:	bf00      	nop
}
 800486a:	bf00      	nop
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	08004b69 	.word	0x08004b69

08004878 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <SAI_InitI2S+0x2e>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d103      	bne.n	80048c2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80048c0:	e002      	b.n	80048c8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80048ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e077      	b.n	80049e2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d107      	bne.n	8004908 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004904:	651a      	str	r2, [r3, #80]	@ 0x50
 8004906:	e006      	b.n	8004916 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800490e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d84f      	bhi.n	80049bc <SAI_InitI2S+0x130>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <SAI_InitI2S+0x98>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004935 	.word	0x08004935
 8004928:	08004957 	.word	0x08004957
 800492c:	08004979 	.word	0x08004979
 8004930:	0800499b 	.word	0x0800499b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2280      	movs	r2, #128	@ 0x80
 8004938:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	085b      	lsrs	r3, r3, #1
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	011a      	lsls	r2, r3, #4
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2240      	movs	r2, #64	@ 0x40
 8004952:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004954:	e035      	b.n	80049c2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2280      	movs	r2, #128	@ 0x80
 800495a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	019a      	lsls	r2, r3, #6
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2280      	movs	r2, #128	@ 0x80
 8004974:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004976:	e024      	b.n	80049c2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	22c0      	movs	r2, #192	@ 0xc0
 800497c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	019a      	lsls	r2, r3, #6
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2280      	movs	r2, #128	@ 0x80
 8004996:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004998:	e013      	b.n	80049c2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	22e0      	movs	r2, #224	@ 0xe0
 800499e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	019a      	lsls	r2, r3, #6
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2280      	movs	r2, #128	@ 0x80
 80049b8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80049ba:	e002      	b.n	80049c2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	75fb      	strb	r3, [r7, #23]
      break;
 80049c0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d10b      	bne.n	80049e0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d102      	bne.n	80049d4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2210      	movs	r2, #16
 80049d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d102      	bne.n	80049e0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2208      	movs	r2, #8
 80049de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop

080049f0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <SAI_InitPCM+0x2e>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d103      	bne.n	8004a26 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a24:	e002      	b.n	8004a2c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a38:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004a40:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a54:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d103      	bne.n	8004a64 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a62:	e002      	b.n	8004a6a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	220d      	movs	r2, #13
 8004a68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d837      	bhi.n	8004ae0 <SAI_InitPCM+0xf0>
 8004a70:	a201      	add	r2, pc, #4	@ (adr r2, 8004a78 <SAI_InitPCM+0x88>)
 8004a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a76:	bf00      	nop
 8004a78:	08004a89 	.word	0x08004a89
 8004a7c:	08004a9f 	.word	0x08004a9f
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004acb 	.word	0x08004acb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2280      	movs	r2, #128	@ 0x80
 8004a8c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	011a      	lsls	r2, r3, #4
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2240      	movs	r2, #64	@ 0x40
 8004a9a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004a9c:	e023      	b.n	8004ae6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2280      	movs	r2, #128	@ 0x80
 8004aa2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2280      	movs	r2, #128	@ 0x80
 8004ab0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004ab2:	e018      	b.n	8004ae6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	22c0      	movs	r2, #192	@ 0xc0
 8004ab8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2280      	movs	r2, #128	@ 0x80
 8004ac6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004ac8:	e00d      	b.n	8004ae6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	22e0      	movs	r2, #224	@ 0xe0
 8004ace:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2280      	movs	r2, #128	@ 0x80
 8004adc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004ade:	e002      	b.n	8004ae6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae4:	bf00      	nop
  }

  return status;
 8004ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004afc:	4b18      	ldr	r3, [pc, #96]	@ (8004b60 <SAI_Disable+0x6c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a18      	ldr	r2, [pc, #96]	@ (8004b64 <SAI_Disable+0x70>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	0b1b      	lsrs	r3, r3, #12
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004b1e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	72fb      	strb	r3, [r7, #11]
      break;
 8004b3a:	e009      	b.n	8004b50 <SAI_Disable+0x5c>
    }
    count--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e7      	bne.n	8004b20 <SAI_Disable+0x2c>

  return status;
 8004b50:	7afb      	ldrb	r3, [r7, #11]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000000 	.word	0x20000000
 8004b64:	95cbec1b 	.word	0x95cbec1b

08004b68 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004b84:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f04f 32ff 	mov.w	r2, #4294967295
 8004b96:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d00a      	beq.n	8004bb8 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff ffa6 	bl	8004af4 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0208 	orr.w	r2, r2, #8
 8004bb6:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff fe55 	bl	8004878 <HAL_SAI_ErrorCallback>
#endif
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e095      	b.n	8004d14 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d108      	bne.n	8004c02 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bf8:	d009      	beq.n	8004c0e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	61da      	str	r2, [r3, #28]
 8004c00:	e005      	b.n	8004c0e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fb ff99 	bl	8000b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c44:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c4e:	d902      	bls.n	8004c56 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e002      	b.n	8004c5c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c64:	d007      	beq.n	8004c76 <HAL_SPI_Init+0xa0>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c6e:	d002      	beq.n	8004c76 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb8:	ea42 0103 	orr.w	r1, r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	f003 0204 	and.w	r2, r3, #4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004cf2:	ea42 0103 	orr.w	r1, r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d2c:	f7fc fa5c 	bl	80011e8 <HAL_GetTick>
 8004d30:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d001      	beq.n	8004d46 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004d42:	2302      	movs	r3, #2
 8004d44:	e15c      	b.n	8005000 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_SPI_Transmit+0x36>
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e154      	b.n	8005000 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_SPI_Transmit+0x48>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e14d      	b.n	8005000 <HAL_SPI_Transmit+0x2e4>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db6:	d10f      	bne.n	8004dd8 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de2:	2b40      	cmp	r3, #64	@ 0x40
 8004de4:	d007      	beq.n	8004df6 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004df4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dfe:	d952      	bls.n	8004ea6 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_Transmit+0xf2>
 8004e08:	8b7b      	ldrh	r3, [r7, #26]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d145      	bne.n	8004e9a <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e12:	881a      	ldrh	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	1c9a      	adds	r2, r3, #2
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e32:	e032      	b.n	8004e9a <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d112      	bne.n	8004e68 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e52:	1c9a      	adds	r2, r3, #2
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e66:	e018      	b.n	8004e9a <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e68:	f7fc f9be 	bl	80011e8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d803      	bhi.n	8004e80 <HAL_SPI_Transmit+0x164>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d102      	bne.n	8004e86 <HAL_SPI_Transmit+0x16a>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e0b2      	b.n	8005000 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1c7      	bne.n	8004e34 <HAL_SPI_Transmit+0x118>
 8004ea4:	e083      	b.n	8004fae <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_SPI_Transmit+0x198>
 8004eae:	8b7b      	ldrh	r3, [r7, #26]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d177      	bne.n	8004fa4 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d912      	bls.n	8004ee4 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec2:	881a      	ldrh	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ece:	1c9a      	adds	r2, r3, #2
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b02      	subs	r3, #2
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ee2:	e05f      	b.n	8004fa4 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	7812      	ldrb	r2, [r2, #0]
 8004ef0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f0a:	e04b      	b.n	8004fa4 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d12b      	bne.n	8004f72 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d912      	bls.n	8004f4a <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b02      	subs	r3, #2
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f48:	e02c      	b.n	8004fa4 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f70:	e018      	b.n	8004fa4 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f72:	f7fc f939 	bl	80011e8 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d803      	bhi.n	8004f8a <HAL_SPI_Transmit+0x26e>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d102      	bne.n	8004f90 <HAL_SPI_Transmit+0x274>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e02d      	b.n	8005000 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1ae      	bne.n	8004f0c <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f946 	bl	8005244 <SPI_EndRxTxTransaction>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
  }
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005018:	f7fc f8e6 	bl	80011e8 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	4413      	add	r3, r2
 8005026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005028:	f7fc f8de 	bl	80011e8 <HAL_GetTick>
 800502c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800502e:	4b39      	ldr	r3, [pc, #228]	@ (8005114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	015b      	lsls	r3, r3, #5
 8005034:	0d1b      	lsrs	r3, r3, #20
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	fb02 f303 	mul.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800503e:	e054      	b.n	80050ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d050      	beq.n	80050ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005048:	f7fc f8ce 	bl	80011e8 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	429a      	cmp	r2, r3
 8005056:	d902      	bls.n	800505e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d13d      	bne.n	80050da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800506c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005076:	d111      	bne.n	800509c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005080:	d004      	beq.n	800508c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508a:	d107      	bne.n	800509c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800509a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a4:	d10f      	bne.n	80050c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e017      	b.n	800510a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	429a      	cmp	r2, r3
 8005106:	d19b      	bne.n	8005040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000000 	.word	0x20000000

08005118 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	@ 0x28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800512a:	f7fc f85d 	bl	80011e8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	4413      	add	r3, r2
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800513a:	f7fc f855 	bl	80011e8 <HAL_GetTick>
 800513e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005148:	4b3d      	ldr	r3, [pc, #244]	@ (8005240 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	00da      	lsls	r2, r3, #3
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	0d1b      	lsrs	r3, r3, #20
 8005158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800515a:	fb02 f303 	mul.w	r3, r2, r3
 800515e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005160:	e060      	b.n	8005224 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005168:	d107      	bne.n	800517a <SPI_WaitFifoStateUntilTimeout+0x62>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005178:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d050      	beq.n	8005224 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005182:	f7fc f831 	bl	80011e8 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518e:	429a      	cmp	r2, r3
 8005190:	d902      	bls.n	8005198 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	2b00      	cmp	r3, #0
 8005196:	d13d      	bne.n	8005214 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051b0:	d111      	bne.n	80051d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ba:	d004      	beq.n	80051c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c4:	d107      	bne.n	80051d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051de:	d10f      	bne.n	8005200 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e010      	b.n	8005236 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	3b01      	subs	r3, #1
 8005222:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	d196      	bne.n	8005162 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3728      	adds	r7, #40	@ 0x28
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000000 	.word	0x20000000

08005244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff ff5b 	bl	8005118 <SPI_WaitFifoStateUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e027      	b.n	80052c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2200      	movs	r2, #0
 8005280:	2180      	movs	r1, #128	@ 0x80
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff fec0 	bl	8005008 <SPI_WaitFlagStateUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e014      	b.n	80052c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff ff34 	bl	8005118 <SPI_WaitFifoStateUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e000      	b.n	80052c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e040      	b.n	8005364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fb fc96 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2224      	movs	r2, #36	@ 0x24
 80052fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fb6a 	bl	80059f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8af 	bl	8005480 <UART_SetConfig>
 8005322:	4603      	mov	r3, r0
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e01b      	b.n	8005364 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800533a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800534a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fbe9 	bl	8005b34 <UART_CheckIdleState>
 8005362:	4603      	mov	r3, r0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	@ 0x28
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005380:	2b20      	cmp	r3, #32
 8005382:	d177      	bne.n	8005474 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_UART_Transmit+0x24>
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e070      	b.n	8005476 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2221      	movs	r2, #33	@ 0x21
 80053a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053a2:	f7fb ff21 	bl	80011e8 <HAL_GetTick>
 80053a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053c0:	d108      	bne.n	80053d4 <HAL_UART_Transmit+0x68>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	e003      	b.n	80053dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053dc:	e02f      	b.n	800543e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2200      	movs	r2, #0
 80053e6:	2180      	movs	r1, #128	@ 0x80
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fc4b 	bl	8005c84 <UART_WaitOnFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e03b      	b.n	8005476 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	881a      	ldrh	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005410:	b292      	uxth	r2, r2
 8005412:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	3302      	adds	r3, #2
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	e007      	b.n	800542c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	781a      	ldrb	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	3301      	adds	r3, #1
 800542a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1c9      	bne.n	80053de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	2140      	movs	r1, #64	@ 0x40
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 fc15 	bl	8005c84 <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e005      	b.n	8005476 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005484:	b08a      	sub	sp, #40	@ 0x28
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	431a      	orrs	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	431a      	orrs	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4ba4      	ldr	r3, [pc, #656]	@ (8005740 <UART_SetConfig+0x2c0>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a99      	ldr	r2, [pc, #612]	@ (8005744 <UART_SetConfig+0x2c4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e8:	4313      	orrs	r3, r2
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a90      	ldr	r2, [pc, #576]	@ (8005748 <UART_SetConfig+0x2c8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d126      	bne.n	8005558 <UART_SetConfig+0xd8>
 800550a:	4b90      	ldr	r3, [pc, #576]	@ (800574c <UART_SetConfig+0x2cc>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	2b03      	cmp	r3, #3
 8005516:	d81b      	bhi.n	8005550 <UART_SetConfig+0xd0>
 8005518:	a201      	add	r2, pc, #4	@ (adr r2, 8005520 <UART_SetConfig+0xa0>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005531 	.word	0x08005531
 8005524:	08005541 	.word	0x08005541
 8005528:	08005539 	.word	0x08005539
 800552c:	08005549 	.word	0x08005549
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005536:	e116      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005538:	2302      	movs	r3, #2
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800553e:	e112      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005540:	2304      	movs	r3, #4
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005546:	e10e      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005548:	2308      	movs	r3, #8
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800554e:	e10a      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005550:	2310      	movs	r3, #16
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005556:	e106      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a7c      	ldr	r2, [pc, #496]	@ (8005750 <UART_SetConfig+0x2d0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d138      	bne.n	80055d4 <UART_SetConfig+0x154>
 8005562:	4b7a      	ldr	r3, [pc, #488]	@ (800574c <UART_SetConfig+0x2cc>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b0c      	cmp	r3, #12
 800556e:	d82d      	bhi.n	80055cc <UART_SetConfig+0x14c>
 8005570:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <UART_SetConfig+0xf8>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055ad 	.word	0x080055ad
 800557c:	080055cd 	.word	0x080055cd
 8005580:	080055cd 	.word	0x080055cd
 8005584:	080055cd 	.word	0x080055cd
 8005588:	080055bd 	.word	0x080055bd
 800558c:	080055cd 	.word	0x080055cd
 8005590:	080055cd 	.word	0x080055cd
 8005594:	080055cd 	.word	0x080055cd
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055cd 	.word	0x080055cd
 80055a0:	080055cd 	.word	0x080055cd
 80055a4:	080055cd 	.word	0x080055cd
 80055a8:	080055c5 	.word	0x080055c5
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b2:	e0d8      	b.n	8005766 <UART_SetConfig+0x2e6>
 80055b4:	2302      	movs	r3, #2
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ba:	e0d4      	b.n	8005766 <UART_SetConfig+0x2e6>
 80055bc:	2304      	movs	r3, #4
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c2:	e0d0      	b.n	8005766 <UART_SetConfig+0x2e6>
 80055c4:	2308      	movs	r3, #8
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ca:	e0cc      	b.n	8005766 <UART_SetConfig+0x2e6>
 80055cc:	2310      	movs	r3, #16
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055d2:	e0c8      	b.n	8005766 <UART_SetConfig+0x2e6>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a5e      	ldr	r2, [pc, #376]	@ (8005754 <UART_SetConfig+0x2d4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d125      	bne.n	800562a <UART_SetConfig+0x1aa>
 80055de:	4b5b      	ldr	r3, [pc, #364]	@ (800574c <UART_SetConfig+0x2cc>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055e8:	2b30      	cmp	r3, #48	@ 0x30
 80055ea:	d016      	beq.n	800561a <UART_SetConfig+0x19a>
 80055ec:	2b30      	cmp	r3, #48	@ 0x30
 80055ee:	d818      	bhi.n	8005622 <UART_SetConfig+0x1a2>
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d00a      	beq.n	800560a <UART_SetConfig+0x18a>
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d814      	bhi.n	8005622 <UART_SetConfig+0x1a2>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <UART_SetConfig+0x182>
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d008      	beq.n	8005612 <UART_SetConfig+0x192>
 8005600:	e00f      	b.n	8005622 <UART_SetConfig+0x1a2>
 8005602:	2300      	movs	r3, #0
 8005604:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005608:	e0ad      	b.n	8005766 <UART_SetConfig+0x2e6>
 800560a:	2302      	movs	r3, #2
 800560c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005610:	e0a9      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005612:	2304      	movs	r3, #4
 8005614:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005618:	e0a5      	b.n	8005766 <UART_SetConfig+0x2e6>
 800561a:	2308      	movs	r3, #8
 800561c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005620:	e0a1      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005622:	2310      	movs	r3, #16
 8005624:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005628:	e09d      	b.n	8005766 <UART_SetConfig+0x2e6>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a4a      	ldr	r2, [pc, #296]	@ (8005758 <UART_SetConfig+0x2d8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d125      	bne.n	8005680 <UART_SetConfig+0x200>
 8005634:	4b45      	ldr	r3, [pc, #276]	@ (800574c <UART_SetConfig+0x2cc>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800563e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005640:	d016      	beq.n	8005670 <UART_SetConfig+0x1f0>
 8005642:	2bc0      	cmp	r3, #192	@ 0xc0
 8005644:	d818      	bhi.n	8005678 <UART_SetConfig+0x1f8>
 8005646:	2b80      	cmp	r3, #128	@ 0x80
 8005648:	d00a      	beq.n	8005660 <UART_SetConfig+0x1e0>
 800564a:	2b80      	cmp	r3, #128	@ 0x80
 800564c:	d814      	bhi.n	8005678 <UART_SetConfig+0x1f8>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <UART_SetConfig+0x1d8>
 8005652:	2b40      	cmp	r3, #64	@ 0x40
 8005654:	d008      	beq.n	8005668 <UART_SetConfig+0x1e8>
 8005656:	e00f      	b.n	8005678 <UART_SetConfig+0x1f8>
 8005658:	2300      	movs	r3, #0
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800565e:	e082      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005660:	2302      	movs	r3, #2
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005666:	e07e      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800566e:	e07a      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005676:	e076      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800567e:	e072      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a35      	ldr	r2, [pc, #212]	@ (800575c <UART_SetConfig+0x2dc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d12a      	bne.n	80056e0 <UART_SetConfig+0x260>
 800568a:	4b30      	ldr	r3, [pc, #192]	@ (800574c <UART_SetConfig+0x2cc>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005694:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005698:	d01a      	beq.n	80056d0 <UART_SetConfig+0x250>
 800569a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800569e:	d81b      	bhi.n	80056d8 <UART_SetConfig+0x258>
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056a4:	d00c      	beq.n	80056c0 <UART_SetConfig+0x240>
 80056a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056aa:	d815      	bhi.n	80056d8 <UART_SetConfig+0x258>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <UART_SetConfig+0x238>
 80056b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056b4:	d008      	beq.n	80056c8 <UART_SetConfig+0x248>
 80056b6:	e00f      	b.n	80056d8 <UART_SetConfig+0x258>
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056be:	e052      	b.n	8005766 <UART_SetConfig+0x2e6>
 80056c0:	2302      	movs	r3, #2
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056c6:	e04e      	b.n	8005766 <UART_SetConfig+0x2e6>
 80056c8:	2304      	movs	r3, #4
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ce:	e04a      	b.n	8005766 <UART_SetConfig+0x2e6>
 80056d0:	2308      	movs	r3, #8
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d6:	e046      	b.n	8005766 <UART_SetConfig+0x2e6>
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056de:	e042      	b.n	8005766 <UART_SetConfig+0x2e6>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a17      	ldr	r2, [pc, #92]	@ (8005744 <UART_SetConfig+0x2c4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d13a      	bne.n	8005760 <UART_SetConfig+0x2e0>
 80056ea:	4b18      	ldr	r3, [pc, #96]	@ (800574c <UART_SetConfig+0x2cc>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056f8:	d01a      	beq.n	8005730 <UART_SetConfig+0x2b0>
 80056fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056fe:	d81b      	bhi.n	8005738 <UART_SetConfig+0x2b8>
 8005700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005704:	d00c      	beq.n	8005720 <UART_SetConfig+0x2a0>
 8005706:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800570a:	d815      	bhi.n	8005738 <UART_SetConfig+0x2b8>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <UART_SetConfig+0x298>
 8005710:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005714:	d008      	beq.n	8005728 <UART_SetConfig+0x2a8>
 8005716:	e00f      	b.n	8005738 <UART_SetConfig+0x2b8>
 8005718:	2300      	movs	r3, #0
 800571a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800571e:	e022      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005720:	2302      	movs	r3, #2
 8005722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005726:	e01e      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005728:	2304      	movs	r3, #4
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800572e:	e01a      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005730:	2308      	movs	r3, #8
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005736:	e016      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005738:	2310      	movs	r3, #16
 800573a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800573e:	e012      	b.n	8005766 <UART_SetConfig+0x2e6>
 8005740:	efff69f3 	.word	0xefff69f3
 8005744:	40008000 	.word	0x40008000
 8005748:	40013800 	.word	0x40013800
 800574c:	40021000 	.word	0x40021000
 8005750:	40004400 	.word	0x40004400
 8005754:	40004800 	.word	0x40004800
 8005758:	40004c00 	.word	0x40004c00
 800575c:	40005000 	.word	0x40005000
 8005760:	2310      	movs	r3, #16
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a9f      	ldr	r2, [pc, #636]	@ (80059e8 <UART_SetConfig+0x568>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d17a      	bne.n	8005866 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005770:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005774:	2b08      	cmp	r3, #8
 8005776:	d824      	bhi.n	80057c2 <UART_SetConfig+0x342>
 8005778:	a201      	add	r2, pc, #4	@ (adr r2, 8005780 <UART_SetConfig+0x300>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057c3 	.word	0x080057c3
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057c3 	.word	0x080057c3
 8005790:	080057b3 	.word	0x080057b3
 8005794:	080057c3 	.word	0x080057c3
 8005798:	080057c3 	.word	0x080057c3
 800579c:	080057c3 	.word	0x080057c3
 80057a0:	080057bb 	.word	0x080057bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a4:	f7fd f914 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 80057a8:	61f8      	str	r0, [r7, #28]
        break;
 80057aa:	e010      	b.n	80057ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057ac:	4b8f      	ldr	r3, [pc, #572]	@ (80059ec <UART_SetConfig+0x56c>)
 80057ae:	61fb      	str	r3, [r7, #28]
        break;
 80057b0:	e00d      	b.n	80057ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b2:	f7fd f875 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80057b6:	61f8      	str	r0, [r7, #28]
        break;
 80057b8:	e009      	b.n	80057ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057be:	61fb      	str	r3, [r7, #28]
        break;
 80057c0:	e005      	b.n	80057ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80057cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80fb 	beq.w	80059cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	4413      	add	r3, r2
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d305      	bcc.n	80057f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d903      	bls.n	80057fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057f8:	e0e8      	b.n	80059cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	2200      	movs	r2, #0
 80057fe:	461c      	mov	r4, r3
 8005800:	4615      	mov	r5, r2
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	022b      	lsls	r3, r5, #8
 800580c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005810:	0222      	lsls	r2, r4, #8
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	6849      	ldr	r1, [r1, #4]
 8005816:	0849      	lsrs	r1, r1, #1
 8005818:	2000      	movs	r0, #0
 800581a:	4688      	mov	r8, r1
 800581c:	4681      	mov	r9, r0
 800581e:	eb12 0a08 	adds.w	sl, r2, r8
 8005822:	eb43 0b09 	adc.w	fp, r3, r9
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005834:	4650      	mov	r0, sl
 8005836:	4659      	mov	r1, fp
 8005838:	f7fa fcc6 	bl	80001c8 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584a:	d308      	bcc.n	800585e <UART_SetConfig+0x3de>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005852:	d204      	bcs.n	800585e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	60da      	str	r2, [r3, #12]
 800585c:	e0b6      	b.n	80059cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005864:	e0b2      	b.n	80059cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800586e:	d15e      	bne.n	800592e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005870:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005874:	2b08      	cmp	r3, #8
 8005876:	d828      	bhi.n	80058ca <UART_SetConfig+0x44a>
 8005878:	a201      	add	r2, pc, #4	@ (adr r2, 8005880 <UART_SetConfig+0x400>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058b5 	.word	0x080058b5
 800588c:	080058cb 	.word	0x080058cb
 8005890:	080058bb 	.word	0x080058bb
 8005894:	080058cb 	.word	0x080058cb
 8005898:	080058cb 	.word	0x080058cb
 800589c:	080058cb 	.word	0x080058cb
 80058a0:	080058c3 	.word	0x080058c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a4:	f7fd f894 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 80058a8:	61f8      	str	r0, [r7, #28]
        break;
 80058aa:	e014      	b.n	80058d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ac:	f7fd f8a6 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 80058b0:	61f8      	str	r0, [r7, #28]
        break;
 80058b2:	e010      	b.n	80058d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b4:	4b4d      	ldr	r3, [pc, #308]	@ (80059ec <UART_SetConfig+0x56c>)
 80058b6:	61fb      	str	r3, [r7, #28]
        break;
 80058b8:	e00d      	b.n	80058d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ba:	f7fc fff1 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80058be:	61f8      	str	r0, [r7, #28]
        break;
 80058c0:	e009      	b.n	80058d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058c6:	61fb      	str	r3, [r7, #28]
        break;
 80058c8:	e005      	b.n	80058d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d077      	beq.n	80059cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	005a      	lsls	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	441a      	add	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b0f      	cmp	r3, #15
 80058f6:	d916      	bls.n	8005926 <UART_SetConfig+0x4a6>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058fe:	d212      	bcs.n	8005926 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f023 030f 	bic.w	r3, r3, #15
 8005908:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	b29b      	uxth	r3, r3
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	b29a      	uxth	r2, r3
 8005916:	8afb      	ldrh	r3, [r7, #22]
 8005918:	4313      	orrs	r3, r2
 800591a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	8afa      	ldrh	r2, [r7, #22]
 8005922:	60da      	str	r2, [r3, #12]
 8005924:	e052      	b.n	80059cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800592c:	e04e      	b.n	80059cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800592e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005932:	2b08      	cmp	r3, #8
 8005934:	d827      	bhi.n	8005986 <UART_SetConfig+0x506>
 8005936:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <UART_SetConfig+0x4bc>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	08005961 	.word	0x08005961
 8005940:	08005969 	.word	0x08005969
 8005944:	08005971 	.word	0x08005971
 8005948:	08005987 	.word	0x08005987
 800594c:	08005977 	.word	0x08005977
 8005950:	08005987 	.word	0x08005987
 8005954:	08005987 	.word	0x08005987
 8005958:	08005987 	.word	0x08005987
 800595c:	0800597f 	.word	0x0800597f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005960:	f7fd f836 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8005964:	61f8      	str	r0, [r7, #28]
        break;
 8005966:	e014      	b.n	8005992 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005968:	f7fd f848 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 800596c:	61f8      	str	r0, [r7, #28]
        break;
 800596e:	e010      	b.n	8005992 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005970:	4b1e      	ldr	r3, [pc, #120]	@ (80059ec <UART_SetConfig+0x56c>)
 8005972:	61fb      	str	r3, [r7, #28]
        break;
 8005974:	e00d      	b.n	8005992 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005976:	f7fc ff93 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800597a:	61f8      	str	r0, [r7, #28]
        break;
 800597c:	e009      	b.n	8005992 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005982:	61fb      	str	r3, [r7, #28]
        break;
 8005984:	e005      	b.n	8005992 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005990:	bf00      	nop
    }

    if (pclk != 0U)
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d019      	beq.n	80059cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	085a      	lsrs	r2, r3, #1
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	441a      	add	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b0f      	cmp	r3, #15
 80059b0:	d909      	bls.n	80059c6 <UART_SetConfig+0x546>
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b8:	d205      	bcs.n	80059c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60da      	str	r2, [r3, #12]
 80059c4:	e002      	b.n	80059cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80059d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	@ 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059e6:	bf00      	nop
 80059e8:	40008000 	.word	0x40008000
 80059ec:	00f42400 	.word	0x00f42400

080059f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01a      	beq.n	8005b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aee:	d10a      	bne.n	8005b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
  }
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b098      	sub	sp, #96	@ 0x60
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b44:	f7fb fb50 	bl	80011e8 <HAL_GetTick>
 8005b48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d12e      	bne.n	8005bb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b60:	2200      	movs	r2, #0
 8005b62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f88c 	bl	8005c84 <UART_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d021      	beq.n	8005bb6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e6      	bne.n	8005b72 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e062      	b.n	8005c7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d149      	bne.n	8005c58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f856 	bl	8005c84 <UART_WaitOnFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d03c      	beq.n	8005c58 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	623b      	str	r3, [r7, #32]
   return(result);
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e6      	bne.n	8005bde <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0301 	bic.w	r3, r3, #1
 8005c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c30:	61fa      	str	r2, [r7, #28]
 8005c32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	69b9      	ldr	r1, [r7, #24]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e5      	bne.n	8005c10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e011      	b.n	8005c7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3758      	adds	r7, #88	@ 0x58
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c94:	e04f      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9c:	d04b      	beq.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9e:	f7fb faa3 	bl	80011e8 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e04e      	b.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d037      	beq.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b80      	cmp	r3, #128	@ 0x80
 8005cca:	d034      	beq.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b40      	cmp	r3, #64	@ 0x40
 8005cd0:	d031      	beq.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d110      	bne.n	8005d02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f838 	bl	8005d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e029      	b.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d10:	d111      	bne.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f81e 	bl	8005d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e00f      	b.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	bf0c      	ite	eq
 8005d46:	2301      	moveq	r3, #1
 8005d48:	2300      	movne	r3, #0
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d0a0      	beq.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b095      	sub	sp, #84	@ 0x54
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3308      	adds	r3, #8
 8005db6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005db8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e5      	bne.n	8005d98 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d118      	bne.n	8005e06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f023 0310 	bic.w	r3, r3, #16
 8005de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6979      	ldr	r1, [r7, #20]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e6      	bne.n	8005dd4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e1a:	bf00      	nop
 8005e1c:	3754      	adds	r7, #84	@ 0x54
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <std>:
 8005e28:	2300      	movs	r3, #0
 8005e2a:	b510      	push	{r4, lr}
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e36:	6083      	str	r3, [r0, #8]
 8005e38:	8181      	strh	r1, [r0, #12]
 8005e3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e3c:	81c2      	strh	r2, [r0, #14]
 8005e3e:	6183      	str	r3, [r0, #24]
 8005e40:	4619      	mov	r1, r3
 8005e42:	2208      	movs	r2, #8
 8005e44:	305c      	adds	r0, #92	@ 0x5c
 8005e46:	f000 f9e7 	bl	8006218 <memset>
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <std+0x58>)
 8005e4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e84 <std+0x5c>)
 8005e50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e52:	4b0d      	ldr	r3, [pc, #52]	@ (8005e88 <std+0x60>)
 8005e54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e56:	4b0d      	ldr	r3, [pc, #52]	@ (8005e8c <std+0x64>)
 8005e58:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <std+0x68>)
 8005e5c:	6224      	str	r4, [r4, #32]
 8005e5e:	429c      	cmp	r4, r3
 8005e60:	d006      	beq.n	8005e70 <std+0x48>
 8005e62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e66:	4294      	cmp	r4, r2
 8005e68:	d002      	beq.n	8005e70 <std+0x48>
 8005e6a:	33d0      	adds	r3, #208	@ 0xd0
 8005e6c:	429c      	cmp	r4, r3
 8005e6e:	d105      	bne.n	8005e7c <std+0x54>
 8005e70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e78:	f000 ba46 	b.w	8006308 <__retarget_lock_init_recursive>
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	bf00      	nop
 8005e80:	08006069 	.word	0x08006069
 8005e84:	0800608b 	.word	0x0800608b
 8005e88:	080060c3 	.word	0x080060c3
 8005e8c:	080060e7 	.word	0x080060e7
 8005e90:	20000368 	.word	0x20000368

08005e94 <stdio_exit_handler>:
 8005e94:	4a02      	ldr	r2, [pc, #8]	@ (8005ea0 <stdio_exit_handler+0xc>)
 8005e96:	4903      	ldr	r1, [pc, #12]	@ (8005ea4 <stdio_exit_handler+0x10>)
 8005e98:	4803      	ldr	r0, [pc, #12]	@ (8005ea8 <stdio_exit_handler+0x14>)
 8005e9a:	f000 b869 	b.w	8005f70 <_fwalk_sglue>
 8005e9e:	bf00      	nop
 8005ea0:	2000000c 	.word	0x2000000c
 8005ea4:	08006609 	.word	0x08006609
 8005ea8:	2000001c 	.word	0x2000001c

08005eac <cleanup_stdio>:
 8005eac:	6841      	ldr	r1, [r0, #4]
 8005eae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee0 <cleanup_stdio+0x34>)
 8005eb0:	4299      	cmp	r1, r3
 8005eb2:	b510      	push	{r4, lr}
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	d001      	beq.n	8005ebc <cleanup_stdio+0x10>
 8005eb8:	f000 fba6 	bl	8006608 <_fflush_r>
 8005ebc:	68a1      	ldr	r1, [r4, #8]
 8005ebe:	4b09      	ldr	r3, [pc, #36]	@ (8005ee4 <cleanup_stdio+0x38>)
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	d002      	beq.n	8005eca <cleanup_stdio+0x1e>
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f000 fb9f 	bl	8006608 <_fflush_r>
 8005eca:	68e1      	ldr	r1, [r4, #12]
 8005ecc:	4b06      	ldr	r3, [pc, #24]	@ (8005ee8 <cleanup_stdio+0x3c>)
 8005ece:	4299      	cmp	r1, r3
 8005ed0:	d004      	beq.n	8005edc <cleanup_stdio+0x30>
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed8:	f000 bb96 	b.w	8006608 <_fflush_r>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000368 	.word	0x20000368
 8005ee4:	200003d0 	.word	0x200003d0
 8005ee8:	20000438 	.word	0x20000438

08005eec <global_stdio_init.part.0>:
 8005eec:	b510      	push	{r4, lr}
 8005eee:	4b0b      	ldr	r3, [pc, #44]	@ (8005f1c <global_stdio_init.part.0+0x30>)
 8005ef0:	4c0b      	ldr	r4, [pc, #44]	@ (8005f20 <global_stdio_init.part.0+0x34>)
 8005ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8005f24 <global_stdio_init.part.0+0x38>)
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2104      	movs	r1, #4
 8005efc:	f7ff ff94 	bl	8005e28 <std>
 8005f00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f04:	2201      	movs	r2, #1
 8005f06:	2109      	movs	r1, #9
 8005f08:	f7ff ff8e 	bl	8005e28 <std>
 8005f0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f10:	2202      	movs	r2, #2
 8005f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f16:	2112      	movs	r1, #18
 8005f18:	f7ff bf86 	b.w	8005e28 <std>
 8005f1c:	200004a0 	.word	0x200004a0
 8005f20:	20000368 	.word	0x20000368
 8005f24:	08005e95 	.word	0x08005e95

08005f28 <__sfp_lock_acquire>:
 8005f28:	4801      	ldr	r0, [pc, #4]	@ (8005f30 <__sfp_lock_acquire+0x8>)
 8005f2a:	f000 b9ee 	b.w	800630a <__retarget_lock_acquire_recursive>
 8005f2e:	bf00      	nop
 8005f30:	200004a9 	.word	0x200004a9

08005f34 <__sfp_lock_release>:
 8005f34:	4801      	ldr	r0, [pc, #4]	@ (8005f3c <__sfp_lock_release+0x8>)
 8005f36:	f000 b9e9 	b.w	800630c <__retarget_lock_release_recursive>
 8005f3a:	bf00      	nop
 8005f3c:	200004a9 	.word	0x200004a9

08005f40 <__sinit>:
 8005f40:	b510      	push	{r4, lr}
 8005f42:	4604      	mov	r4, r0
 8005f44:	f7ff fff0 	bl	8005f28 <__sfp_lock_acquire>
 8005f48:	6a23      	ldr	r3, [r4, #32]
 8005f4a:	b11b      	cbz	r3, 8005f54 <__sinit+0x14>
 8005f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f50:	f7ff bff0 	b.w	8005f34 <__sfp_lock_release>
 8005f54:	4b04      	ldr	r3, [pc, #16]	@ (8005f68 <__sinit+0x28>)
 8005f56:	6223      	str	r3, [r4, #32]
 8005f58:	4b04      	ldr	r3, [pc, #16]	@ (8005f6c <__sinit+0x2c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f5      	bne.n	8005f4c <__sinit+0xc>
 8005f60:	f7ff ffc4 	bl	8005eec <global_stdio_init.part.0>
 8005f64:	e7f2      	b.n	8005f4c <__sinit+0xc>
 8005f66:	bf00      	nop
 8005f68:	08005ead 	.word	0x08005ead
 8005f6c:	200004a0 	.word	0x200004a0

08005f70 <_fwalk_sglue>:
 8005f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f74:	4607      	mov	r7, r0
 8005f76:	4688      	mov	r8, r1
 8005f78:	4614      	mov	r4, r2
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f80:	f1b9 0901 	subs.w	r9, r9, #1
 8005f84:	d505      	bpl.n	8005f92 <_fwalk_sglue+0x22>
 8005f86:	6824      	ldr	r4, [r4, #0]
 8005f88:	2c00      	cmp	r4, #0
 8005f8a:	d1f7      	bne.n	8005f7c <_fwalk_sglue+0xc>
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f92:	89ab      	ldrh	r3, [r5, #12]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d907      	bls.n	8005fa8 <_fwalk_sglue+0x38>
 8005f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	d003      	beq.n	8005fa8 <_fwalk_sglue+0x38>
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	47c0      	blx	r8
 8005fa6:	4306      	orrs	r6, r0
 8005fa8:	3568      	adds	r5, #104	@ 0x68
 8005faa:	e7e9      	b.n	8005f80 <_fwalk_sglue+0x10>

08005fac <_puts_r>:
 8005fac:	6a03      	ldr	r3, [r0, #32]
 8005fae:	b570      	push	{r4, r5, r6, lr}
 8005fb0:	6884      	ldr	r4, [r0, #8]
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	460e      	mov	r6, r1
 8005fb6:	b90b      	cbnz	r3, 8005fbc <_puts_r+0x10>
 8005fb8:	f7ff ffc2 	bl	8005f40 <__sinit>
 8005fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fbe:	07db      	lsls	r3, r3, #31
 8005fc0:	d405      	bmi.n	8005fce <_puts_r+0x22>
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	0598      	lsls	r0, r3, #22
 8005fc6:	d402      	bmi.n	8005fce <_puts_r+0x22>
 8005fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fca:	f000 f99e 	bl	800630a <__retarget_lock_acquire_recursive>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	0719      	lsls	r1, r3, #28
 8005fd2:	d502      	bpl.n	8005fda <_puts_r+0x2e>
 8005fd4:	6923      	ldr	r3, [r4, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d135      	bne.n	8006046 <_puts_r+0x9a>
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 f8c5 	bl	800616c <__swsetup_r>
 8005fe2:	b380      	cbz	r0, 8006046 <_puts_r+0x9a>
 8005fe4:	f04f 35ff 	mov.w	r5, #4294967295
 8005fe8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fea:	07da      	lsls	r2, r3, #31
 8005fec:	d405      	bmi.n	8005ffa <_puts_r+0x4e>
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	059b      	lsls	r3, r3, #22
 8005ff2:	d402      	bmi.n	8005ffa <_puts_r+0x4e>
 8005ff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ff6:	f000 f989 	bl	800630c <__retarget_lock_release_recursive>
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	da04      	bge.n	800600c <_puts_r+0x60>
 8006002:	69a2      	ldr	r2, [r4, #24]
 8006004:	429a      	cmp	r2, r3
 8006006:	dc17      	bgt.n	8006038 <_puts_r+0x8c>
 8006008:	290a      	cmp	r1, #10
 800600a:	d015      	beq.n	8006038 <_puts_r+0x8c>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	6022      	str	r2, [r4, #0]
 8006012:	7019      	strb	r1, [r3, #0]
 8006014:	68a3      	ldr	r3, [r4, #8]
 8006016:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800601a:	3b01      	subs	r3, #1
 800601c:	60a3      	str	r3, [r4, #8]
 800601e:	2900      	cmp	r1, #0
 8006020:	d1ed      	bne.n	8005ffe <_puts_r+0x52>
 8006022:	2b00      	cmp	r3, #0
 8006024:	da11      	bge.n	800604a <_puts_r+0x9e>
 8006026:	4622      	mov	r2, r4
 8006028:	210a      	movs	r1, #10
 800602a:	4628      	mov	r0, r5
 800602c:	f000 f85f 	bl	80060ee <__swbuf_r>
 8006030:	3001      	adds	r0, #1
 8006032:	d0d7      	beq.n	8005fe4 <_puts_r+0x38>
 8006034:	250a      	movs	r5, #10
 8006036:	e7d7      	b.n	8005fe8 <_puts_r+0x3c>
 8006038:	4622      	mov	r2, r4
 800603a:	4628      	mov	r0, r5
 800603c:	f000 f857 	bl	80060ee <__swbuf_r>
 8006040:	3001      	adds	r0, #1
 8006042:	d1e7      	bne.n	8006014 <_puts_r+0x68>
 8006044:	e7ce      	b.n	8005fe4 <_puts_r+0x38>
 8006046:	3e01      	subs	r6, #1
 8006048:	e7e4      	b.n	8006014 <_puts_r+0x68>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	6022      	str	r2, [r4, #0]
 8006050:	220a      	movs	r2, #10
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	e7ee      	b.n	8006034 <_puts_r+0x88>
	...

08006058 <puts>:
 8006058:	4b02      	ldr	r3, [pc, #8]	@ (8006064 <puts+0xc>)
 800605a:	4601      	mov	r1, r0
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	f7ff bfa5 	b.w	8005fac <_puts_r>
 8006062:	bf00      	nop
 8006064:	20000018 	.word	0x20000018

08006068 <__sread>:
 8006068:	b510      	push	{r4, lr}
 800606a:	460c      	mov	r4, r1
 800606c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006070:	f000 f8fc 	bl	800626c <_read_r>
 8006074:	2800      	cmp	r0, #0
 8006076:	bfab      	itete	ge
 8006078:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800607a:	89a3      	ldrhlt	r3, [r4, #12]
 800607c:	181b      	addge	r3, r3, r0
 800607e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006082:	bfac      	ite	ge
 8006084:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006086:	81a3      	strhlt	r3, [r4, #12]
 8006088:	bd10      	pop	{r4, pc}

0800608a <__swrite>:
 800608a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800608e:	461f      	mov	r7, r3
 8006090:	898b      	ldrh	r3, [r1, #12]
 8006092:	05db      	lsls	r3, r3, #23
 8006094:	4605      	mov	r5, r0
 8006096:	460c      	mov	r4, r1
 8006098:	4616      	mov	r6, r2
 800609a:	d505      	bpl.n	80060a8 <__swrite+0x1e>
 800609c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a0:	2302      	movs	r3, #2
 80060a2:	2200      	movs	r2, #0
 80060a4:	f000 f8d0 	bl	8006248 <_lseek_r>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	4632      	mov	r2, r6
 80060b6:	463b      	mov	r3, r7
 80060b8:	4628      	mov	r0, r5
 80060ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060be:	f000 b8e7 	b.w	8006290 <_write_r>

080060c2 <__sseek>:
 80060c2:	b510      	push	{r4, lr}
 80060c4:	460c      	mov	r4, r1
 80060c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ca:	f000 f8bd 	bl	8006248 <_lseek_r>
 80060ce:	1c43      	adds	r3, r0, #1
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	bf15      	itete	ne
 80060d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060de:	81a3      	strheq	r3, [r4, #12]
 80060e0:	bf18      	it	ne
 80060e2:	81a3      	strhne	r3, [r4, #12]
 80060e4:	bd10      	pop	{r4, pc}

080060e6 <__sclose>:
 80060e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ea:	f000 b89d 	b.w	8006228 <_close_r>

080060ee <__swbuf_r>:
 80060ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f0:	460e      	mov	r6, r1
 80060f2:	4614      	mov	r4, r2
 80060f4:	4605      	mov	r5, r0
 80060f6:	b118      	cbz	r0, 8006100 <__swbuf_r+0x12>
 80060f8:	6a03      	ldr	r3, [r0, #32]
 80060fa:	b90b      	cbnz	r3, 8006100 <__swbuf_r+0x12>
 80060fc:	f7ff ff20 	bl	8005f40 <__sinit>
 8006100:	69a3      	ldr	r3, [r4, #24]
 8006102:	60a3      	str	r3, [r4, #8]
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	071a      	lsls	r2, r3, #28
 8006108:	d501      	bpl.n	800610e <__swbuf_r+0x20>
 800610a:	6923      	ldr	r3, [r4, #16]
 800610c:	b943      	cbnz	r3, 8006120 <__swbuf_r+0x32>
 800610e:	4621      	mov	r1, r4
 8006110:	4628      	mov	r0, r5
 8006112:	f000 f82b 	bl	800616c <__swsetup_r>
 8006116:	b118      	cbz	r0, 8006120 <__swbuf_r+0x32>
 8006118:	f04f 37ff 	mov.w	r7, #4294967295
 800611c:	4638      	mov	r0, r7
 800611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	6922      	ldr	r2, [r4, #16]
 8006124:	1a98      	subs	r0, r3, r2
 8006126:	6963      	ldr	r3, [r4, #20]
 8006128:	b2f6      	uxtb	r6, r6
 800612a:	4283      	cmp	r3, r0
 800612c:	4637      	mov	r7, r6
 800612e:	dc05      	bgt.n	800613c <__swbuf_r+0x4e>
 8006130:	4621      	mov	r1, r4
 8006132:	4628      	mov	r0, r5
 8006134:	f000 fa68 	bl	8006608 <_fflush_r>
 8006138:	2800      	cmp	r0, #0
 800613a:	d1ed      	bne.n	8006118 <__swbuf_r+0x2a>
 800613c:	68a3      	ldr	r3, [r4, #8]
 800613e:	3b01      	subs	r3, #1
 8006140:	60a3      	str	r3, [r4, #8]
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	6022      	str	r2, [r4, #0]
 8006148:	701e      	strb	r6, [r3, #0]
 800614a:	6962      	ldr	r2, [r4, #20]
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	429a      	cmp	r2, r3
 8006150:	d004      	beq.n	800615c <__swbuf_r+0x6e>
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	07db      	lsls	r3, r3, #31
 8006156:	d5e1      	bpl.n	800611c <__swbuf_r+0x2e>
 8006158:	2e0a      	cmp	r6, #10
 800615a:	d1df      	bne.n	800611c <__swbuf_r+0x2e>
 800615c:	4621      	mov	r1, r4
 800615e:	4628      	mov	r0, r5
 8006160:	f000 fa52 	bl	8006608 <_fflush_r>
 8006164:	2800      	cmp	r0, #0
 8006166:	d0d9      	beq.n	800611c <__swbuf_r+0x2e>
 8006168:	e7d6      	b.n	8006118 <__swbuf_r+0x2a>
	...

0800616c <__swsetup_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4b29      	ldr	r3, [pc, #164]	@ (8006214 <__swsetup_r+0xa8>)
 8006170:	4605      	mov	r5, r0
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	460c      	mov	r4, r1
 8006176:	b118      	cbz	r0, 8006180 <__swsetup_r+0x14>
 8006178:	6a03      	ldr	r3, [r0, #32]
 800617a:	b90b      	cbnz	r3, 8006180 <__swsetup_r+0x14>
 800617c:	f7ff fee0 	bl	8005f40 <__sinit>
 8006180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006184:	0719      	lsls	r1, r3, #28
 8006186:	d422      	bmi.n	80061ce <__swsetup_r+0x62>
 8006188:	06da      	lsls	r2, r3, #27
 800618a:	d407      	bmi.n	800619c <__swsetup_r+0x30>
 800618c:	2209      	movs	r2, #9
 800618e:	602a      	str	r2, [r5, #0]
 8006190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006194:	81a3      	strh	r3, [r4, #12]
 8006196:	f04f 30ff 	mov.w	r0, #4294967295
 800619a:	e033      	b.n	8006204 <__swsetup_r+0x98>
 800619c:	0758      	lsls	r0, r3, #29
 800619e:	d512      	bpl.n	80061c6 <__swsetup_r+0x5a>
 80061a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061a2:	b141      	cbz	r1, 80061b6 <__swsetup_r+0x4a>
 80061a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061a8:	4299      	cmp	r1, r3
 80061aa:	d002      	beq.n	80061b2 <__swsetup_r+0x46>
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 f8af 	bl	8006310 <_free_r>
 80061b2:	2300      	movs	r3, #0
 80061b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	2300      	movs	r3, #0
 80061c0:	6063      	str	r3, [r4, #4]
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	f043 0308 	orr.w	r3, r3, #8
 80061cc:	81a3      	strh	r3, [r4, #12]
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	b94b      	cbnz	r3, 80061e6 <__swsetup_r+0x7a>
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061dc:	d003      	beq.n	80061e6 <__swsetup_r+0x7a>
 80061de:	4621      	mov	r1, r4
 80061e0:	4628      	mov	r0, r5
 80061e2:	f000 fa5f 	bl	80066a4 <__smakebuf_r>
 80061e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ea:	f013 0201 	ands.w	r2, r3, #1
 80061ee:	d00a      	beq.n	8006206 <__swsetup_r+0x9a>
 80061f0:	2200      	movs	r2, #0
 80061f2:	60a2      	str	r2, [r4, #8]
 80061f4:	6962      	ldr	r2, [r4, #20]
 80061f6:	4252      	negs	r2, r2
 80061f8:	61a2      	str	r2, [r4, #24]
 80061fa:	6922      	ldr	r2, [r4, #16]
 80061fc:	b942      	cbnz	r2, 8006210 <__swsetup_r+0xa4>
 80061fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006202:	d1c5      	bne.n	8006190 <__swsetup_r+0x24>
 8006204:	bd38      	pop	{r3, r4, r5, pc}
 8006206:	0799      	lsls	r1, r3, #30
 8006208:	bf58      	it	pl
 800620a:	6962      	ldrpl	r2, [r4, #20]
 800620c:	60a2      	str	r2, [r4, #8]
 800620e:	e7f4      	b.n	80061fa <__swsetup_r+0x8e>
 8006210:	2000      	movs	r0, #0
 8006212:	e7f7      	b.n	8006204 <__swsetup_r+0x98>
 8006214:	20000018 	.word	0x20000018

08006218 <memset>:
 8006218:	4402      	add	r2, r0
 800621a:	4603      	mov	r3, r0
 800621c:	4293      	cmp	r3, r2
 800621e:	d100      	bne.n	8006222 <memset+0xa>
 8006220:	4770      	bx	lr
 8006222:	f803 1b01 	strb.w	r1, [r3], #1
 8006226:	e7f9      	b.n	800621c <memset+0x4>

08006228 <_close_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4d06      	ldr	r5, [pc, #24]	@ (8006244 <_close_r+0x1c>)
 800622c:	2300      	movs	r3, #0
 800622e:	4604      	mov	r4, r0
 8006230:	4608      	mov	r0, r1
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	f7fa fec1 	bl	8000fba <_close>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_close_r+0x1a>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_close_r+0x1a>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	200004a4 	.word	0x200004a4

08006248 <_lseek_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d07      	ldr	r5, [pc, #28]	@ (8006268 <_lseek_r+0x20>)
 800624c:	4604      	mov	r4, r0
 800624e:	4608      	mov	r0, r1
 8006250:	4611      	mov	r1, r2
 8006252:	2200      	movs	r2, #0
 8006254:	602a      	str	r2, [r5, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	f7fa fed6 	bl	8001008 <_lseek>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_lseek_r+0x1e>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_lseek_r+0x1e>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	200004a4 	.word	0x200004a4

0800626c <_read_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4d07      	ldr	r5, [pc, #28]	@ (800628c <_read_r+0x20>)
 8006270:	4604      	mov	r4, r0
 8006272:	4608      	mov	r0, r1
 8006274:	4611      	mov	r1, r2
 8006276:	2200      	movs	r2, #0
 8006278:	602a      	str	r2, [r5, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	f7fa fe64 	bl	8000f48 <_read>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_read_r+0x1e>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_read_r+0x1e>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	200004a4 	.word	0x200004a4

08006290 <_write_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4d07      	ldr	r5, [pc, #28]	@ (80062b0 <_write_r+0x20>)
 8006294:	4604      	mov	r4, r0
 8006296:	4608      	mov	r0, r1
 8006298:	4611      	mov	r1, r2
 800629a:	2200      	movs	r2, #0
 800629c:	602a      	str	r2, [r5, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f7fa fe6f 	bl	8000f82 <_write>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_write_r+0x1e>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_write_r+0x1e>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	200004a4 	.word	0x200004a4

080062b4 <__errno>:
 80062b4:	4b01      	ldr	r3, [pc, #4]	@ (80062bc <__errno+0x8>)
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000018 	.word	0x20000018

080062c0 <__libc_init_array>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	4d0d      	ldr	r5, [pc, #52]	@ (80062f8 <__libc_init_array+0x38>)
 80062c4:	4c0d      	ldr	r4, [pc, #52]	@ (80062fc <__libc_init_array+0x3c>)
 80062c6:	1b64      	subs	r4, r4, r5
 80062c8:	10a4      	asrs	r4, r4, #2
 80062ca:	2600      	movs	r6, #0
 80062cc:	42a6      	cmp	r6, r4
 80062ce:	d109      	bne.n	80062e4 <__libc_init_array+0x24>
 80062d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006300 <__libc_init_array+0x40>)
 80062d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006304 <__libc_init_array+0x44>)
 80062d4:	f000 fa54 	bl	8006780 <_init>
 80062d8:	1b64      	subs	r4, r4, r5
 80062da:	10a4      	asrs	r4, r4, #2
 80062dc:	2600      	movs	r6, #0
 80062de:	42a6      	cmp	r6, r4
 80062e0:	d105      	bne.n	80062ee <__libc_init_array+0x2e>
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
 80062e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e8:	4798      	blx	r3
 80062ea:	3601      	adds	r6, #1
 80062ec:	e7ee      	b.n	80062cc <__libc_init_array+0xc>
 80062ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f2:	4798      	blx	r3
 80062f4:	3601      	adds	r6, #1
 80062f6:	e7f2      	b.n	80062de <__libc_init_array+0x1e>
 80062f8:	08006818 	.word	0x08006818
 80062fc:	08006818 	.word	0x08006818
 8006300:	08006818 	.word	0x08006818
 8006304:	0800681c 	.word	0x0800681c

08006308 <__retarget_lock_init_recursive>:
 8006308:	4770      	bx	lr

0800630a <__retarget_lock_acquire_recursive>:
 800630a:	4770      	bx	lr

0800630c <__retarget_lock_release_recursive>:
 800630c:	4770      	bx	lr
	...

08006310 <_free_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4605      	mov	r5, r0
 8006314:	2900      	cmp	r1, #0
 8006316:	d041      	beq.n	800639c <_free_r+0x8c>
 8006318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800631c:	1f0c      	subs	r4, r1, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	bfb8      	it	lt
 8006322:	18e4      	addlt	r4, r4, r3
 8006324:	f000 f8e0 	bl	80064e8 <__malloc_lock>
 8006328:	4a1d      	ldr	r2, [pc, #116]	@ (80063a0 <_free_r+0x90>)
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	b933      	cbnz	r3, 800633c <_free_r+0x2c>
 800632e:	6063      	str	r3, [r4, #4]
 8006330:	6014      	str	r4, [r2, #0]
 8006332:	4628      	mov	r0, r5
 8006334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006338:	f000 b8dc 	b.w	80064f4 <__malloc_unlock>
 800633c:	42a3      	cmp	r3, r4
 800633e:	d908      	bls.n	8006352 <_free_r+0x42>
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	1821      	adds	r1, r4, r0
 8006344:	428b      	cmp	r3, r1
 8006346:	bf01      	itttt	eq
 8006348:	6819      	ldreq	r1, [r3, #0]
 800634a:	685b      	ldreq	r3, [r3, #4]
 800634c:	1809      	addeq	r1, r1, r0
 800634e:	6021      	streq	r1, [r4, #0]
 8006350:	e7ed      	b.n	800632e <_free_r+0x1e>
 8006352:	461a      	mov	r2, r3
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	b10b      	cbz	r3, 800635c <_free_r+0x4c>
 8006358:	42a3      	cmp	r3, r4
 800635a:	d9fa      	bls.n	8006352 <_free_r+0x42>
 800635c:	6811      	ldr	r1, [r2, #0]
 800635e:	1850      	adds	r0, r2, r1
 8006360:	42a0      	cmp	r0, r4
 8006362:	d10b      	bne.n	800637c <_free_r+0x6c>
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	4401      	add	r1, r0
 8006368:	1850      	adds	r0, r2, r1
 800636a:	4283      	cmp	r3, r0
 800636c:	6011      	str	r1, [r2, #0]
 800636e:	d1e0      	bne.n	8006332 <_free_r+0x22>
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	6053      	str	r3, [r2, #4]
 8006376:	4408      	add	r0, r1
 8006378:	6010      	str	r0, [r2, #0]
 800637a:	e7da      	b.n	8006332 <_free_r+0x22>
 800637c:	d902      	bls.n	8006384 <_free_r+0x74>
 800637e:	230c      	movs	r3, #12
 8006380:	602b      	str	r3, [r5, #0]
 8006382:	e7d6      	b.n	8006332 <_free_r+0x22>
 8006384:	6820      	ldr	r0, [r4, #0]
 8006386:	1821      	adds	r1, r4, r0
 8006388:	428b      	cmp	r3, r1
 800638a:	bf04      	itt	eq
 800638c:	6819      	ldreq	r1, [r3, #0]
 800638e:	685b      	ldreq	r3, [r3, #4]
 8006390:	6063      	str	r3, [r4, #4]
 8006392:	bf04      	itt	eq
 8006394:	1809      	addeq	r1, r1, r0
 8006396:	6021      	streq	r1, [r4, #0]
 8006398:	6054      	str	r4, [r2, #4]
 800639a:	e7ca      	b.n	8006332 <_free_r+0x22>
 800639c:	bd38      	pop	{r3, r4, r5, pc}
 800639e:	bf00      	nop
 80063a0:	200004b0 	.word	0x200004b0

080063a4 <sbrk_aligned>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	4e0f      	ldr	r6, [pc, #60]	@ (80063e4 <sbrk_aligned+0x40>)
 80063a8:	460c      	mov	r4, r1
 80063aa:	6831      	ldr	r1, [r6, #0]
 80063ac:	4605      	mov	r5, r0
 80063ae:	b911      	cbnz	r1, 80063b6 <sbrk_aligned+0x12>
 80063b0:	f000 f9d6 	bl	8006760 <_sbrk_r>
 80063b4:	6030      	str	r0, [r6, #0]
 80063b6:	4621      	mov	r1, r4
 80063b8:	4628      	mov	r0, r5
 80063ba:	f000 f9d1 	bl	8006760 <_sbrk_r>
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	d103      	bne.n	80063ca <sbrk_aligned+0x26>
 80063c2:	f04f 34ff 	mov.w	r4, #4294967295
 80063c6:	4620      	mov	r0, r4
 80063c8:	bd70      	pop	{r4, r5, r6, pc}
 80063ca:	1cc4      	adds	r4, r0, #3
 80063cc:	f024 0403 	bic.w	r4, r4, #3
 80063d0:	42a0      	cmp	r0, r4
 80063d2:	d0f8      	beq.n	80063c6 <sbrk_aligned+0x22>
 80063d4:	1a21      	subs	r1, r4, r0
 80063d6:	4628      	mov	r0, r5
 80063d8:	f000 f9c2 	bl	8006760 <_sbrk_r>
 80063dc:	3001      	adds	r0, #1
 80063de:	d1f2      	bne.n	80063c6 <sbrk_aligned+0x22>
 80063e0:	e7ef      	b.n	80063c2 <sbrk_aligned+0x1e>
 80063e2:	bf00      	nop
 80063e4:	200004ac 	.word	0x200004ac

080063e8 <_malloc_r>:
 80063e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ec:	1ccd      	adds	r5, r1, #3
 80063ee:	f025 0503 	bic.w	r5, r5, #3
 80063f2:	3508      	adds	r5, #8
 80063f4:	2d0c      	cmp	r5, #12
 80063f6:	bf38      	it	cc
 80063f8:	250c      	movcc	r5, #12
 80063fa:	2d00      	cmp	r5, #0
 80063fc:	4606      	mov	r6, r0
 80063fe:	db01      	blt.n	8006404 <_malloc_r+0x1c>
 8006400:	42a9      	cmp	r1, r5
 8006402:	d904      	bls.n	800640e <_malloc_r+0x26>
 8006404:	230c      	movs	r3, #12
 8006406:	6033      	str	r3, [r6, #0]
 8006408:	2000      	movs	r0, #0
 800640a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800640e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064e4 <_malloc_r+0xfc>
 8006412:	f000 f869 	bl	80064e8 <__malloc_lock>
 8006416:	f8d8 3000 	ldr.w	r3, [r8]
 800641a:	461c      	mov	r4, r3
 800641c:	bb44      	cbnz	r4, 8006470 <_malloc_r+0x88>
 800641e:	4629      	mov	r1, r5
 8006420:	4630      	mov	r0, r6
 8006422:	f7ff ffbf 	bl	80063a4 <sbrk_aligned>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	4604      	mov	r4, r0
 800642a:	d158      	bne.n	80064de <_malloc_r+0xf6>
 800642c:	f8d8 4000 	ldr.w	r4, [r8]
 8006430:	4627      	mov	r7, r4
 8006432:	2f00      	cmp	r7, #0
 8006434:	d143      	bne.n	80064be <_malloc_r+0xd6>
 8006436:	2c00      	cmp	r4, #0
 8006438:	d04b      	beq.n	80064d2 <_malloc_r+0xea>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	4639      	mov	r1, r7
 800643e:	4630      	mov	r0, r6
 8006440:	eb04 0903 	add.w	r9, r4, r3
 8006444:	f000 f98c 	bl	8006760 <_sbrk_r>
 8006448:	4581      	cmp	r9, r0
 800644a:	d142      	bne.n	80064d2 <_malloc_r+0xea>
 800644c:	6821      	ldr	r1, [r4, #0]
 800644e:	1a6d      	subs	r5, r5, r1
 8006450:	4629      	mov	r1, r5
 8006452:	4630      	mov	r0, r6
 8006454:	f7ff ffa6 	bl	80063a4 <sbrk_aligned>
 8006458:	3001      	adds	r0, #1
 800645a:	d03a      	beq.n	80064d2 <_malloc_r+0xea>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	442b      	add	r3, r5
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	f8d8 3000 	ldr.w	r3, [r8]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	bb62      	cbnz	r2, 80064c4 <_malloc_r+0xdc>
 800646a:	f8c8 7000 	str.w	r7, [r8]
 800646e:	e00f      	b.n	8006490 <_malloc_r+0xa8>
 8006470:	6822      	ldr	r2, [r4, #0]
 8006472:	1b52      	subs	r2, r2, r5
 8006474:	d420      	bmi.n	80064b8 <_malloc_r+0xd0>
 8006476:	2a0b      	cmp	r2, #11
 8006478:	d917      	bls.n	80064aa <_malloc_r+0xc2>
 800647a:	1961      	adds	r1, r4, r5
 800647c:	42a3      	cmp	r3, r4
 800647e:	6025      	str	r5, [r4, #0]
 8006480:	bf18      	it	ne
 8006482:	6059      	strne	r1, [r3, #4]
 8006484:	6863      	ldr	r3, [r4, #4]
 8006486:	bf08      	it	eq
 8006488:	f8c8 1000 	streq.w	r1, [r8]
 800648c:	5162      	str	r2, [r4, r5]
 800648e:	604b      	str	r3, [r1, #4]
 8006490:	4630      	mov	r0, r6
 8006492:	f000 f82f 	bl	80064f4 <__malloc_unlock>
 8006496:	f104 000b 	add.w	r0, r4, #11
 800649a:	1d23      	adds	r3, r4, #4
 800649c:	f020 0007 	bic.w	r0, r0, #7
 80064a0:	1ac2      	subs	r2, r0, r3
 80064a2:	bf1c      	itt	ne
 80064a4:	1a1b      	subne	r3, r3, r0
 80064a6:	50a3      	strne	r3, [r4, r2]
 80064a8:	e7af      	b.n	800640a <_malloc_r+0x22>
 80064aa:	6862      	ldr	r2, [r4, #4]
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	bf0c      	ite	eq
 80064b0:	f8c8 2000 	streq.w	r2, [r8]
 80064b4:	605a      	strne	r2, [r3, #4]
 80064b6:	e7eb      	b.n	8006490 <_malloc_r+0xa8>
 80064b8:	4623      	mov	r3, r4
 80064ba:	6864      	ldr	r4, [r4, #4]
 80064bc:	e7ae      	b.n	800641c <_malloc_r+0x34>
 80064be:	463c      	mov	r4, r7
 80064c0:	687f      	ldr	r7, [r7, #4]
 80064c2:	e7b6      	b.n	8006432 <_malloc_r+0x4a>
 80064c4:	461a      	mov	r2, r3
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	42a3      	cmp	r3, r4
 80064ca:	d1fb      	bne.n	80064c4 <_malloc_r+0xdc>
 80064cc:	2300      	movs	r3, #0
 80064ce:	6053      	str	r3, [r2, #4]
 80064d0:	e7de      	b.n	8006490 <_malloc_r+0xa8>
 80064d2:	230c      	movs	r3, #12
 80064d4:	6033      	str	r3, [r6, #0]
 80064d6:	4630      	mov	r0, r6
 80064d8:	f000 f80c 	bl	80064f4 <__malloc_unlock>
 80064dc:	e794      	b.n	8006408 <_malloc_r+0x20>
 80064de:	6005      	str	r5, [r0, #0]
 80064e0:	e7d6      	b.n	8006490 <_malloc_r+0xa8>
 80064e2:	bf00      	nop
 80064e4:	200004b0 	.word	0x200004b0

080064e8 <__malloc_lock>:
 80064e8:	4801      	ldr	r0, [pc, #4]	@ (80064f0 <__malloc_lock+0x8>)
 80064ea:	f7ff bf0e 	b.w	800630a <__retarget_lock_acquire_recursive>
 80064ee:	bf00      	nop
 80064f0:	200004a8 	.word	0x200004a8

080064f4 <__malloc_unlock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	@ (80064fc <__malloc_unlock+0x8>)
 80064f6:	f7ff bf09 	b.w	800630c <__retarget_lock_release_recursive>
 80064fa:	bf00      	nop
 80064fc:	200004a8 	.word	0x200004a8

08006500 <__sflush_r>:
 8006500:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006508:	0716      	lsls	r6, r2, #28
 800650a:	4605      	mov	r5, r0
 800650c:	460c      	mov	r4, r1
 800650e:	d454      	bmi.n	80065ba <__sflush_r+0xba>
 8006510:	684b      	ldr	r3, [r1, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	dc02      	bgt.n	800651c <__sflush_r+0x1c>
 8006516:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	dd48      	ble.n	80065ae <__sflush_r+0xae>
 800651c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800651e:	2e00      	cmp	r6, #0
 8006520:	d045      	beq.n	80065ae <__sflush_r+0xae>
 8006522:	2300      	movs	r3, #0
 8006524:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006528:	682f      	ldr	r7, [r5, #0]
 800652a:	6a21      	ldr	r1, [r4, #32]
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	d030      	beq.n	8006592 <__sflush_r+0x92>
 8006530:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	0759      	lsls	r1, r3, #29
 8006536:	d505      	bpl.n	8006544 <__sflush_r+0x44>
 8006538:	6863      	ldr	r3, [r4, #4]
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800653e:	b10b      	cbz	r3, 8006544 <__sflush_r+0x44>
 8006540:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006542:	1ad2      	subs	r2, r2, r3
 8006544:	2300      	movs	r3, #0
 8006546:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006548:	6a21      	ldr	r1, [r4, #32]
 800654a:	4628      	mov	r0, r5
 800654c:	47b0      	blx	r6
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	d106      	bne.n	8006562 <__sflush_r+0x62>
 8006554:	6829      	ldr	r1, [r5, #0]
 8006556:	291d      	cmp	r1, #29
 8006558:	d82b      	bhi.n	80065b2 <__sflush_r+0xb2>
 800655a:	4a2a      	ldr	r2, [pc, #168]	@ (8006604 <__sflush_r+0x104>)
 800655c:	410a      	asrs	r2, r1
 800655e:	07d6      	lsls	r6, r2, #31
 8006560:	d427      	bmi.n	80065b2 <__sflush_r+0xb2>
 8006562:	2200      	movs	r2, #0
 8006564:	6062      	str	r2, [r4, #4]
 8006566:	04d9      	lsls	r1, r3, #19
 8006568:	6922      	ldr	r2, [r4, #16]
 800656a:	6022      	str	r2, [r4, #0]
 800656c:	d504      	bpl.n	8006578 <__sflush_r+0x78>
 800656e:	1c42      	adds	r2, r0, #1
 8006570:	d101      	bne.n	8006576 <__sflush_r+0x76>
 8006572:	682b      	ldr	r3, [r5, #0]
 8006574:	b903      	cbnz	r3, 8006578 <__sflush_r+0x78>
 8006576:	6560      	str	r0, [r4, #84]	@ 0x54
 8006578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800657a:	602f      	str	r7, [r5, #0]
 800657c:	b1b9      	cbz	r1, 80065ae <__sflush_r+0xae>
 800657e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006582:	4299      	cmp	r1, r3
 8006584:	d002      	beq.n	800658c <__sflush_r+0x8c>
 8006586:	4628      	mov	r0, r5
 8006588:	f7ff fec2 	bl	8006310 <_free_r>
 800658c:	2300      	movs	r3, #0
 800658e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006590:	e00d      	b.n	80065ae <__sflush_r+0xae>
 8006592:	2301      	movs	r3, #1
 8006594:	4628      	mov	r0, r5
 8006596:	47b0      	blx	r6
 8006598:	4602      	mov	r2, r0
 800659a:	1c50      	adds	r0, r2, #1
 800659c:	d1c9      	bne.n	8006532 <__sflush_r+0x32>
 800659e:	682b      	ldr	r3, [r5, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0c6      	beq.n	8006532 <__sflush_r+0x32>
 80065a4:	2b1d      	cmp	r3, #29
 80065a6:	d001      	beq.n	80065ac <__sflush_r+0xac>
 80065a8:	2b16      	cmp	r3, #22
 80065aa:	d11e      	bne.n	80065ea <__sflush_r+0xea>
 80065ac:	602f      	str	r7, [r5, #0]
 80065ae:	2000      	movs	r0, #0
 80065b0:	e022      	b.n	80065f8 <__sflush_r+0xf8>
 80065b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b6:	b21b      	sxth	r3, r3
 80065b8:	e01b      	b.n	80065f2 <__sflush_r+0xf2>
 80065ba:	690f      	ldr	r7, [r1, #16]
 80065bc:	2f00      	cmp	r7, #0
 80065be:	d0f6      	beq.n	80065ae <__sflush_r+0xae>
 80065c0:	0793      	lsls	r3, r2, #30
 80065c2:	680e      	ldr	r6, [r1, #0]
 80065c4:	bf08      	it	eq
 80065c6:	694b      	ldreq	r3, [r1, #20]
 80065c8:	600f      	str	r7, [r1, #0]
 80065ca:	bf18      	it	ne
 80065cc:	2300      	movne	r3, #0
 80065ce:	eba6 0807 	sub.w	r8, r6, r7
 80065d2:	608b      	str	r3, [r1, #8]
 80065d4:	f1b8 0f00 	cmp.w	r8, #0
 80065d8:	dde9      	ble.n	80065ae <__sflush_r+0xae>
 80065da:	6a21      	ldr	r1, [r4, #32]
 80065dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065de:	4643      	mov	r3, r8
 80065e0:	463a      	mov	r2, r7
 80065e2:	4628      	mov	r0, r5
 80065e4:	47b0      	blx	r6
 80065e6:	2800      	cmp	r0, #0
 80065e8:	dc08      	bgt.n	80065fc <__sflush_r+0xfc>
 80065ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065f2:	81a3      	strh	r3, [r4, #12]
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065fc:	4407      	add	r7, r0
 80065fe:	eba8 0800 	sub.w	r8, r8, r0
 8006602:	e7e7      	b.n	80065d4 <__sflush_r+0xd4>
 8006604:	dfbffffe 	.word	0xdfbffffe

08006608 <_fflush_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	690b      	ldr	r3, [r1, #16]
 800660c:	4605      	mov	r5, r0
 800660e:	460c      	mov	r4, r1
 8006610:	b913      	cbnz	r3, 8006618 <_fflush_r+0x10>
 8006612:	2500      	movs	r5, #0
 8006614:	4628      	mov	r0, r5
 8006616:	bd38      	pop	{r3, r4, r5, pc}
 8006618:	b118      	cbz	r0, 8006622 <_fflush_r+0x1a>
 800661a:	6a03      	ldr	r3, [r0, #32]
 800661c:	b90b      	cbnz	r3, 8006622 <_fflush_r+0x1a>
 800661e:	f7ff fc8f 	bl	8005f40 <__sinit>
 8006622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0f3      	beq.n	8006612 <_fflush_r+0xa>
 800662a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800662c:	07d0      	lsls	r0, r2, #31
 800662e:	d404      	bmi.n	800663a <_fflush_r+0x32>
 8006630:	0599      	lsls	r1, r3, #22
 8006632:	d402      	bmi.n	800663a <_fflush_r+0x32>
 8006634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006636:	f7ff fe68 	bl	800630a <__retarget_lock_acquire_recursive>
 800663a:	4628      	mov	r0, r5
 800663c:	4621      	mov	r1, r4
 800663e:	f7ff ff5f 	bl	8006500 <__sflush_r>
 8006642:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006644:	07da      	lsls	r2, r3, #31
 8006646:	4605      	mov	r5, r0
 8006648:	d4e4      	bmi.n	8006614 <_fflush_r+0xc>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	059b      	lsls	r3, r3, #22
 800664e:	d4e1      	bmi.n	8006614 <_fflush_r+0xc>
 8006650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006652:	f7ff fe5b 	bl	800630c <__retarget_lock_release_recursive>
 8006656:	e7dd      	b.n	8006614 <_fflush_r+0xc>

08006658 <__swhatbuf_r>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	460c      	mov	r4, r1
 800665c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006660:	2900      	cmp	r1, #0
 8006662:	b096      	sub	sp, #88	@ 0x58
 8006664:	4615      	mov	r5, r2
 8006666:	461e      	mov	r6, r3
 8006668:	da0d      	bge.n	8006686 <__swhatbuf_r+0x2e>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006670:	f04f 0100 	mov.w	r1, #0
 8006674:	bf14      	ite	ne
 8006676:	2340      	movne	r3, #64	@ 0x40
 8006678:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800667c:	2000      	movs	r0, #0
 800667e:	6031      	str	r1, [r6, #0]
 8006680:	602b      	str	r3, [r5, #0]
 8006682:	b016      	add	sp, #88	@ 0x58
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	466a      	mov	r2, sp
 8006688:	f000 f848 	bl	800671c <_fstat_r>
 800668c:	2800      	cmp	r0, #0
 800668e:	dbec      	blt.n	800666a <__swhatbuf_r+0x12>
 8006690:	9901      	ldr	r1, [sp, #4]
 8006692:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006696:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800669a:	4259      	negs	r1, r3
 800669c:	4159      	adcs	r1, r3
 800669e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066a2:	e7eb      	b.n	800667c <__swhatbuf_r+0x24>

080066a4 <__smakebuf_r>:
 80066a4:	898b      	ldrh	r3, [r1, #12]
 80066a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066a8:	079d      	lsls	r5, r3, #30
 80066aa:	4606      	mov	r6, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	d507      	bpl.n	80066c0 <__smakebuf_r+0x1c>
 80066b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	2301      	movs	r3, #1
 80066ba:	6163      	str	r3, [r4, #20]
 80066bc:	b003      	add	sp, #12
 80066be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c0:	ab01      	add	r3, sp, #4
 80066c2:	466a      	mov	r2, sp
 80066c4:	f7ff ffc8 	bl	8006658 <__swhatbuf_r>
 80066c8:	9f00      	ldr	r7, [sp, #0]
 80066ca:	4605      	mov	r5, r0
 80066cc:	4639      	mov	r1, r7
 80066ce:	4630      	mov	r0, r6
 80066d0:	f7ff fe8a 	bl	80063e8 <_malloc_r>
 80066d4:	b948      	cbnz	r0, 80066ea <__smakebuf_r+0x46>
 80066d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066da:	059a      	lsls	r2, r3, #22
 80066dc:	d4ee      	bmi.n	80066bc <__smakebuf_r+0x18>
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	f043 0302 	orr.w	r3, r3, #2
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	e7e2      	b.n	80066b0 <__smakebuf_r+0xc>
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	6020      	str	r0, [r4, #0]
 80066ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f2:	81a3      	strh	r3, [r4, #12]
 80066f4:	9b01      	ldr	r3, [sp, #4]
 80066f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066fa:	b15b      	cbz	r3, 8006714 <__smakebuf_r+0x70>
 80066fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006700:	4630      	mov	r0, r6
 8006702:	f000 f81d 	bl	8006740 <_isatty_r>
 8006706:	b128      	cbz	r0, 8006714 <__smakebuf_r+0x70>
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	f023 0303 	bic.w	r3, r3, #3
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	81a3      	strh	r3, [r4, #12]
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	431d      	orrs	r5, r3
 8006718:	81a5      	strh	r5, [r4, #12]
 800671a:	e7cf      	b.n	80066bc <__smakebuf_r+0x18>

0800671c <_fstat_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d07      	ldr	r5, [pc, #28]	@ (800673c <_fstat_r+0x20>)
 8006720:	2300      	movs	r3, #0
 8006722:	4604      	mov	r4, r0
 8006724:	4608      	mov	r0, r1
 8006726:	4611      	mov	r1, r2
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	f7fa fc52 	bl	8000fd2 <_fstat>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	d102      	bne.n	8006738 <_fstat_r+0x1c>
 8006732:	682b      	ldr	r3, [r5, #0]
 8006734:	b103      	cbz	r3, 8006738 <_fstat_r+0x1c>
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	bd38      	pop	{r3, r4, r5, pc}
 800673a:	bf00      	nop
 800673c:	200004a4 	.word	0x200004a4

08006740 <_isatty_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4d06      	ldr	r5, [pc, #24]	@ (800675c <_isatty_r+0x1c>)
 8006744:	2300      	movs	r3, #0
 8006746:	4604      	mov	r4, r0
 8006748:	4608      	mov	r0, r1
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	f7fa fc51 	bl	8000ff2 <_isatty>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_isatty_r+0x1a>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_isatty_r+0x1a>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	200004a4 	.word	0x200004a4

08006760 <_sbrk_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d06      	ldr	r5, [pc, #24]	@ (800677c <_sbrk_r+0x1c>)
 8006764:	2300      	movs	r3, #0
 8006766:	4604      	mov	r4, r0
 8006768:	4608      	mov	r0, r1
 800676a:	602b      	str	r3, [r5, #0]
 800676c:	f7fa fc5a 	bl	8001024 <_sbrk>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_sbrk_r+0x1a>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	b103      	cbz	r3, 800677a <_sbrk_r+0x1a>
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	200004a4 	.word	0x200004a4

08006780 <_init>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	bf00      	nop
 8006784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006786:	bc08      	pop	{r3}
 8006788:	469e      	mov	lr, r3
 800678a:	4770      	bx	lr

0800678c <_fini>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr
