
Systeme_a_microcontroleur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007574  08007574  00008574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007654  08007654  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007654  08007654  00008654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800765c  0800765c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800765c  0800765c  0000865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007660  08007660  00008660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007664  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000068  080076cc  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  080076cc  000094b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001269c  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026bc  00000000  00000000  0001b734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1c  00000000  00000000  0001eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c9d  00000000  00000000  0001fbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cb8  00000000  00000000  00047871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f132c  00000000  00000000  0005c529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e18  00000000  00000000  0014d898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  001526b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800755c 	.word	0x0800755c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800755c 	.word	0x0800755c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <Read_ChipID>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
HAL_StatusTypeDef Read_ChipID(uint8_t *chip_id)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af04      	add	r7, sp, #16
 8000566:	6078      	str	r0, [r7, #4]
    // - I2C_MEMADD_SIZE_16BIT : type d'adresse mémoire (16 bits)
    // - chip_id : pointeur vers la variable de réception
    // - 1 : nombre d'octets à lire
    // - 100 : délai en ms (timeout)

    status = HAL_I2C_Mem_Read(&hi2c2,
 8000568:	2364      	movs	r3, #100	@ 0x64
 800056a:	9302      	str	r3, [sp, #8]
 800056c:	2301      	movs	r3, #1
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2302      	movs	r3, #2
 8000576:	2200      	movs	r2, #0
 8000578:	2128      	movs	r1, #40	@ 0x28
 800057a:	4805      	ldr	r0, [pc, #20]	@ (8000590 <Read_ChipID+0x30>)
 800057c:	f001 fc3c 	bl	8001df8 <HAL_I2C_Mem_Read>
 8000580:	4603      	mov	r3, r0
 8000582:	73fb      	strb	r3, [r7, #15]
                              I2C_MEMADD_SIZE_16BIT,
                              chip_id,
                              1,
                              100);

    return status;
 8000584:	7bfb      	ldrb	r3, [r7, #15]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000084 	.word	0x20000084

08000594 <MCP23S17_WriteRegister>:
static void MX_SAI2_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */

/* Fonction d'écriture d'un registre */
void MCP23S17_WriteRegister(MCP23S17_HandleTypeDef *dev, uint8_t reg, uint8_t value) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
 80005a0:	4613      	mov	r3, r2
 80005a2:	70bb      	strb	r3, [r7, #2]
    uint8_t data[3] = {MCP23S17_ADDRESS, reg, value};
 80005a4:	2340      	movs	r3, #64	@ 0x40
 80005a6:	733b      	strb	r3, [r7, #12]
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	737b      	strb	r3, [r7, #13]
 80005ac:	78bb      	ldrb	r3, [r7, #2]
 80005ae:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_RESET);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6858      	ldr	r0, [r3, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	891b      	ldrh	r3, [r3, #8]
 80005b8:	2200      	movs	r2, #0
 80005ba:	4619      	mov	r1, r3
 80005bc:	f001 fb68 	bl	8001c90 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(dev->hspi, data, 3, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	f107 010c 	add.w	r1, r7, #12
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	2203      	movs	r2, #3
 80005ce:	f004 ffb1 	bl	8005534 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(dev->CS_Port, dev->CS_Pin, GPIO_PIN_SET);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6858      	ldr	r0, [r3, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	891b      	ldrh	r3, [r3, #8]
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	f001 fb57 	bl	8001c90 <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int chr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	2201      	movs	r2, #1
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <__io_putchar+0x20>)
 80005fe:	f005 fac1 	bl	8005b84 <HAL_UART_Transmit>
 return chr;
 8000602:	687b      	ldr	r3, [r7, #4]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200002d4 	.word	0x200002d4

08000610 <MCP23S17_Init>:

/* Initialisation du MCP23S17 */
void MCP23S17_Init(MCP23S17_HandleTypeDef *dev) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(dev->RST_Port, dev->RST_Pin, GPIO_PIN_RESET);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	68d8      	ldr	r0, [r3, #12]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	8a1b      	ldrh	r3, [r3, #16]
 8000620:	2200      	movs	r2, #0
 8000622:	4619      	mov	r1, r3
 8000624:	f001 fb34 	bl	8001c90 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000628:	200a      	movs	r0, #10
 800062a:	f000 fe6b 	bl	8001304 <HAL_Delay>
    HAL_GPIO_WritePin(dev->RST_Port, dev->RST_Pin, GPIO_PIN_SET);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	68d8      	ldr	r0, [r3, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	8a1b      	ldrh	r3, [r3, #16]
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	f001 fb29 	bl	8001c90 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f000 fe60 	bl	8001304 <HAL_Delay>
    MCP23S17_WriteRegister(dev, MCP23S17_IOCON, 0x08);
 8000644:	2208      	movs	r2, #8
 8000646:	210a      	movs	r1, #10
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ffa3 	bl	8000594 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(dev, MCP23S17_IODIRA, 0x00);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ff9e 	bl	8000594 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(dev, MCP23S17_IODIRB, 0x00);
 8000658:	2200      	movs	r2, #0
 800065a:	2101      	movs	r1, #1
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ff99 	bl	8000594 <MCP23S17_WriteRegister>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fdcb 	bl	800120c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f841 	bl	80006fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800067a:	f000 f890 	bl	800079e <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f9ed 	bl	8000a5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000682:	f000 f9c5 	bl	8000a10 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000686:	f000 f993 	bl	80009b0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800068a:	f000 f953 	bl	8000934 <MX_SPI3_Init>
  MX_SAI2_Init();
 800068e:	f000 f8f1 	bl	8000874 <MX_SAI2_Init>
  MX_I2C2_Init();
 8000692:	f000 f8af 	bl	80007f4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SAI_ENABLE(&hsai_BlockA2);
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <main+0x7c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <main+0x7c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80006a4:	601a      	str	r2, [r3, #0]
  printf("\r\n==== Systeme micro ====\r\n");
 80006a6:	4811      	ldr	r0, [pc, #68]	@ (80006ec <main+0x80>)
 80006a8:	f006 f8f4 	bl	8006894 <puts>

  MCP23S17_HandleTypeDef mcp23s17 = {
 80006ac:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <main+0x84>)
 80006ae:	1d3c      	adds	r4, r7, #4
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	682b      	ldr	r3, [r5, #0]
 80006b8:	6023      	str	r3, [r4, #0]
         .CS_Port = GPIOB,
         .CS_Pin = GPIO_PIN_7,
         .RST_Port = GPIOA,
         .RST_Pin = GPIO_PIN_0
     };
  MCP23S17_Init(&mcp23s17);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa7 	bl	8000610 <MCP23S17_Init>

  uint8_t chip_id_value;
  if (Read_ChipID(&chip_id_value) == HAL_OK) {
 80006c2:	1cfb      	adds	r3, r7, #3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff4b 	bl	8000560 <Read_ChipID>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d105      	bne.n	80006dc <main+0x70>
      printf("CHIP_ID = 0x%02X\n", chip_id_value);
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	4619      	mov	r1, r3
 80006d4:	4807      	ldr	r0, [pc, #28]	@ (80006f4 <main+0x88>)
 80006d6:	f006 f875 	bl	80067c4 <iprintf>
 80006da:	e003      	b.n	80006e4 <main+0x78>
  } else {
      printf("Erreur de lecture du CHIP_ID.\n");
 80006dc:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <main+0x8c>)
 80006de:	f006 f8d9 	bl	8006894 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <main+0x78>
 80006e8:	200000d8 	.word	0x200000d8
 80006ec:	08007574 	.word	0x08007574
 80006f0:	080075c4 	.word	0x080075c4
 80006f4:	08007590 	.word	0x08007590
 80006f8:	080075a4 	.word	0x080075a4

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b096      	sub	sp, #88	@ 0x58
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2244      	movs	r2, #68	@ 0x44
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f006 f9a2 	bl	8006a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000722:	f001 ff97 	bl	8002654 <HAL_PWREx_ControlVoltageScaling>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800072c:	f000 fa12 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2310      	movs	r3, #16
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000742:	2302      	movs	r3, #2
 8000744:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800074a:	230a      	movs	r3, #10
 800074c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800074e:	2307      	movs	r3, #7
 8000750:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4618      	mov	r0, r3
 8000760:	f001 ffce 	bl	8002700 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800076a:	f000 f9f3 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2303      	movs	r3, #3
 8000774:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	2104      	movs	r1, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fb96 	bl	8002eb8 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000792:	f000 f9df 	bl	8000b54 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3758      	adds	r7, #88	@ 0x58
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b0a2      	sub	sp, #136	@ 0x88
 80007a2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2288      	movs	r2, #136	@ 0x88
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f006 f952 	bl	8006a54 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80007ba:	2302      	movs	r3, #2
 80007bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 80007c2:	230d      	movs	r3, #13
 80007c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80007c6:	2311      	movs	r3, #17
 80007c8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80007d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fd90 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 80007e6:	f000 f9b5 	bl	8000b54 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3788      	adds	r7, #136	@ 0x88
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_I2C2_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <MX_I2C2_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_I2C2_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	@ (8000870 <MX_I2C2_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000804:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_I2C2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080a:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_I2C2_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_I2C2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_I2C2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_I2C2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_I2C2_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800082e:	480e      	ldr	r0, [pc, #56]	@ (8000868 <MX_I2C2_Init+0x74>)
 8000830:	f001 fa46 	bl	8001cc0 <HAL_I2C_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800083a:	f000 f98b 	bl	8000b54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	4809      	ldr	r0, [pc, #36]	@ (8000868 <MX_I2C2_Init+0x74>)
 8000842:	f001 fe61 	bl	8002508 <HAL_I2CEx_ConfigAnalogFilter>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 f982 	bl	8000b54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_I2C2_Init+0x74>)
 8000854:	f001 fea3 	bl	800259e <HAL_I2CEx_ConfigDigitalFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 f979 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000084 	.word	0x20000084
 800086c:	40005800 	.word	0x40005800
 8000870:	10d19ce4 	.word	0x10d19ce4

08000874 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000878:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <MX_SAI2_Init+0xb0>)
 800087a:	4a2b      	ldr	r2, [pc, #172]	@ (8000928 <MX_SAI2_Init+0xb4>)
 800087c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800087e:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_SAI2_Init+0xb0>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000884:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <MX_SAI2_Init+0xb0>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800088a:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_SAI2_Init+0xb0>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000890:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <MX_SAI2_Init+0xb0>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000896:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <MX_SAI2_Init+0xb0>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800089c:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <MX_SAI2_Init+0xb0>)
 800089e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80008a2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_SAI2_Init+0xb0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000924 <MX_SAI2_Init+0xb0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_SAI2_Init+0xb0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <MX_SAI2_Init+0xb0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80008bc:	2302      	movs	r3, #2
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	4818      	ldr	r0, [pc, #96]	@ (8000924 <MX_SAI2_Init+0xb0>)
 80008c4:	f004 f836 	bl	8004934 <HAL_SAI_InitProtocol>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 80008ce:	f000 f941 	bl	8000b54 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_SAI2_Init+0xb8>)
 80008d4:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <MX_SAI2_Init+0xbc>)
 80008d6:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_SAI2_Init+0xb8>)
 80008da:	2203      	movs	r2, #3
 80008dc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80008de:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_SAI2_Init+0xb8>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_SAI2_Init+0xb8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_SAI2_Init+0xb8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_SAI2_Init+0xb8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <MX_SAI2_Init+0xb8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80008fc:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_SAI2_Init+0xb8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_SAI2_Init+0xb8>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000908:	2302      	movs	r3, #2
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	4807      	ldr	r0, [pc, #28]	@ (800092c <MX_SAI2_Init+0xb8>)
 8000910:	f004 f810 	bl	8004934 <HAL_SAI_InitProtocol>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 800091a:	f000 f91b 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000d8 	.word	0x200000d8
 8000928:	40015804 	.word	0x40015804
 800092c:	2000015c 	.word	0x2000015c
 8000930:	40015824 	.word	0x40015824

08000934 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ac <MX_SPI3_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000940:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000944:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800094e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000952:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000966:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800096a:	2228      	movs	r2, #40	@ 0x28
 800096c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000982:	2207      	movs	r2, #7
 8000984:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_SPI3_Init+0x74>)
 800098e:	2208      	movs	r2, #8
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_SPI3_Init+0x74>)
 8000994:	f004 fd2b 	bl	80053ee <HAL_SPI_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 f8d9 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000270 	.word	0x20000270
 80009ac:	40003c00 	.word	0x40003c00

080009b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */



  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <MX_USART2_UART_Init+0x5c>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009f4:	f005 f878 	bl	8005ae8 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009fe:	f000 f8a9 	bl	8000b54 <Error_Handler>



  /* USER CODE END USART2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200002d4 	.word	0x200002d4
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_DMA_Init+0x48>)
 8000a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <MX_DMA_Init+0x48>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <MX_DMA_Init+0x48>)
 8000a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2010      	movs	r0, #16
 8000a34:	f000 fd65 	bl	8001502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a38:	2010      	movs	r0, #16
 8000a3a:	f000 fd7e 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2011      	movs	r0, #17
 8000a44:	f000 fd5d 	bl	8001502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a48:	2011      	movs	r0, #17
 8000a4a:	f000 fd76 	bl	800153a <HAL_NVIC_EnableIRQ>

}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b35      	ldr	r3, [pc, #212]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	4a34      	ldr	r2, [pc, #208]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7e:	4b32      	ldr	r3, [pc, #200]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	4a28      	ldr	r2, [pc, #160]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	4a22      	ldr	r2, [pc, #136]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac6:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <MX_GPIO_Init+0xec>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU_nRESET_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2121      	movs	r1, #33	@ 0x21
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f001 f8d9 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU_nCS_GPIO_Port, VU_nCS_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2180      	movs	r1, #128	@ 0x80
 8000ae2:	481a      	ldr	r0, [pc, #104]	@ (8000b4c <MX_GPIO_Init+0xf0>)
 8000ae4:	f001 f8d4 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4814      	ldr	r0, [pc, #80]	@ (8000b50 <MX_GPIO_Init+0xf4>)
 8000b00:	f000 ff1c 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : VU_nRESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VU_nRESET_Pin|LD2_Pin;
 8000b04:	2321      	movs	r3, #33	@ 0x21
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1e:	f000 ff0d 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : VU_nCS_Pin */
  GPIO_InitStruct.Pin = VU_nCS_Pin;
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VU_nCS_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_GPIO_Init+0xf0>)
 8000b3a:	f000 feff 	bl	800193c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	@ 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	48000800 	.word	0x48000800

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <Error_Handler+0x8>

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b82:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0ac      	sub	sp, #176	@ 0xb0
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2288      	movs	r2, #136	@ 0x88
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f005 ff43 	bl	8006a54 <memset>
  if(hi2c->Instance==I2C2)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a21      	ldr	r2, [pc, #132]	@ (8000c58 <HAL_I2C_MspInit+0xb0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d13b      	bne.n	8000c50 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 fb8b 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bf0:	f7ff ffb0 	bl	8000b54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <HAL_I2C_MspInit+0xb4>)
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf8:	4a18      	ldr	r2, [pc, #96]	@ (8000c5c <HAL_I2C_MspInit+0xb4>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c00:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <HAL_I2C_MspInit+0xb4>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c0c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c14:	2312      	movs	r3, #18
 8000c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c26:	2304      	movs	r3, #4
 8000c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c30:	4619      	mov	r1, r3
 8000c32:	480b      	ldr	r0, [pc, #44]	@ (8000c60 <HAL_I2C_MspInit+0xb8>)
 8000c34:	f000 fe82 	bl	800193c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_I2C_MspInit+0xb4>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_I2C_MspInit+0xb4>)
 8000c3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c44:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <HAL_I2C_MspInit+0xb4>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000c50:	bf00      	nop
 8000c52:	37b0      	adds	r7, #176	@ 0xb0
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40005800 	.word	0x40005800
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000400 	.word	0x48000400

08000c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a25      	ldr	r2, [pc, #148]	@ (8000d18 <HAL_SPI_MspInit+0xb4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d144      	bne.n	8000d10 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <HAL_SPI_MspInit+0xb8>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8a:	4a24      	ldr	r2, [pc, #144]	@ (8000d1c <HAL_SPI_MspInit+0xb8>)
 8000c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c92:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <HAL_SPI_MspInit+0xb8>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <HAL_SPI_MspInit+0xb8>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d1c <HAL_SPI_MspInit+0xb8>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <HAL_SPI_MspInit+0xb8>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <HAL_SPI_MspInit+0xb8>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	4a18      	ldr	r2, [pc, #96]	@ (8000d1c <HAL_SPI_MspInit+0xb8>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <HAL_SPI_MspInit+0xb8>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <HAL_SPI_MspInit+0xbc>)
 8000cec:	f000 fe26 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d00:	2306      	movs	r3, #6
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <HAL_SPI_MspInit+0xc0>)
 8000d0c:	f000 fe16 	bl	800193c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	@ 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40003c00 	.word	0x40003c00
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000800 	.word	0x48000800
 8000d24:	48000400 	.word	0x48000400

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ac      	sub	sp, #176	@ 0xb0
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2288      	movs	r2, #136	@ 0x88
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f005 fe83 	bl	8006a54 <memset>
  if(huart->Instance==USART2)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a21      	ldr	r2, [pc, #132]	@ (8000dd8 <HAL_UART_MspInit+0xb0>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d13b      	bne.n	8000dd0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 facb 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d70:	f7ff fef0 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <HAL_UART_MspInit+0xb4>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d78:	4a18      	ldr	r2, [pc, #96]	@ (8000ddc <HAL_UART_MspInit+0xb4>)
 8000d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <HAL_UART_MspInit+0xb4>)
 8000d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <HAL_UART_MspInit+0xb4>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <HAL_UART_MspInit+0xb4>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d98:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <HAL_UART_MspInit+0xb4>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000da4:	230c      	movs	r3, #12
 8000da6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dcc:	f000 fdb6 	bl	800193c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dd0:	bf00      	nop
 8000dd2:	37b0      	adds	r7, #176	@ 0xb0
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a64      	ldr	r2, [pc, #400]	@ (8000f80 <HAL_SAI_MspInit+0x1a0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d15e      	bne.n	8000eb0 <HAL_SAI_MspInit+0xd0>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8000df2:	4b64      	ldr	r3, [pc, #400]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d113      	bne.n	8000e22 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000dfa:	4b63      	ldr	r3, [pc, #396]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfe:	4a62      	ldr	r2, [pc, #392]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000e00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e06:	4b60      	ldr	r3, [pc, #384]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	204b      	movs	r0, #75	@ 0x4b
 8000e18:	f000 fb73 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e1c:	204b      	movs	r0, #75	@ 0x4b
 8000e1e:	f000 fb8c 	bl	800153a <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000e22:	4b58      	ldr	r3, [pc, #352]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4a56      	ldr	r2, [pc, #344]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000e2a:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e2c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e3e:	230d      	movs	r3, #13
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4850      	ldr	r0, [pc, #320]	@ (8000f8c <HAL_SAI_MspInit+0x1ac>)
 8000e4a:	f000 fd77 	bl	800193c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000e4e:	4b50      	ldr	r3, [pc, #320]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e50:	4a50      	ldr	r2, [pc, #320]	@ (8000f94 <HAL_SAI_MspInit+0x1b4>)
 8000e52:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000e54:	4b4e      	ldr	r3, [pc, #312]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e60:	4b4b      	ldr	r3, [pc, #300]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000e66:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e68:	2280      	movs	r2, #128	@ 0x80
 8000e6a:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e6c:	4b48      	ldr	r3, [pc, #288]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e72:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e74:	4b46      	ldr	r3, [pc, #280]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e7a:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000e7c:	4b44      	ldr	r3, [pc, #272]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e7e:	2220      	movs	r2, #32
 8000e80:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b43      	ldr	r3, [pc, #268]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000e88:	4841      	ldr	r0, [pc, #260]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e8a:	f000 fb71 	bl	8001570 <HAL_DMA_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000e94:	f7ff fe5e 	bl	8000b54 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000e9c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e9e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000ea8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000eaa:	4a39      	ldr	r2, [pc, #228]	@ (8000f90 <HAL_SAI_MspInit+0x1b0>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6293      	str	r3, [r2, #40]	@ 0x28

    }
    if(hsai->Instance==SAI2_Block_B)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a38      	ldr	r2, [pc, #224]	@ (8000f98 <HAL_SAI_MspInit+0x1b8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d15e      	bne.n	8000f78 <HAL_SAI_MspInit+0x198>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8000eba:	4b32      	ldr	r3, [pc, #200]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d113      	bne.n	8000eea <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000ec2:	4b31      	ldr	r3, [pc, #196]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	4a30      	ldr	r2, [pc, #192]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000ec8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ece:	4b2e      	ldr	r3, [pc, #184]	@ (8000f88 <HAL_SAI_MspInit+0x1a8>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	204b      	movs	r0, #75	@ 0x4b
 8000ee0:	f000 fb0f 	bl	8001502 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000ee4:	204b      	movs	r0, #75	@ 0x4b
 8000ee6:	f000 fb28 	bl	800153a <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000eea:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a24      	ldr	r2, [pc, #144]	@ (8000f84 <HAL_SAI_MspInit+0x1a4>)
 8000ef2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f06:	230d      	movs	r3, #13
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4822      	ldr	r0, [pc, #136]	@ (8000f9c <HAL_SAI_MspInit+0x1bc>)
 8000f12:	f000 fd13 	bl	800193c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000f16:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f18:	4a22      	ldr	r2, [pc, #136]	@ (8000fa4 <HAL_SAI_MspInit+0x1c4>)
 8000f1a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f3a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f42:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f46:	2220      	movs	r2, #32
 8000f48:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000f50:	4813      	ldr	r0, [pc, #76]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f52:	f000 fb0d 	bl	8001570 <HAL_DMA_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000f5c:	f7ff fdfa 	bl	8000b54 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f64:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f66:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f70:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <HAL_SAI_MspInit+0x1c0>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40015804 	.word	0x40015804
 8000f84:	2000035c 	.word	0x2000035c
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	200001e0 	.word	0x200001e0
 8000f94:	4002006c 	.word	0x4002006c
 8000f98:	40015824 	.word	0x40015824
 8000f9c:	48000800 	.word	0x48000800
 8000fa0:	20000228 	.word	0x20000228
 8000fa4:	40020080 	.word	0x40020080

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <MemManage_Handler+0x4>

08000fc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffe:	f000 f961 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <DMA1_Channel6_IRQHandler+0x10>)
 800100e:	f000 fbe6 	bl	80017de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001e0 	.word	0x200001e0

0800101c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <DMA1_Channel7_IRQHandler+0x10>)
 8001022:	f000 fbdc 	bl	80017de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000228 	.word	0x20000228

08001030 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <SAI2_IRQHandler+0x14>)
 8001036:	f003 fe87 	bl	8004d48 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 800103a:	4803      	ldr	r0, [pc, #12]	@ (8001048 <SAI2_IRQHandler+0x18>)
 800103c:	f003 fe84 	bl	8004d48 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000d8 	.word	0x200000d8
 8001048:	2000015c 	.word	0x2000015c

0800104c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e00a      	b.n	8001074 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800105e:	f3af 8000 	nop.w
 8001062:	4601      	mov	r1, r0
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	b2ca      	uxtb	r2, r1
 800106c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf0      	blt.n	800105e <_read+0x12>
  }

  return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	e009      	b.n	80010ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff faa3 	bl	80005ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf1      	blt.n	8001098 <_write+0x12>
  }
  return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_close>:

int _close(int file)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010e6:	605a      	str	r2, [r3, #4]
  return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_isatty>:

int _isatty(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f005 fcca 	bl	8006af0 <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	@ (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	@ (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20018000 	.word	0x20018000
 8001188:	00000400 	.word	0x00000400
 800118c:	20000360 	.word	0x20000360
 8001190:	200004b8 	.word	0x200004b8

08001194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <SystemInit+0x20>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119e:	4a05      	ldr	r2, [pc, #20]	@ (80011b4 <SystemInit+0x20>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011bc:	f7ff ffea 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	@ (80011f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <LoopForever+0xe>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001204 <LoopForever+0x16>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e6:	f005 fc89 	bl	8006afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ea:	f7ff fa3f 	bl	800066c <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011fc:	08007664 	.word	0x08007664
  ldr r2, =_sbss
 8001200:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001204:	200004b4 	.word	0x200004b4

08001208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_2_IRQHandler>
	...

0800120c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <HAL_Init+0x3c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <HAL_Init+0x3c>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001220:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001222:	2003      	movs	r0, #3
 8001224:	f000 f962 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001228:	2000      	movs	r0, #0
 800122a:	f000 f80f 	bl	800124c <HAL_InitTick>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	e001      	b.n	800123e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800123a:	f7ff fc91 	bl	8000b60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800123e:	79fb      	ldrb	r3, [r7, #7]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40022000 	.word	0x40022000

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001258:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_InitTick+0x6c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d023      	beq.n	80012a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_InitTick+0x70>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <HAL_InitTick+0x6c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f96d 	bl	8001556 <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10f      	bne.n	80012a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d809      	bhi.n	800129c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f937 	bl	8001502 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001294:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <HAL_InitTick+0x74>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e007      	b.n	80012ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e004      	b.n	80012ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e001      	b.n	80012ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000364 	.word	0x20000364

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000364 	.word	0x20000364

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000008 	.word	0x20000008

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4907      	ldr	r1, [pc, #28]	@ (80013e8 <__NVIC_EnableIRQ+0x38>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	@ (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	@ (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	@ 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b8:	d301      	bcc.n	80014be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00f      	b.n	80014de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <SysTick_Config+0x40>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c6:	210f      	movs	r1, #15
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f7ff ff8e 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <SysTick_Config+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <SysTick_Config+0x40>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff29 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff3e 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff8e 	bl	8001440 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5d 	bl	80013ec <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff31 	bl	80013b0 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffa2 	bl	80014a8 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e098      	b.n	80016b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4b4d      	ldr	r3, [pc, #308]	@ (80016c0 <HAL_DMA_Init+0x150>)
 800158a:	429a      	cmp	r2, r3
 800158c:	d80f      	bhi.n	80015ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b4b      	ldr	r3, [pc, #300]	@ (80016c4 <HAL_DMA_Init+0x154>)
 8001596:	4413      	add	r3, r2
 8001598:	4a4b      	ldr	r2, [pc, #300]	@ (80016c8 <HAL_DMA_Init+0x158>)
 800159a:	fba2 2303 	umull	r2, r3, r2, r3
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	009a      	lsls	r2, r3, #2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a48      	ldr	r2, [pc, #288]	@ (80016cc <HAL_DMA_Init+0x15c>)
 80015aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80015ac:	e00e      	b.n	80015cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b46      	ldr	r3, [pc, #280]	@ (80016d0 <HAL_DMA_Init+0x160>)
 80015b6:	4413      	add	r3, r2
 80015b8:	4a43      	ldr	r2, [pc, #268]	@ (80016c8 <HAL_DMA_Init+0x158>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	009a      	lsls	r2, r3, #2
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a42      	ldr	r2, [pc, #264]	@ (80016d4 <HAL_DMA_Init+0x164>)
 80015ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80015e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001626:	d039      	beq.n	800169c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	4a27      	ldr	r2, [pc, #156]	@ (80016cc <HAL_DMA_Init+0x15c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d11a      	bne.n	8001668 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001632:	4b29      	ldr	r3, [pc, #164]	@ (80016d8 <HAL_DMA_Init+0x168>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	f003 031c 	and.w	r3, r3, #28
 800163e:	210f      	movs	r1, #15
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	4924      	ldr	r1, [pc, #144]	@ (80016d8 <HAL_DMA_Init+0x168>)
 8001648:	4013      	ands	r3, r2
 800164a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800164c:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <HAL_DMA_Init+0x168>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001658:	f003 031c 	and.w	r3, r3, #28
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	491d      	ldr	r1, [pc, #116]	@ (80016d8 <HAL_DMA_Init+0x168>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
 8001666:	e019      	b.n	800169c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <HAL_DMA_Init+0x16c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001670:	f003 031c 	and.w	r3, r3, #28
 8001674:	210f      	movs	r1, #15
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	4917      	ldr	r1, [pc, #92]	@ (80016dc <HAL_DMA_Init+0x16c>)
 800167e:	4013      	ands	r3, r2
 8001680:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <HAL_DMA_Init+0x16c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6859      	ldr	r1, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f003 031c 	and.w	r3, r3, #28
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	4911      	ldr	r1, [pc, #68]	@ (80016dc <HAL_DMA_Init+0x16c>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40020407 	.word	0x40020407
 80016c4:	bffdfff8 	.word	0xbffdfff8
 80016c8:	cccccccd 	.word	0xcccccccd
 80016cc:	40020000 	.word	0x40020000
 80016d0:	bffdfbf8 	.word	0xbffdfbf8
 80016d4:	40020400 	.word	0x40020400
 80016d8:	400200a8 	.word	0x400200a8
 80016dc:	400204a8 	.word	0x400204a8

080016e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d008      	beq.n	800170a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2204      	movs	r2, #4
 80016fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e022      	b.n	8001750 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 020e 	bic.w	r2, r2, #14
 8001718:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f003 021c 	and.w	r2, r3, #28
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f202 	lsl.w	r2, r1, r2
 800173c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d005      	beq.n	8001780 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2204      	movs	r2, #4
 8001778:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	e029      	b.n	80017d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 020e 	bic.w	r2, r2, #14
 800178e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a4:	f003 021c 	and.w	r2, r3, #28
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
    }
  }
  return status;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f003 031c 	and.w	r3, r3, #28
 80017fe:	2204      	movs	r2, #4
 8001800:	409a      	lsls	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d026      	beq.n	8001858 <HAL_DMA_IRQHandler+0x7a>
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d021      	beq.n	8001858 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	2b00      	cmp	r3, #0
 8001820:	d107      	bne.n	8001832 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0204 	bic.w	r2, r2, #4
 8001830:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	f003 021c 	and.w	r2, r3, #28
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	2104      	movs	r1, #4
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	2b00      	cmp	r3, #0
 800184c:	d071      	beq.n	8001932 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001856:	e06c      	b.n	8001932 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185c:	f003 031c 	and.w	r3, r3, #28
 8001860:	2202      	movs	r2, #2
 8001862:	409a      	lsls	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d02e      	beq.n	80018ca <HAL_DMA_IRQHandler+0xec>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d029      	beq.n	80018ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 020a 	bic.w	r2, r2, #10
 8001892:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a0:	f003 021c 	and.w	r2, r3, #28
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	2102      	movs	r1, #2
 80018aa:	fa01 f202 	lsl.w	r2, r1, r2
 80018ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d038      	beq.n	8001932 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018c8:	e033      	b.n	8001932 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	f003 031c 	and.w	r3, r3, #28
 80018d2:	2208      	movs	r2, #8
 80018d4:	409a      	lsls	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d02a      	beq.n	8001934 <HAL_DMA_IRQHandler+0x156>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d025      	beq.n	8001934 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 020e 	bic.w	r2, r2, #14
 80018f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fc:	f003 021c 	and.w	r2, r3, #28
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f202 	lsl.w	r2, r1, r2
 800190a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001932:	bf00      	nop
 8001934:	bf00      	nop
}
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194a:	e17f      	b.n	8001c4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8171 	beq.w	8001c46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d005      	beq.n	800197c <HAL_GPIO_Init+0x40>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d130      	bne.n	80019de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019b2:	2201      	movs	r2, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	f003 0201 	and.w	r2, r3, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d118      	bne.n	8001a1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019f0:	2201      	movs	r2, #1
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	08db      	lsrs	r3, r3, #3
 8001a06:	f003 0201 	and.w	r2, r3, #1
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d017      	beq.n	8001a58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	6939      	ldr	r1, [r7, #16]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80ac 	beq.w	8001c46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b5f      	ldr	r3, [pc, #380]	@ (8001c6c <HAL_GPIO_Init+0x330>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c6c <HAL_GPIO_Init+0x330>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001afa:	4b5c      	ldr	r3, [pc, #368]	@ (8001c6c <HAL_GPIO_Init+0x330>)
 8001afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b06:	4a5a      	ldr	r2, [pc, #360]	@ (8001c70 <HAL_GPIO_Init+0x334>)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b30:	d025      	beq.n	8001b7e <HAL_GPIO_Init+0x242>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4f      	ldr	r2, [pc, #316]	@ (8001c74 <HAL_GPIO_Init+0x338>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01f      	beq.n	8001b7a <HAL_GPIO_Init+0x23e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c78 <HAL_GPIO_Init+0x33c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d019      	beq.n	8001b76 <HAL_GPIO_Init+0x23a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4d      	ldr	r2, [pc, #308]	@ (8001c7c <HAL_GPIO_Init+0x340>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0x236>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c80 <HAL_GPIO_Init+0x344>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00d      	beq.n	8001b6e <HAL_GPIO_Init+0x232>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4b      	ldr	r2, [pc, #300]	@ (8001c84 <HAL_GPIO_Init+0x348>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0x22e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c88 <HAL_GPIO_Init+0x34c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_GPIO_Init+0x22a>
 8001b62:	2306      	movs	r3, #6
 8001b64:	e00c      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b66:	2307      	movs	r3, #7
 8001b68:	e00a      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	e008      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b6e:	2304      	movs	r3, #4
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b72:	2303      	movs	r3, #3
 8001b74:	e004      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x244>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	f002 0203 	and.w	r2, r2, #3
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b90:	4937      	ldr	r1, [pc, #220]	@ (8001c70 <HAL_GPIO_Init+0x334>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c8c <HAL_GPIO_Init+0x350>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bc2:	4a32      	ldr	r2, [pc, #200]	@ (8001c8c <HAL_GPIO_Init+0x350>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bc8:	4b30      	ldr	r3, [pc, #192]	@ (8001c8c <HAL_GPIO_Init+0x350>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bec:	4a27      	ldr	r2, [pc, #156]	@ (8001c8c <HAL_GPIO_Init+0x350>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bf2:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <HAL_GPIO_Init+0x350>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c16:	4a1d      	ldr	r2, [pc, #116]	@ (8001c8c <HAL_GPIO_Init+0x350>)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_GPIO_Init+0x350>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c40:	4a12      	ldr	r2, [pc, #72]	@ (8001c8c <HAL_GPIO_Init+0x350>)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f47f ae78 	bne.w	800194c <HAL_GPIO_Init+0x10>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	48000400 	.word	0x48000400
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	48000c00 	.word	0x48000c00
 8001c80:	48001000 	.word	0x48001000
 8001c84:	48001400 	.word	0x48001400
 8001c88:	48001800 	.word	0x48001800
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e08d      	b.n	8001dee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe ff5e 	bl	8000ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2224      	movs	r2, #36	@ 0x24
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d107      	bne.n	8001d3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	e006      	b.n	8001d48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d108      	bne.n	8001d62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	e007      	b.n	8001d72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69d9      	ldr	r1, [r3, #28]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	817b      	strh	r3, [r7, #10]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	813b      	strh	r3, [r7, #8]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	f040 80fd 	bne.w	800201a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HAL_I2C_Mem_Read+0x34>
 8001e26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0f1      	b.n	800201c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_I2C_Mem_Read+0x4e>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e0ea      	b.n	800201c <HAL_I2C_Mem_Read+0x224>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e4e:	f7ff fa4d 	bl	80012ec <HAL_GetTick>
 8001e52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2319      	movs	r3, #25
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f95b 	bl	800211c <I2C_WaitOnFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0d5      	b.n	800201c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2222      	movs	r2, #34	@ 0x22
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2240      	movs	r2, #64	@ 0x40
 8001e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a3a      	ldr	r2, [r7, #32]
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e98:	88f8      	ldrh	r0, [r7, #6]
 8001e9a:	893a      	ldrh	r2, [r7, #8]
 8001e9c:	8979      	ldrh	r1, [r7, #10]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f8bf 	bl	800202c <I2C_RequestMemoryRead>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0ad      	b.n	800201c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2bff      	cmp	r3, #255	@ 0xff
 8001ec8:	d90e      	bls.n	8001ee8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	8979      	ldrh	r1, [r7, #10]
 8001ed8:	4b52      	ldr	r3, [pc, #328]	@ (8002024 <HAL_I2C_Mem_Read+0x22c>)
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fadf 	bl	80024a4 <I2C_TransferConfig>
 8001ee6:	e00f      	b.n	8001f08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	8979      	ldrh	r1, [r7, #10]
 8001efa:	4b4a      	ldr	r3, [pc, #296]	@ (8002024 <HAL_I2C_Mem_Read+0x22c>)
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 face 	bl	80024a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2104      	movs	r1, #4
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f902 	bl	800211c <I2C_WaitOnFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e07c      	b.n	800201c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d034      	beq.n	8001fc8 <HAL_I2C_Mem_Read+0x1d0>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d130      	bne.n	8001fc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2180      	movs	r1, #128	@ 0x80
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f8d3 	bl	800211c <I2C_WaitOnFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e04d      	b.n	800201c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2bff      	cmp	r3, #255	@ 0xff
 8001f88:	d90e      	bls.n	8001fa8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	8979      	ldrh	r1, [r7, #10]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fa7f 	bl	80024a4 <I2C_TransferConfig>
 8001fa6:	e00f      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	8979      	ldrh	r1, [r7, #10]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 fa6e 	bl	80024a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d19a      	bne.n	8001f08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 f940 	bl	800225c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e01a      	b.n	800201c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2220      	movs	r2, #32
 8001fec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_I2C_Mem_Read+0x230>)
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800201a:	2302      	movs	r3, #2
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	80002400 	.word	0x80002400
 8002028:	fe00e800 	.word	0xfe00e800

0800202c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	4608      	mov	r0, r1
 8002036:	4611      	mov	r1, r2
 8002038:	461a      	mov	r2, r3
 800203a:	4603      	mov	r3, r0
 800203c:	817b      	strh	r3, [r7, #10]
 800203e:	460b      	mov	r3, r1
 8002040:	813b      	strh	r3, [r7, #8]
 8002042:	4613      	mov	r3, r2
 8002044:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	8979      	ldrh	r1, [r7, #10]
 800204c:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <I2C_RequestMemoryRead+0xa4>)
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2300      	movs	r3, #0
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 fa26 	bl	80024a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f8b6 	bl	80021ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e02c      	b.n	80020c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002072:	893b      	ldrh	r3, [r7, #8]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28
 800207c:	e015      	b.n	80020aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800207e:	893b      	ldrh	r3, [r7, #8]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	b29b      	uxth	r3, r3
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	69b9      	ldr	r1, [r7, #24]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f89c 	bl	80021ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e012      	b.n	80020c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020a0:	893b      	ldrh	r3, [r7, #8]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2200      	movs	r2, #0
 80020b2:	2140      	movs	r1, #64	@ 0x40
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f831 	bl	800211c <I2C_WaitOnFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	80002000 	.word	0x80002000

080020d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d103      	bne.n	80020f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d007      	beq.n	8002110 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	619a      	str	r2, [r3, #24]
  }
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800212c:	e03b      	b.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f8d6 	bl	80022e4 <I2C_IsErrorOccurred>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e041      	b.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d02d      	beq.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7ff f8cf 	bl	80012ec <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x44>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d122      	bne.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4013      	ands	r3, r2
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	429a      	cmp	r2, r3
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	429a      	cmp	r2, r3
 800217c:	d113      	bne.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	f043 0220 	orr.w	r2, r3, #32
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4013      	ands	r3, r2
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	bf0c      	ite	eq
 80021b6:	2301      	moveq	r3, #1
 80021b8:	2300      	movne	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d0b4      	beq.n	800212e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021da:	e033      	b.n	8002244 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f87f 	bl	80022e4 <I2C_IsErrorOccurred>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e031      	b.n	8002254 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	d025      	beq.n	8002244 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f8:	f7ff f878 	bl	80012ec <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	429a      	cmp	r2, r3
 8002206:	d302      	bcc.n	800220e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11a      	bne.n	8002244 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b02      	cmp	r3, #2
 800221a:	d013      	beq.n	8002244 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e007      	b.n	8002254 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d1c4      	bne.n	80021dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002268:	e02f      	b.n	80022ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f838 	bl	80022e4 <I2C_IsErrorOccurred>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e02d      	b.n	80022da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227e:	f7ff f835 	bl	80012ec <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	429a      	cmp	r2, r3
 800228c:	d302      	bcc.n	8002294 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11a      	bne.n	80022ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d013      	beq.n	80022ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	f043 0220 	orr.w	r2, r3, #32
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e007      	b.n	80022da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d1c8      	bne.n	800226a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	@ 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	d068      	beq.n	80023e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2210      	movs	r2, #16
 8002316:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002318:	e049      	b.n	80023ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d045      	beq.n	80023ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7fe ffe3 	bl	80012ec <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <I2C_IsErrorOccurred+0x54>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d13a      	bne.n	80023ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002342:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800234a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800235a:	d121      	bne.n	80023a0 <I2C_IsErrorOccurred+0xbc>
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002362:	d01d      	beq.n	80023a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b20      	cmp	r3, #32
 8002368:	d01a      	beq.n	80023a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002378:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800237a:	f7fe ffb7 	bl	80012ec <HAL_GetTick>
 800237e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002380:	e00e      	b.n	80023a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002382:	f7fe ffb3 	bl	80012ec <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b19      	cmp	r3, #25
 800238e:	d907      	bls.n	80023a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800239e:	e006      	b.n	80023ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d1e9      	bne.n	8002382 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d003      	beq.n	80023c4 <I2C_IsErrorOccurred+0xe0>
 80023bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0aa      	beq.n	800231a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d103      	bne.n	80023d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2220      	movs	r2, #32
 80023d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00b      	beq.n	800240c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002404:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002426:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00b      	beq.n	8002450 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002448:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01c      	beq.n	8002492 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff fe3b 	bl	80020d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <I2C_IsErrorOccurred+0x1bc>)
 800246a:	400b      	ands	r3, r1
 800246c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	431a      	orrs	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002492:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002496:	4618      	mov	r0, r3
 8002498:	3728      	adds	r7, #40	@ 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	fe00e800 	.word	0xfe00e800

080024a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	817b      	strh	r3, [r7, #10]
 80024b2:	4613      	mov	r3, r2
 80024b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024b6:	897b      	ldrh	r3, [r7, #10]
 80024b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024bc:	7a7b      	ldrb	r3, [r7, #9]
 80024be:	041b      	lsls	r3, r3, #16
 80024c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	0d5b      	lsrs	r3, r3, #21
 80024de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80024e2:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <I2C_TransferConfig+0x60>)
 80024e4:	430b      	orrs	r3, r1
 80024e6:	43db      	mvns	r3, r3
 80024e8:	ea02 0103 	and.w	r1, r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	03ff63ff 	.word	0x03ff63ff

08002508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	d138      	bne.n	8002590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002528:	2302      	movs	r3, #2
 800252a:	e032      	b.n	8002592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	@ 0x24
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800255a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d139      	bne.n	8002628 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025be:	2302      	movs	r3, #2
 80025c0:	e033      	b.n	800262a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2224      	movs	r2, #36	@ 0x24
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e000      	b.n	800262a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
  }
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800263c:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <HAL_PWREx_GetVoltageRange+0x18>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40007000 	.word	0x40007000

08002654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002662:	d130      	bne.n	80026c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002664:	4b23      	ldr	r3, [pc, #140]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800266c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002670:	d038      	beq.n	80026e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002672:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800267a:	4a1e      	ldr	r2, [pc, #120]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002680:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002682:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2232      	movs	r2, #50	@ 0x32
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	4a1b      	ldr	r2, [pc, #108]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0c9b      	lsrs	r3, r3, #18
 8002694:	3301      	adds	r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002698:	e002      	b.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3b01      	subs	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026a0:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ac:	d102      	bne.n	80026b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f2      	bne.n	800269a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b4:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c0:	d110      	bne.n	80026e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e00f      	b.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026c6:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d2:	d007      	beq.n	80026e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026d4:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026dc:	4a05      	ldr	r2, [pc, #20]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40007000 	.word	0x40007000
 80026f8:	20000000 	.word	0x20000000
 80026fc:	431bde83 	.word	0x431bde83

08002700 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e3ca      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002712:	4b97      	ldr	r3, [pc, #604]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800271c:	4b94      	ldr	r3, [pc, #592]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80e4 	beq.w	80028fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_RCC_OscConfig+0x4a>
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	f040 808b 	bne.w	8002858 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b01      	cmp	r3, #1
 8002746:	f040 8087 	bne.w	8002858 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800274a:	4b89      	ldr	r3, [pc, #548]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_RCC_OscConfig+0x62>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e3a2      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1a      	ldr	r2, [r3, #32]
 8002766:	4b82      	ldr	r3, [pc, #520]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <HAL_RCC_OscConfig+0x7c>
 8002772:	4b7f      	ldr	r3, [pc, #508]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800277a:	e005      	b.n	8002788 <HAL_RCC_OscConfig+0x88>
 800277c:	4b7c      	ldr	r3, [pc, #496]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 800277e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002788:	4293      	cmp	r3, r2
 800278a:	d223      	bcs.n	80027d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fd55 	bl	8003240 <RCC_SetFlashLatencyFromMSIRange>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e383      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a0:	4b73      	ldr	r3, [pc, #460]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a72      	ldr	r2, [pc, #456]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027a6:	f043 0308 	orr.w	r3, r3, #8
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b70      	ldr	r3, [pc, #448]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	496d      	ldr	r1, [pc, #436]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027be:	4b6c      	ldr	r3, [pc, #432]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	4968      	ldr	r1, [pc, #416]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
 80027d2:	e025      	b.n	8002820 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d4:	4b66      	ldr	r3, [pc, #408]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a65      	ldr	r2, [pc, #404]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027da:	f043 0308 	orr.w	r3, r3, #8
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b63      	ldr	r3, [pc, #396]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4960      	ldr	r1, [pc, #384]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	495b      	ldr	r1, [pc, #364]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fd15 	bl	8003240 <RCC_SetFlashLatencyFromMSIRange>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e343      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002820:	f000 fc4a 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b52      	ldr	r3, [pc, #328]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	4950      	ldr	r1, [pc, #320]	@ (8002974 <HAL_RCC_OscConfig+0x274>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
 800283c:	4a4e      	ldr	r2, [pc, #312]	@ (8002978 <HAL_RCC_OscConfig+0x278>)
 800283e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002840:	4b4e      	ldr	r3, [pc, #312]	@ (800297c <HAL_RCC_OscConfig+0x27c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fd01 	bl	800124c <HAL_InitTick>
 800284a:	4603      	mov	r3, r0
 800284c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d052      	beq.n	80028fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	e327      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d032      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002860:	4b43      	ldr	r3, [pc, #268]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a42      	ldr	r2, [pc, #264]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800286c:	f7fe fd3e 	bl	80012ec <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002874:	f7fe fd3a 	bl	80012ec <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e310      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002886:	4b3a      	ldr	r3, [pc, #232]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002892:	4b37      	ldr	r3, [pc, #220]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a36      	ldr	r2, [pc, #216]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002898:	f043 0308 	orr.w	r3, r3, #8
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4931      	ldr	r1, [pc, #196]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	492c      	ldr	r1, [pc, #176]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
 80028c4:	e01a      	b.n	80028fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a29      	ldr	r2, [pc, #164]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d2:	f7fe fd0b 	bl	80012ec <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028da:	f7fe fd07 	bl	80012ec <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e2dd      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ec:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x1da>
 80028f8:	e000      	b.n	80028fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d074      	beq.n	80029f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b08      	cmp	r3, #8
 800290c:	d005      	beq.n	800291a <HAL_RCC_OscConfig+0x21a>
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b0c      	cmp	r3, #12
 8002912:	d10e      	bne.n	8002932 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d10b      	bne.n	8002932 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291a:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d064      	beq.n	80029f0 <HAL_RCC_OscConfig+0x2f0>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d160      	bne.n	80029f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e2ba      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x24a>
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0b      	ldr	r2, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	e026      	b.n	8002998 <HAL_RCC_OscConfig+0x298>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002952:	d115      	bne.n	8002980 <HAL_RCC_OscConfig+0x280>
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a05      	ldr	r2, [pc, #20]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 800295a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b03      	ldr	r3, [pc, #12]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a02      	ldr	r2, [pc, #8]	@ (8002970 <HAL_RCC_OscConfig+0x270>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e014      	b.n	8002998 <HAL_RCC_OscConfig+0x298>
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	080075d8 	.word	0x080075d8
 8002978:	20000000 	.word	0x20000000
 800297c:	20000004 	.word	0x20000004
 8002980:	4ba0      	ldr	r3, [pc, #640]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a9f      	ldr	r2, [pc, #636]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b9d      	ldr	r3, [pc, #628]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a9c      	ldr	r2, [pc, #624]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d013      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe fca4 	bl	80012ec <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7fe fca0 	bl	80012ec <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	@ 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e276      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ba:	4b92      	ldr	r3, [pc, #584]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x2a8>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fc90 	bl	80012ec <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fe fc8c 	bl	80012ec <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	@ 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e262      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029e2:	4b88      	ldr	r3, [pc, #544]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x2d0>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d060      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_OscConfig+0x310>
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b0c      	cmp	r3, #12
 8002a08:	d119      	bne.n	8002a3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d116      	bne.n	8002a3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a10:	4b7c      	ldr	r3, [pc, #496]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_OscConfig+0x328>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e23f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b76      	ldr	r3, [pc, #472]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	061b      	lsls	r3, r3, #24
 8002a36:	4973      	ldr	r1, [pc, #460]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a3c:	e040      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d023      	beq.n	8002a8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a46:	4b6f      	ldr	r3, [pc, #444]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe fc4b 	bl	80012ec <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7fe fc47 	bl	80012ec <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e21d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6c:	4b65      	ldr	r3, [pc, #404]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b62      	ldr	r3, [pc, #392]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	495f      	ldr	r1, [pc, #380]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
 8002a8c:	e018      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5c      	ldr	r2, [pc, #368]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fc27 	bl	80012ec <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fc23 	bl	80012ec <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1f9      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab4:	4b53      	ldr	r3, [pc, #332]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d03c      	beq.n	8002b46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ada:	4a4a      	ldr	r2, [pc, #296]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fc02 	bl	80012ec <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aec:	f7fe fbfe 	bl	80012ec <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1d4      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002afe:	4b41      	ldr	r3, [pc, #260]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ef      	beq.n	8002aec <HAL_RCC_OscConfig+0x3ec>
 8002b0c:	e01b      	b.n	8002b46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b14:	4a3b      	ldr	r2, [pc, #236]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fbe5 	bl	80012ec <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b26:	f7fe fbe1 	bl	80012ec <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1b7      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b38:	4b32      	ldr	r3, [pc, #200]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ef      	bne.n	8002b26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80a6 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b58:	4b2a      	ldr	r3, [pc, #168]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10d      	bne.n	8002b80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b64:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	4a26      	ldr	r2, [pc, #152]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b70:	4b24      	ldr	r3, [pc, #144]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b80:	4b21      	ldr	r3, [pc, #132]	@ (8002c08 <HAL_RCC_OscConfig+0x508>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d118      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c08 <HAL_RCC_OscConfig+0x508>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <HAL_RCC_OscConfig+0x508>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b98:	f7fe fba8 	bl	80012ec <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba0:	f7fe fba4 	bl	80012ec <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e17a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <HAL_RCC_OscConfig+0x508>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4d8>
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bd6:	e029      	b.n	8002c2c <HAL_RCC_OscConfig+0x52c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d115      	bne.n	8002c0c <HAL_RCC_OscConfig+0x50c>
 8002be0:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be6:	4a07      	ldr	r2, [pc, #28]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bf0:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf6:	4a03      	ldr	r2, [pc, #12]	@ (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c00:	e014      	b.n	8002c2c <HAL_RCC_OscConfig+0x52c>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	4b9c      	ldr	r3, [pc, #624]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c12:	4a9b      	ldr	r2, [pc, #620]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c1c:	4b98      	ldr	r3, [pc, #608]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	4a97      	ldr	r2, [pc, #604]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002c24:	f023 0304 	bic.w	r3, r3, #4
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d016      	beq.n	8002c62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fb5a 	bl	80012ec <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fb56 	bl	80012ec <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e12a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c52:	4b8b      	ldr	r3, [pc, #556]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ed      	beq.n	8002c3c <HAL_RCC_OscConfig+0x53c>
 8002c60:	e015      	b.n	8002c8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c62:	f7fe fb43 	bl	80012ec <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe fb3f 	bl	80012ec <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e113      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c80:	4b7f      	ldr	r3, [pc, #508]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1ed      	bne.n	8002c6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8e:	7ffb      	ldrb	r3, [r7, #31]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d105      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c94:	4b7a      	ldr	r3, [pc, #488]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c98:	4a79      	ldr	r2, [pc, #484]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80fe 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	f040 80d0 	bne.w	8002e54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cb4:	4b72      	ldr	r3, [pc, #456]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d130      	bne.n	8002d2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d127      	bne.n	8002d2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d11f      	bne.n	8002d2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cf4:	2a07      	cmp	r2, #7
 8002cf6:	bf14      	ite	ne
 8002cf8:	2201      	movne	r2, #1
 8002cfa:	2200      	moveq	r2, #0
 8002cfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d113      	bne.n	8002d2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	3b01      	subs	r3, #1
 8002d24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d06e      	beq.n	8002e08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d069      	beq.n	8002e04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d30:	4b53      	ldr	r3, [pc, #332]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d3c:	4b50      	ldr	r3, [pc, #320]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0ad      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a4b      	ldr	r2, [pc, #300]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d58:	f7fe fac8 	bl	80012ec <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fe fac4 	bl	80012ec <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e09a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d72:	4b43      	ldr	r3, [pc, #268]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7e:	4b40      	ldr	r3, [pc, #256]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	4b40      	ldr	r3, [pc, #256]	@ (8002e84 <HAL_RCC_OscConfig+0x784>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d8e:	3a01      	subs	r2, #1
 8002d90:	0112      	lsls	r2, r2, #4
 8002d92:	4311      	orrs	r1, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d98:	0212      	lsls	r2, r2, #8
 8002d9a:	4311      	orrs	r1, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002da0:	0852      	lsrs	r2, r2, #1
 8002da2:	3a01      	subs	r2, #1
 8002da4:	0552      	lsls	r2, r2, #21
 8002da6:	4311      	orrs	r1, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002dac:	0852      	lsrs	r2, r2, #1
 8002dae:	3a01      	subs	r2, #1
 8002db0:	0652      	lsls	r2, r2, #25
 8002db2:	4311      	orrs	r1, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002db8:	0912      	lsrs	r2, r2, #4
 8002dba:	0452      	lsls	r2, r2, #17
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	4930      	ldr	r1, [pc, #192]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ddc:	f7fe fa86 	bl	80012ec <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe fa82 	bl	80012ec <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e058      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df6:	4b22      	ldr	r3, [pc, #136]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e02:	e050      	b.n	8002ea6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e04f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e08:	4b1d      	ldr	r3, [pc, #116]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d148      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e14:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a19      	ldr	r2, [pc, #100]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e20:	4b17      	ldr	r3, [pc, #92]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4a16      	ldr	r2, [pc, #88]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e2c:	f7fe fa5e 	bl	80012ec <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe fa5a 	bl	80012ec <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e030      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x734>
 8002e52:	e028      	b.n	8002ea6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	d023      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5a:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a08      	ldr	r2, [pc, #32]	@ (8002e80 <HAL_RCC_OscConfig+0x780>)
 8002e60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe fa41 	bl	80012ec <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e6c:	e00c      	b.n	8002e88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fe fa3d 	bl	80012ec <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d905      	bls.n	8002e88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e013      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
 8002e80:	40021000 	.word	0x40021000
 8002e84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e88:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <HAL_RCC_OscConfig+0x7b0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ec      	bne.n	8002e6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_RCC_OscConfig+0x7b0>)
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	4905      	ldr	r1, [pc, #20]	@ (8002eb0 <HAL_RCC_OscConfig+0x7b0>)
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_RCC_OscConfig+0x7b4>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60cb      	str	r3, [r1, #12]
 8002ea0:	e001      	b.n	8002ea6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	feeefffc 	.word	0xfeeefffc

08002eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0e7      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b75      	ldr	r3, [pc, #468]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d910      	bls.n	8002efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b72      	ldr	r3, [pc, #456]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 0207 	bic.w	r2, r3, #7
 8002ee2:	4970      	ldr	r1, [pc, #448]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b6e      	ldr	r3, [pc, #440]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0cf      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	4b66      	ldr	r3, [pc, #408]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d908      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b63      	ldr	r3, [pc, #396]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4960      	ldr	r1, [pc, #384]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d04c      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3e:	4b5a      	ldr	r3, [pc, #360]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d121      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0a6      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f56:	4b54      	ldr	r3, [pc, #336]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e09a      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e08e      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e086      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b46      	ldr	r3, [pc, #280]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4943      	ldr	r1, [pc, #268]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa0:	f7fe f9a4 	bl	80012ec <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fe f9a0 	bl	80012ec <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e06e      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 020c 	and.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1eb      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	4b31      	ldr	r3, [pc, #196]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d208      	bcs.n	8002ffe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b2e      	ldr	r3, [pc, #184]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	492b      	ldr	r1, [pc, #172]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffe:	4b29      	ldr	r3, [pc, #164]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d210      	bcs.n	800302e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300c:	4b25      	ldr	r3, [pc, #148]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 0207 	bic.w	r2, r3, #7
 8003014:	4923      	ldr	r1, [pc, #140]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301c:	4b21      	ldr	r3, [pc, #132]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e036      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303a:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4918      	ldr	r1, [pc, #96]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003048:	4313      	orrs	r3, r2
 800304a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003058:	4b13      	ldr	r3, [pc, #76]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4910      	ldr	r1, [pc, #64]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800306c:	f000 f824 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b0d      	ldr	r3, [pc, #52]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	490b      	ldr	r1, [pc, #44]	@ (80030ac <HAL_RCC_ClockConfig+0x1f4>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
 8003088:	4a09      	ldr	r2, [pc, #36]	@ (80030b0 <HAL_RCC_ClockConfig+0x1f8>)
 800308a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800308c:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <HAL_RCC_ClockConfig+0x1fc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe f8db 	bl	800124c <HAL_InitTick>
 8003096:	4603      	mov	r3, r0
 8003098:	72fb      	strb	r3, [r7, #11]

  return status;
 800309a:	7afb      	ldrb	r3, [r7, #11]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40022000 	.word	0x40022000
 80030a8:	40021000 	.word	0x40021000
 80030ac:	080075d8 	.word	0x080075d8
 80030b0:	20000000 	.word	0x20000000
 80030b4:	20000004 	.word	0x20000004

080030b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	@ 0x24
 80030bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c6:	4b3e      	ldr	r3, [pc, #248]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d0:	4b3b      	ldr	r3, [pc, #236]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x34>
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d121      	bne.n	800312a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d11e      	bne.n	800312a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030ec:	4b34      	ldr	r3, [pc, #208]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030f8:	4b31      	ldr	r3, [pc, #196]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e005      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003108:	4b2d      	ldr	r3, [pc, #180]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003114:	4a2b      	ldr	r2, [pc, #172]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10d      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d102      	bne.n	8003136 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003130:	4b25      	ldr	r3, [pc, #148]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e004      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d101      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800313c:	4b23      	ldr	r3, [pc, #140]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x114>)
 800313e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d134      	bne.n	80031b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003146:	4b1e      	ldr	r3, [pc, #120]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d003      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0xa6>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d003      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0xac>
 800315c:	e005      	b.n	800316a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800315e:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003160:	617b      	str	r3, [r7, #20]
      break;
 8003162:	e005      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003166:	617b      	str	r3, [r7, #20]
      break;
 8003168:	e002      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	617b      	str	r3, [r7, #20]
      break;
 800316e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003170:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	3301      	adds	r3, #1
 800317c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800317e:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	fb03 f202 	mul.w	r2, r3, r2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003196:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	0e5b      	lsrs	r3, r3, #25
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	3301      	adds	r3, #1
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031b0:	69bb      	ldr	r3, [r7, #24]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3724      	adds	r7, #36	@ 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	080075f0 	.word	0x080075f0
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d4:	4b03      	ldr	r3, [pc, #12]	@ (80031e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000000 	.word	0x20000000

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031ec:	f7ff fff0 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4904      	ldr	r1, [pc, #16]	@ (8003210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	080075e8 	.word	0x080075e8

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003218:	f7ff ffda 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	0adb      	lsrs	r3, r3, #11
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4904      	ldr	r1, [pc, #16]	@ (800323c <HAL_RCC_GetPCLK2Freq+0x28>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	080075e8 	.word	0x080075e8

08003240 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800324c:	4b2a      	ldr	r3, [pc, #168]	@ (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003258:	f7ff f9ee 	bl	8002638 <HAL_PWREx_GetVoltageRange>
 800325c:	6178      	str	r0, [r7, #20]
 800325e:	e014      	b.n	800328a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	4a24      	ldr	r2, [pc, #144]	@ (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800326a:	6593      	str	r3, [r2, #88]	@ 0x58
 800326c:	4b22      	ldr	r3, [pc, #136]	@ (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003278:	f7ff f9de 	bl	8002638 <HAL_PWREx_GetVoltageRange>
 800327c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800327e:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003282:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003288:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003290:	d10b      	bne.n	80032aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b80      	cmp	r3, #128	@ 0x80
 8003296:	d919      	bls.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2ba0      	cmp	r3, #160	@ 0xa0
 800329c:	d902      	bls.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800329e:	2302      	movs	r3, #2
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	e013      	b.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032a4:	2301      	movs	r3, #1
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	e010      	b.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b80      	cmp	r3, #128	@ 0x80
 80032ae:	d902      	bls.n	80032b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032b0:	2303      	movs	r3, #3
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	e00a      	b.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b80      	cmp	r3, #128	@ 0x80
 80032ba:	d102      	bne.n	80032c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032bc:	2302      	movs	r3, #2
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	e004      	b.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b70      	cmp	r3, #112	@ 0x70
 80032c6:	d101      	bne.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032c8:	2301      	movs	r3, #1
 80032ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 0207 	bic.w	r2, r3, #7
 80032d4:	4909      	ldr	r1, [pc, #36]	@ (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032dc:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d001      	beq.n	80032ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40022000 	.word	0x40022000

08003300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003308:	2300      	movs	r3, #0
 800330a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800330c:	2300      	movs	r3, #0
 800330e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003318:	2b00      	cmp	r3, #0
 800331a:	d041      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003320:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003324:	d02a      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003326:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800332a:	d824      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800332c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003330:	d008      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003332:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003336:	d81e      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800333c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003340:	d010      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003342:	e018      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003344:	4b86      	ldr	r3, [pc, #536]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a85      	ldr	r2, [pc, #532]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800334e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003350:	e015      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3304      	adds	r3, #4
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f001 f829 	bl	80043b0 <RCCEx_PLLSAI1_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003362:	e00c      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3320      	adds	r3, #32
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f001 f914 	bl	8004598 <RCCEx_PLLSAI2_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003374:	e003      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	74fb      	strb	r3, [r7, #19]
      break;
 800337a:	e000      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800337c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003384:	4b76      	ldr	r3, [pc, #472]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003392:	4973      	ldr	r1, [pc, #460]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800339a:	e001      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d041      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033b4:	d02a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033ba:	d824      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033c0:	d008      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033c6:	d81e      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033d0:	d010      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033d2:	e018      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033d4:	4b62      	ldr	r3, [pc, #392]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a61      	ldr	r2, [pc, #388]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033e0:	e015      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 ffe1 	bl	80043b0 <RCCEx_PLLSAI1_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033f2:	e00c      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3320      	adds	r3, #32
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 f8cc 	bl	8004598 <RCCEx_PLLSAI2_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003404:	e003      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	74fb      	strb	r3, [r7, #19]
      break;
 800340a:	e000      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800340c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003414:	4b52      	ldr	r3, [pc, #328]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003422:	494f      	ldr	r1, [pc, #316]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800342a:	e001      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a0 	beq.w	800357e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003442:	4b47      	ldr	r3, [pc, #284]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003452:	2300      	movs	r3, #0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003458:	4b41      	ldr	r3, [pc, #260]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345c:	4a40      	ldr	r2, [pc, #256]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003462:	6593      	str	r3, [r2, #88]	@ 0x58
 8003464:	4b3e      	ldr	r3, [pc, #248]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003470:	2301      	movs	r3, #1
 8003472:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003474:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a3a      	ldr	r2, [pc, #232]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003480:	f7fd ff34 	bl	80012ec <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003486:	e009      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fd ff30 	bl	80012ec <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d902      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	74fb      	strb	r3, [r7, #19]
        break;
 800349a:	e005      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800349c:	4b31      	ldr	r3, [pc, #196]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ef      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d15c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01f      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d019      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034cc:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034d8:	4b21      	ldr	r3, [pc, #132]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034de:	4a20      	ldr	r2, [pc, #128]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034f8:	4a19      	ldr	r2, [pc, #100]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fd feef 	bl	80012ec <HAL_GetTick>
 800350e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003510:	e00b      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fd feeb 	bl	80012ec <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d902      	bls.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	74fb      	strb	r3, [r7, #19]
            break;
 8003528:	e006      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800352a:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ec      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800353e:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003544:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800354e:	4904      	ldr	r1, [pc, #16]	@ (8003560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003556:	e009      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	74bb      	strb	r3, [r7, #18]
 800355c:	e006      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800356c:	7c7b      	ldrb	r3, [r7, #17]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d105      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003572:	4b9e      	ldr	r3, [pc, #632]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003576:	4a9d      	ldr	r2, [pc, #628]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800357c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800358a:	4b98      	ldr	r3, [pc, #608]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003590:	f023 0203 	bic.w	r2, r3, #3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	4994      	ldr	r1, [pc, #592]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035ac:	4b8f      	ldr	r3, [pc, #572]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	f023 020c 	bic.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ba:	498c      	ldr	r1, [pc, #560]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035ce:	4b87      	ldr	r3, [pc, #540]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	4983      	ldr	r1, [pc, #524]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035f0:	4b7e      	ldr	r3, [pc, #504]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	497b      	ldr	r1, [pc, #492]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003612:	4b76      	ldr	r3, [pc, #472]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003618:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003620:	4972      	ldr	r1, [pc, #456]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003634:	4b6d      	ldr	r3, [pc, #436]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003642:	496a      	ldr	r1, [pc, #424]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003656:	4b65      	ldr	r3, [pc, #404]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	4961      	ldr	r1, [pc, #388]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003678:	4b5c      	ldr	r3, [pc, #368]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003686:	4959      	ldr	r1, [pc, #356]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800369a:	4b54      	ldr	r3, [pc, #336]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a8:	4950      	ldr	r1, [pc, #320]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036bc:	4b4b      	ldr	r3, [pc, #300]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ca:	4948      	ldr	r1, [pc, #288]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036de:	4b43      	ldr	r3, [pc, #268]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ec:	493f      	ldr	r1, [pc, #252]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d028      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003700:	4b3a      	ldr	r3, [pc, #232]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800370e:	4937      	ldr	r1, [pc, #220]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800371e:	d106      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003720:	4b32      	ldr	r3, [pc, #200]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a31      	ldr	r2, [pc, #196]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800372a:	60d3      	str	r3, [r2, #12]
 800372c:	e011      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003732:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003736:	d10c      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	2101      	movs	r1, #1
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fe36 	bl	80043b0 <RCCEx_PLLSAI1_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d028      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800375e:	4b23      	ldr	r3, [pc, #140]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003764:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376c:	491f      	ldr	r1, [pc, #124]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800377c:	d106      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800377e:	4b1b      	ldr	r3, [pc, #108]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	4a1a      	ldr	r2, [pc, #104]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003788:	60d3      	str	r3, [r2, #12]
 800378a:	e011      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003790:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3304      	adds	r3, #4
 800379a:	2101      	movs	r1, #1
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fe07 	bl	80043b0 <RCCEx_PLLSAI1_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d02b      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037bc:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ca:	4908      	ldr	r1, [pc, #32]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037da:	d109      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037dc:	4b03      	ldr	r3, [pc, #12]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a02      	ldr	r2, [pc, #8]	@ (80037ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e6:	60d3      	str	r3, [r2, #12]
 80037e8:	e014      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	2101      	movs	r1, #1
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fdd5 	bl	80043b0 <RCCEx_PLLSAI1_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d02f      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003820:	4b2b      	ldr	r3, [pc, #172]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800382e:	4928      	ldr	r1, [pc, #160]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800383a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800383e:	d10d      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2102      	movs	r1, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fdb2 	bl	80043b0 <RCCEx_PLLSAI1_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d014      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	74bb      	strb	r3, [r7, #18]
 800385a:	e011      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003864:	d10c      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3320      	adds	r3, #32
 800386a:	2102      	movs	r1, #2
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fe93 	bl	8004598 <RCCEx_PLLSAI2_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800388c:	4b10      	ldr	r3, [pc, #64]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003892:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800389a:	490d      	ldr	r1, [pc, #52]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038ae:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038be:	4904      	ldr	r1, [pc, #16]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000

080038d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038e6:	d13e      	bne.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80038e8:	4bb2      	ldr	r3, [pc, #712]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038fa:	d028      	beq.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003902:	f200 8542 	bhi.w	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800390c:	d005      	beq.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003914:	d00e      	beq.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003916:	f000 bd38 	b.w	800438a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800391a:	4ba6      	ldr	r3, [pc, #664]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	f040 8532 	bne.w	800438e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800392a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800392e:	61fb      	str	r3, [r7, #28]
      break;
 8003930:	f000 bd2d 	b.w	800438e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003934:	4b9f      	ldr	r3, [pc, #636]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b02      	cmp	r3, #2
 8003940:	f040 8527 	bne.w	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003944:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003948:	61fb      	str	r3, [r7, #28]
      break;
 800394a:	f000 bd22 	b.w	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800394e:	4b99      	ldr	r3, [pc, #612]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800395a:	f040 851c 	bne.w	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800395e:	4b96      	ldr	r3, [pc, #600]	@ (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003960:	61fb      	str	r3, [r7, #28]
      break;
 8003962:	f000 bd18 	b.w	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003966:	4b93      	ldr	r3, [pc, #588]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d036      	beq.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d840      	bhi.n	80039fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d003      	beq.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d020      	beq.n	80039ca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003988:	e039      	b.n	80039fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800398a:	4b8a      	ldr	r3, [pc, #552]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b02      	cmp	r3, #2
 8003994:	d116      	bne.n	80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003996:	4b87      	ldr	r3, [pc, #540]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80039a2:	4b84      	ldr	r3, [pc, #528]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	e005      	b.n	80039ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80039ae:	4b81      	ldr	r3, [pc, #516]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	4a80      	ldr	r2, [pc, #512]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80039bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039c2:	e01f      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
      break;
 80039c8:	e01c      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039ca:	4b7a      	ldr	r3, [pc, #488]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d6:	d102      	bne.n	80039de <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80039d8:	4b79      	ldr	r3, [pc, #484]	@ (8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80039da:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039dc:	e012      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
      break;
 80039e2:	e00f      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039e4:	4b73      	ldr	r3, [pc, #460]	@ (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039f0:	d102      	bne.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80039f2:	4b74      	ldr	r3, [pc, #464]	@ (8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039f6:	e005      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]
      break;
 80039fc:	e002      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
      break;
 8003a02:	bf00      	nop
    }

    switch(PeriphClk)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a0a:	f000 80dd 	beq.w	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a14:	f200 84c1 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a1e:	f000 80d3 	beq.w	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a28:	f200 84b7 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a32:	f000 835f 	beq.w	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a3c:	f200 84ad 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a46:	f000 847e 	beq.w	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a50:	f200 84a3 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a5a:	f000 82cd 	beq.w	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a64:	f200 8499 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a6e:	f000 80ab 	beq.w	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a78:	f200 848f 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a82:	f000 8090 	beq.w	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a8c:	f200 8485 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a96:	d07f      	beq.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a9e:	f200 847c 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa8:	f000 8403 	beq.w	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab2:	f200 8472 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003abc:	f000 83af 	beq.w	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac6:	f200 8468 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad0:	f000 8379 	beq.w	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ada:	f200 845e 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b80      	cmp	r3, #128	@ 0x80
 8003ae2:	f000 8344 	beq.w	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b80      	cmp	r3, #128	@ 0x80
 8003aea:	f200 8456 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d84b      	bhi.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 844f 	beq.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	2b1f      	cmp	r3, #31
 8003b02:	f200 844a 	bhi.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b06:	a201      	add	r2, pc, #4	@ (adr r2, 8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003cf5 	.word	0x08003cf5
 8003b10:	08003d63 	.word	0x08003d63
 8003b14:	0800439b 	.word	0x0800439b
 8003b18:	08003df7 	.word	0x08003df7
 8003b1c:	0800439b 	.word	0x0800439b
 8003b20:	0800439b 	.word	0x0800439b
 8003b24:	0800439b 	.word	0x0800439b
 8003b28:	08003e7d 	.word	0x08003e7d
 8003b2c:	0800439b 	.word	0x0800439b
 8003b30:	0800439b 	.word	0x0800439b
 8003b34:	0800439b 	.word	0x0800439b
 8003b38:	0800439b 	.word	0x0800439b
 8003b3c:	0800439b 	.word	0x0800439b
 8003b40:	0800439b 	.word	0x0800439b
 8003b44:	0800439b 	.word	0x0800439b
 8003b48:	08003ef5 	.word	0x08003ef5
 8003b4c:	0800439b 	.word	0x0800439b
 8003b50:	0800439b 	.word	0x0800439b
 8003b54:	0800439b 	.word	0x0800439b
 8003b58:	0800439b 	.word	0x0800439b
 8003b5c:	0800439b 	.word	0x0800439b
 8003b60:	0800439b 	.word	0x0800439b
 8003b64:	0800439b 	.word	0x0800439b
 8003b68:	0800439b 	.word	0x0800439b
 8003b6c:	0800439b 	.word	0x0800439b
 8003b70:	0800439b 	.word	0x0800439b
 8003b74:	0800439b 	.word	0x0800439b
 8003b78:	0800439b 	.word	0x0800439b
 8003b7c:	0800439b 	.word	0x0800439b
 8003b80:	0800439b 	.word	0x0800439b
 8003b84:	0800439b 	.word	0x0800439b
 8003b88:	08003f77 	.word	0x08003f77
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b40      	cmp	r3, #64	@ 0x40
 8003b90:	f000 82c1 	beq.w	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003b94:	f000 bc01 	b.w	800439a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003b98:	69b9      	ldr	r1, [r7, #24]
 8003b9a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003b9e:	f000 fdd9 	bl	8004754 <RCCEx_GetSAIxPeriphCLKFreq>
 8003ba2:	61f8      	str	r0, [r7, #28]
      break;
 8003ba4:	e3fa      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003bac:	f000 fdd2 	bl	8004754 <RCCEx_GetSAIxPeriphCLKFreq>
 8003bb0:	61f8      	str	r0, [r7, #28]
      break;
 8003bb2:	e3f3      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	0003d090 	.word	0x0003d090
 8003bbc:	080075f0 	.word	0x080075f0
 8003bc0:	00f42400 	.word	0x00f42400
 8003bc4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003bc8:	4ba9      	ldr	r3, [pc, #676]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bce:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003bda:	d00c      	beq.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003be2:	d87f      	bhi.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bea:	d04e      	beq.n	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bf2:	d01d      	beq.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003bf4:	e076      	b.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003bf6:	4b9e      	ldr	r3, [pc, #632]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d172      	bne.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c02:	4b9b      	ldr	r3, [pc, #620]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003c0e:	4b98      	ldr	r3, [pc, #608]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	e005      	b.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003c1a:	4b95      	ldr	r3, [pc, #596]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4a93      	ldr	r2, [pc, #588]	@ (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2c:	61fb      	str	r3, [r7, #28]
          break;
 8003c2e:	e05b      	b.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c30:	4b8f      	ldr	r3, [pc, #572]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c3c:	d156      	bne.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003c3e:	4b8c      	ldr	r3, [pc, #560]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c4a:	d14f      	bne.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c4c:	4b88      	ldr	r3, [pc, #544]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c56:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	fb03 f202 	mul.w	r2, r3, r2
 8003c60:	4b83      	ldr	r3, [pc, #524]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003c72:	4b7f      	ldr	r3, [pc, #508]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	0d5b      	lsrs	r3, r3, #21
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	61fb      	str	r3, [r7, #28]
          break;
 8003c88:	e030      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003c8a:	4b79      	ldr	r3, [pc, #484]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c96:	d12b      	bne.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003c98:	4b75      	ldr	r3, [pc, #468]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca4:	d124      	bne.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003ca6:	4b72      	ldr	r3, [pc, #456]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cb0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	fb03 f202 	mul.w	r2, r3, r2
 8003cba:	4b6d      	ldr	r3, [pc, #436]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003ccc:	4b68      	ldr	r3, [pc, #416]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	0d5b      	lsrs	r3, r3, #21
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	61fb      	str	r3, [r7, #28]
          break;
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003ce4:	bf00      	nop
 8003ce6:	e359      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ce8:	bf00      	nop
 8003cea:	e357      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003cec:	bf00      	nop
 8003cee:	e355      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003cf0:	bf00      	nop
        break;
 8003cf2:	e353      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003cf4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d827      	bhi.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003d06:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003d1d 	.word	0x08003d1d
 8003d10:	08003d25 	.word	0x08003d25
 8003d14:	08003d2d 	.word	0x08003d2d
 8003d18:	08003d41 	.word	0x08003d41
          frequency = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7ff fa7a 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8003d20:	61f8      	str	r0, [r7, #28]
          break;
 8003d22:	e01d      	b.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d24:	f7ff f9c8 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003d28:	61f8      	str	r0, [r7, #28]
          break;
 8003d2a:	e019      	b.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d2c:	4b50      	ldr	r3, [pc, #320]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d38:	d10f      	bne.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8003d3a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003d3c:	61fb      	str	r3, [r7, #28]
          break;
 8003d3e:	e00c      	b.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d40:	4b4b      	ldr	r3, [pc, #300]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8003d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d52:	61fb      	str	r3, [r7, #28]
          break;
 8003d54:	e003      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003d56:	bf00      	nop
 8003d58:	e320      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d5a:	bf00      	nop
 8003d5c:	e31e      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d5e:	bf00      	nop
        break;
 8003d60:	e31c      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003d62:	4b43      	ldr	r3, [pc, #268]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	d83a      	bhi.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003d74:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003db1 	.word	0x08003db1
 8003d80:	08003deb 	.word	0x08003deb
 8003d84:	08003deb 	.word	0x08003deb
 8003d88:	08003deb 	.word	0x08003deb
 8003d8c:	08003db9 	.word	0x08003db9
 8003d90:	08003deb 	.word	0x08003deb
 8003d94:	08003deb 	.word	0x08003deb
 8003d98:	08003deb 	.word	0x08003deb
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08003deb 	.word	0x08003deb
 8003da4:	08003deb 	.word	0x08003deb
 8003da8:	08003deb 	.word	0x08003deb
 8003dac:	08003dd5 	.word	0x08003dd5
          frequency = HAL_RCC_GetPCLK1Freq();
 8003db0:	f7ff fa1a 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003db4:	61f8      	str	r0, [r7, #28]
          break;
 8003db6:	e01d      	b.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8003db8:	f7ff f97e 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003dbc:	61f8      	str	r0, [r7, #28]
          break;
 8003dbe:	e019      	b.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dcc:	d10f      	bne.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8003dce:	4b2a      	ldr	r3, [pc, #168]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003dd0:	61fb      	str	r3, [r7, #28]
          break;
 8003dd2:	e00c      	b.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003dd4:	4b26      	ldr	r3, [pc, #152]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d107      	bne.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8003de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003de6:	61fb      	str	r3, [r7, #28]
          break;
 8003de8:	e003      	b.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8003dea:	bf00      	nop
 8003dec:	e2d6      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003dee:	bf00      	nop
 8003df0:	e2d4      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003df2:	bf00      	nop
        break;
 8003df4:	e2d2      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003df6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b30      	cmp	r3, #48	@ 0x30
 8003e06:	d021      	beq.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b30      	cmp	r3, #48	@ 0x30
 8003e0c:	d829      	bhi.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d011      	beq.n	8003e38 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d823      	bhi.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d004      	beq.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003e26:	e01c      	b.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e28:	f7ff f9de 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003e2c:	61f8      	str	r0, [r7, #28]
          break;
 8003e2e:	e01d      	b.n	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e30:	f7ff f942 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003e34:	61f8      	str	r0, [r7, #28]
          break;
 8003e36:	e019      	b.n	8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e38:	4b0d      	ldr	r3, [pc, #52]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e44:	d10f      	bne.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003e46:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003e48:	61fb      	str	r3, [r7, #28]
          break;
 8003e4a:	e00c      	b.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e4c:	4b08      	ldr	r3, [pc, #32]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d107      	bne.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8003e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e5e:	61fb      	str	r3, [r7, #28]
          break;
 8003e60:	e003      	b.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003e62:	bf00      	nop
 8003e64:	e29a      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e66:	bf00      	nop
 8003e68:	e298      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e6a:	bf00      	nop
        break;
 8003e6c:	e296      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000
 8003e74:	080075f0 	.word	0x080075f0
 8003e78:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003e7c:	4b9b      	ldr	r3, [pc, #620]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e8c:	d021      	beq.n	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e92:	d829      	bhi.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2b80      	cmp	r3, #128	@ 0x80
 8003e98:	d011      	beq.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b80      	cmp	r3, #128	@ 0x80
 8003e9e:	d823      	bhi.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b40      	cmp	r3, #64	@ 0x40
 8003eaa:	d004      	beq.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003eac:	e01c      	b.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003eae:	f7ff f99b 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003eb2:	61f8      	str	r0, [r7, #28]
          break;
 8003eb4:	e01d      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003eb6:	f7ff f8ff 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003eba:	61f8      	str	r0, [r7, #28]
          break;
 8003ebc:	e019      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ebe:	4b8b      	ldr	r3, [pc, #556]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eca:	d10f      	bne.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003ecc:	4b88      	ldr	r3, [pc, #544]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003ece:	61fb      	str	r3, [r7, #28]
          break;
 8003ed0:	e00c      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ed2:	4b86      	ldr	r3, [pc, #536]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ee4:	61fb      	str	r3, [r7, #28]
          break;
 8003ee6:	e003      	b.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8003ee8:	bf00      	nop
 8003eea:	e257      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003eec:	bf00      	nop
 8003eee:	e255      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ef0:	bf00      	nop
        break;
 8003ef2:	e253      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f06:	d025      	beq.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f0e:	d82c      	bhi.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f16:	d013      	beq.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f1e:	d824      	bhi.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f2c:	d004      	beq.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003f2e:	e01c      	b.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f30:	f7ff f95a 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003f34:	61f8      	str	r0, [r7, #28]
          break;
 8003f36:	e01d      	b.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f38:	f7ff f8be 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003f3c:	61f8      	str	r0, [r7, #28]
          break;
 8003f3e:	e019      	b.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f40:	4b6a      	ldr	r3, [pc, #424]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4c:	d10f      	bne.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003f4e:	4b68      	ldr	r3, [pc, #416]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003f50:	61fb      	str	r3, [r7, #28]
          break;
 8003f52:	e00c      	b.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f54:	4b65      	ldr	r3, [pc, #404]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d107      	bne.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f66:	61fb      	str	r3, [r7, #28]
          break;
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003f6a:	bf00      	nop
 8003f6c:	e216      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f6e:	bf00      	nop
 8003f70:	e214      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f72:	bf00      	nop
        break;
 8003f74:	e212      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003f76:	4b5d      	ldr	r3, [pc, #372]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f88:	d025      	beq.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f90:	d82c      	bhi.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f98:	d013      	beq.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fa0:	d824      	bhi.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fae:	d004      	beq.n	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003fb0:	e01c      	b.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003fb2:	f7ff f919 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003fb6:	61f8      	str	r0, [r7, #28]
          break;
 8003fb8:	e01d      	b.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fba:	f7ff f87d 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003fbe:	61f8      	str	r0, [r7, #28]
          break;
 8003fc0:	e019      	b.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fce:	d10f      	bne.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003fd0:	4b47      	ldr	r3, [pc, #284]	@ (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003fd2:	61fb      	str	r3, [r7, #28]
          break;
 8003fd4:	e00c      	b.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fd6:	4b45      	ldr	r3, [pc, #276]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003fe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fe8:	61fb      	str	r3, [r7, #28]
          break;
 8003fea:	e003      	b.n	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003fec:	bf00      	nop
 8003fee:	e1d5      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ff0:	bf00      	nop
 8003ff2:	e1d3      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ff4:	bf00      	nop
        break;
 8003ff6:	e1d1      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003ff8:	4b3c      	ldr	r3, [pc, #240]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800400a:	d00c      	beq.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004012:	d864      	bhi.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800401a:	d008      	beq.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004022:	d030      	beq.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004024:	e05b      	b.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004026:	f7ff f847 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 800402a:	61f8      	str	r0, [r7, #28]
          break;
 800402c:	e05c      	b.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800402e:	4b2f      	ldr	r3, [pc, #188]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800403a:	d152      	bne.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800403c:	4b2b      	ldr	r3, [pc, #172]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d04c      	beq.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004048:	4b28      	ldr	r3, [pc, #160]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004052:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	fb03 f202 	mul.w	r2, r3, r2
 800405c:	4b23      	ldr	r3, [pc, #140]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	3301      	adds	r3, #1
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800406e:	4b1f      	ldr	r3, [pc, #124]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	0e5b      	lsrs	r3, r3, #25
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	3301      	adds	r3, #1
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	61fb      	str	r3, [r7, #28]
          break;
 8004084:	e02d      	b.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004086:	4b19      	ldr	r3, [pc, #100]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800408e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004092:	d128      	bne.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004094:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d022      	beq.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80040a0:	4b12      	ldr	r3, [pc, #72]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	0a1b      	lsrs	r3, r3, #8
 80040a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040aa:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	fb03 f202 	mul.w	r2, r3, r2
 80040b4:	4b0d      	ldr	r3, [pc, #52]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	3301      	adds	r3, #1
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80040c6:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	0e5b      	lsrs	r3, r3, #25
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	3301      	adds	r3, #1
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	61fb      	str	r3, [r7, #28]
          break;
 80040dc:	e003      	b.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80040de:	bf00      	nop
 80040e0:	e15c      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040e2:	bf00      	nop
 80040e4:	e15a      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040e6:	bf00      	nop
        break;
 80040e8:	e158      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
 80040f0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80040f4:	4b9d      	ldr	r3, [pc, #628]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040fe:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004106:	f7ff f885 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 800410a:	61f8      	str	r0, [r7, #28]
        break;
 800410c:	e146      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800410e:	f7fe ffd3 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8004112:	61f8      	str	r0, [r7, #28]
        break;
 8004114:	e142      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004116:	4b95      	ldr	r3, [pc, #596]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004128:	d013      	beq.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004130:	d819      	bhi.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800413e:	d004      	beq.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004140:	e011      	b.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004142:	f7ff f851 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8004146:	61f8      	str	r0, [r7, #28]
          break;
 8004148:	e010      	b.n	800416c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800414a:	f7fe ffb5 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 800414e:	61f8      	str	r0, [r7, #28]
          break;
 8004150:	e00c      	b.n	800416c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004152:	4b86      	ldr	r3, [pc, #536]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d104      	bne.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004160:	4b83      	ldr	r3, [pc, #524]	@ (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004162:	61fb      	str	r3, [r7, #28]
          break;
 8004164:	e001      	b.n	800416a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004166:	bf00      	nop
 8004168:	e118      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800416a:	bf00      	nop
        break;
 800416c:	e116      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800416e:	4b7f      	ldr	r3, [pc, #508]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004174:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004180:	d013      	beq.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004188:	d819      	bhi.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004196:	d004      	beq.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004198:	e011      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800419a:	f7ff f825 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 800419e:	61f8      	str	r0, [r7, #28]
          break;
 80041a0:	e010      	b.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80041a2:	f7fe ff89 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 80041a6:	61f8      	str	r0, [r7, #28]
          break;
 80041a8:	e00c      	b.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041aa:	4b70      	ldr	r3, [pc, #448]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b6:	d104      	bne.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80041b8:	4b6d      	ldr	r3, [pc, #436]	@ (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80041ba:	61fb      	str	r3, [r7, #28]
          break;
 80041bc:	e001      	b.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80041be:	bf00      	nop
 80041c0:	e0ec      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041c2:	bf00      	nop
        break;
 80041c4:	e0ea      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80041c6:	4b69      	ldr	r3, [pc, #420]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041d8:	d013      	beq.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041e0:	d819      	bhi.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d004      	beq.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ee:	d004      	beq.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80041f0:	e011      	b.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041f2:	f7fe fff9 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 80041f6:	61f8      	str	r0, [r7, #28]
          break;
 80041f8:	e010      	b.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80041fa:	f7fe ff5d 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 80041fe:	61f8      	str	r0, [r7, #28]
          break;
 8004200:	e00c      	b.n	800421c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004202:	4b5a      	ldr	r3, [pc, #360]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800420e:	d104      	bne.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004210:	4b57      	ldr	r3, [pc, #348]	@ (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004212:	61fb      	str	r3, [r7, #28]
          break;
 8004214:	e001      	b.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004216:	bf00      	nop
 8004218:	e0c0      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800421a:	bf00      	nop
        break;
 800421c:	e0be      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800421e:	4b53      	ldr	r3, [pc, #332]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004224:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004230:	d02c      	beq.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004238:	d833      	bhi.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004240:	d01a      	beq.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004248:	d82b      	bhi.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004256:	d004      	beq.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004258:	e023      	b.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800425a:	f7fe ffc5 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 800425e:	61f8      	str	r0, [r7, #28]
          break;
 8004260:	e026      	b.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004262:	4b42      	ldr	r3, [pc, #264]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b02      	cmp	r3, #2
 800426e:	d11a      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004270:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004274:	61fb      	str	r3, [r7, #28]
          break;
 8004276:	e016      	b.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004278:	4b3c      	ldr	r3, [pc, #240]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004284:	d111      	bne.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004286:	4b3a      	ldr	r3, [pc, #232]	@ (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004288:	61fb      	str	r3, [r7, #28]
          break;
 800428a:	e00e      	b.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800428c:	4b37      	ldr	r3, [pc, #220]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d109      	bne.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800429a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800429e:	61fb      	str	r3, [r7, #28]
          break;
 80042a0:	e005      	b.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80042a2:	bf00      	nop
 80042a4:	e07a      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042a6:	bf00      	nop
 80042a8:	e078      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042aa:	bf00      	nop
 80042ac:	e076      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042ae:	bf00      	nop
        break;
 80042b0:	e074      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80042b2:	4b2e      	ldr	r3, [pc, #184]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042c4:	d02c      	beq.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042cc:	d833      	bhi.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042d4:	d01a      	beq.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042dc:	d82b      	bhi.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ea:	d004      	beq.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80042ec:	e023      	b.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042ee:	f7fe ff7b 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 80042f2:	61f8      	str	r0, [r7, #28]
          break;
 80042f4:	e026      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80042f6:	4b1d      	ldr	r3, [pc, #116]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	d11a      	bne.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004304:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004308:	61fb      	str	r3, [r7, #28]
          break;
 800430a:	e016      	b.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800430c:	4b17      	ldr	r3, [pc, #92]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004318:	d111      	bne.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800431a:	4b15      	ldr	r3, [pc, #84]	@ (8004370 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800431c:	61fb      	str	r3, [r7, #28]
          break;
 800431e:	e00e      	b.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004320:	4b12      	ldr	r3, [pc, #72]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d109      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800432e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004332:	61fb      	str	r3, [r7, #28]
          break;
 8004334:	e005      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004336:	bf00      	nop
 8004338:	e030      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800433a:	bf00      	nop
 800433c:	e02e      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800433e:	bf00      	nop
 8004340:	e02c      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004342:	bf00      	nop
        break;
 8004344:	e02a      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004346:	4b09      	ldr	r3, [pc, #36]	@ (800436c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435e:	d009      	beq.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004360:	e012      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004362:	f7fe ff41 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8004366:	61f8      	str	r0, [r7, #28]
          break;
 8004368:	e00e      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004374:	4b0c      	ldr	r3, [pc, #48]	@ (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800437c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004380:	d101      	bne.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004382:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004384:	61fb      	str	r3, [r7, #28]
          break;
 8004386:	bf00      	nop
        break;
 8004388:	e008      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800438a:	bf00      	nop
 800438c:	e006      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800438e:	bf00      	nop
 8004390:	e004      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800439a:	bf00      	nop
    }
  }

  return(frequency);
 800439c:	69fb      	ldr	r3, [r7, #28]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
 80043ac:	00f42400 	.word	0x00f42400

080043b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043be:	4b75      	ldr	r3, [pc, #468]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d018      	beq.n	80043fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ca:	4b72      	ldr	r3, [pc, #456]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f003 0203 	and.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d10d      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
       ||
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
       ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d047      	beq.n	8004486 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
 80043fa:	e044      	b.n	8004486 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d018      	beq.n	8004436 <RCCEx_PLLSAI1_Config+0x86>
 8004404:	2b03      	cmp	r3, #3
 8004406:	d825      	bhi.n	8004454 <RCCEx_PLLSAI1_Config+0xa4>
 8004408:	2b01      	cmp	r3, #1
 800440a:	d002      	beq.n	8004412 <RCCEx_PLLSAI1_Config+0x62>
 800440c:	2b02      	cmp	r3, #2
 800440e:	d009      	beq.n	8004424 <RCCEx_PLLSAI1_Config+0x74>
 8004410:	e020      	b.n	8004454 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004412:	4b60      	ldr	r3, [pc, #384]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11d      	bne.n	800445a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004422:	e01a      	b.n	800445a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004424:	4b5b      	ldr	r3, [pc, #364]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442c:	2b00      	cmp	r3, #0
 800442e:	d116      	bne.n	800445e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004434:	e013      	b.n	800445e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004436:	4b57      	ldr	r3, [pc, #348]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004442:	4b54      	ldr	r3, [pc, #336]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004452:	e006      	b.n	8004462 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
      break;
 8004458:	e004      	b.n	8004464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800445a:	bf00      	nop
 800445c:	e002      	b.n	8004464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800445e:	bf00      	nop
 8004460:	e000      	b.n	8004464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004462:	bf00      	nop
    }

    if(status == HAL_OK)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10d      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800446a:	4b4a      	ldr	r3, [pc, #296]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6819      	ldr	r1, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	3b01      	subs	r3, #1
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	430b      	orrs	r3, r1
 8004480:	4944      	ldr	r1, [pc, #272]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004482:	4313      	orrs	r3, r2
 8004484:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d17d      	bne.n	8004588 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800448c:	4b41      	ldr	r3, [pc, #260]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a40      	ldr	r2, [pc, #256]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004492:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004498:	f7fc ff28 	bl	80012ec <HAL_GetTick>
 800449c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800449e:	e009      	b.n	80044b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044a0:	f7fc ff24 	bl	80012ec <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d902      	bls.n	80044b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	73fb      	strb	r3, [r7, #15]
        break;
 80044b2:	e005      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044b4:	4b37      	ldr	r3, [pc, #220]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ef      	bne.n	80044a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d160      	bne.n	8004588 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d111      	bne.n	80044f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044cc:	4b31      	ldr	r3, [pc, #196]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80044d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6892      	ldr	r2, [r2, #8]
 80044dc:	0211      	lsls	r1, r2, #8
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68d2      	ldr	r2, [r2, #12]
 80044e2:	0912      	lsrs	r2, r2, #4
 80044e4:	0452      	lsls	r2, r2, #17
 80044e6:	430a      	orrs	r2, r1
 80044e8:	492a      	ldr	r1, [pc, #168]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	610b      	str	r3, [r1, #16]
 80044ee:	e027      	b.n	8004540 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d112      	bne.n	800451c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044f6:	4b27      	ldr	r3, [pc, #156]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80044fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6892      	ldr	r2, [r2, #8]
 8004506:	0211      	lsls	r1, r2, #8
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6912      	ldr	r2, [r2, #16]
 800450c:	0852      	lsrs	r2, r2, #1
 800450e:	3a01      	subs	r2, #1
 8004510:	0552      	lsls	r2, r2, #21
 8004512:	430a      	orrs	r2, r1
 8004514:	491f      	ldr	r1, [pc, #124]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	4313      	orrs	r3, r2
 8004518:	610b      	str	r3, [r1, #16]
 800451a:	e011      	b.n	8004540 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800451c:	4b1d      	ldr	r3, [pc, #116]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004524:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6892      	ldr	r2, [r2, #8]
 800452c:	0211      	lsls	r1, r2, #8
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6952      	ldr	r2, [r2, #20]
 8004532:	0852      	lsrs	r2, r2, #1
 8004534:	3a01      	subs	r2, #1
 8004536:	0652      	lsls	r2, r2, #25
 8004538:	430a      	orrs	r2, r1
 800453a:	4916      	ldr	r1, [pc, #88]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453c:	4313      	orrs	r3, r2
 800453e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004540:	4b14      	ldr	r3, [pc, #80]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a13      	ldr	r2, [pc, #76]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004546:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800454a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454c:	f7fc fece 	bl	80012ec <HAL_GetTick>
 8004550:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004552:	e009      	b.n	8004568 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004554:	f7fc feca 	bl	80012ec <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d902      	bls.n	8004568 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	73fb      	strb	r3, [r7, #15]
          break;
 8004566:	e005      	b.n	8004574 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004568:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ef      	beq.n	8004554 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800457a:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	4904      	ldr	r1, [pc, #16]	@ (8004594 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000

08004598 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045b2:	4b67      	ldr	r3, [pc, #412]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0203 	and.w	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d10d      	bne.n	80045de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
       ||
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045ca:	4b61      	ldr	r3, [pc, #388]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
       ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d047      	beq.n	800466e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	e044      	b.n	800466e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d018      	beq.n	800461e <RCCEx_PLLSAI2_Config+0x86>
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d825      	bhi.n	800463c <RCCEx_PLLSAI2_Config+0xa4>
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d002      	beq.n	80045fa <RCCEx_PLLSAI2_Config+0x62>
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d009      	beq.n	800460c <RCCEx_PLLSAI2_Config+0x74>
 80045f8:	e020      	b.n	800463c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045fa:	4b55      	ldr	r3, [pc, #340]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11d      	bne.n	8004642 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460a:	e01a      	b.n	8004642 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800460c:	4b50      	ldr	r3, [pc, #320]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d116      	bne.n	8004646 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461c:	e013      	b.n	8004646 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800461e:	4b4c      	ldr	r3, [pc, #304]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10f      	bne.n	800464a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800462a:	4b49      	ldr	r3, [pc, #292]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800463a:	e006      	b.n	800464a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      break;
 8004640:	e004      	b.n	800464c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004642:	bf00      	nop
 8004644:	e002      	b.n	800464c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004646:	bf00      	nop
 8004648:	e000      	b.n	800464c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800464a:	bf00      	nop
    }

    if(status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10d      	bne.n	800466e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004652:	4b3f      	ldr	r3, [pc, #252]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	3b01      	subs	r3, #1
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	430b      	orrs	r3, r1
 8004668:	4939      	ldr	r1, [pc, #228]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466a:	4313      	orrs	r3, r2
 800466c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d167      	bne.n	8004744 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004674:	4b36      	ldr	r3, [pc, #216]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a35      	ldr	r2, [pc, #212]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004680:	f7fc fe34 	bl	80012ec <HAL_GetTick>
 8004684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004686:	e009      	b.n	800469c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004688:	f7fc fe30 	bl	80012ec <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d902      	bls.n	800469c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	73fb      	strb	r3, [r7, #15]
        break;
 800469a:	e005      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800469c:	4b2c      	ldr	r3, [pc, #176]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ef      	bne.n	8004688 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d14a      	bne.n	8004744 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d111      	bne.n	80046d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046b4:	4b26      	ldr	r3, [pc, #152]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80046bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6892      	ldr	r2, [r2, #8]
 80046c4:	0211      	lsls	r1, r2, #8
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68d2      	ldr	r2, [r2, #12]
 80046ca:	0912      	lsrs	r2, r2, #4
 80046cc:	0452      	lsls	r2, r2, #17
 80046ce:	430a      	orrs	r2, r1
 80046d0:	491f      	ldr	r1, [pc, #124]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	614b      	str	r3, [r1, #20]
 80046d6:	e011      	b.n	80046fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80046e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6892      	ldr	r2, [r2, #8]
 80046e8:	0211      	lsls	r1, r2, #8
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6912      	ldr	r2, [r2, #16]
 80046ee:	0852      	lsrs	r2, r2, #1
 80046f0:	3a01      	subs	r2, #1
 80046f2:	0652      	lsls	r2, r2, #25
 80046f4:	430a      	orrs	r2, r1
 80046f6:	4916      	ldr	r1, [pc, #88]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046fc:	4b14      	ldr	r3, [pc, #80]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a13      	ldr	r2, [pc, #76]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004706:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fc fdf0 	bl	80012ec <HAL_GetTick>
 800470c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800470e:	e009      	b.n	8004724 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004710:	f7fc fdec 	bl	80012ec <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d902      	bls.n	8004724 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	73fb      	strb	r3, [r7, #15]
          break;
 8004722:	e005      	b.n	8004730 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004724:	4b0a      	ldr	r3, [pc, #40]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ef      	beq.n	8004710 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004736:	4b06      	ldr	r3, [pc, #24]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	4904      	ldr	r1, [pc, #16]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004740:	4313      	orrs	r3, r2
 8004742:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000

08004754 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004754:	b480      	push	{r7}
 8004756:	b089      	sub	sp, #36	@ 0x24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004770:	d10c      	bne.n	800478c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004772:	4b6e      	ldr	r3, [pc, #440]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800477c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004784:	d112      	bne.n	80047ac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004786:	4b6a      	ldr	r3, [pc, #424]	@ (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	e00f      	b.n	80047ac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004792:	d10b      	bne.n	80047ac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004794:	4b65      	ldr	r3, [pc, #404]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800479e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047a6:	d101      	bne.n	80047ac <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80047a8:	4b61      	ldr	r3, [pc, #388]	@ (8004930 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80047aa:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 80b4 	bne.w	800491c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047be:	d003      	beq.n	80047c8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047c6:	d135      	bne.n	8004834 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80047c8:	4b58      	ldr	r3, [pc, #352]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047d4:	f040 80a1 	bne.w	800491a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80047d8:	4b54      	ldr	r3, [pc, #336]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 809a 	beq.w	800491a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047e6:	4b51      	ldr	r3, [pc, #324]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	3301      	adds	r3, #1
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80047fa:	4b4c      	ldr	r3, [pc, #304]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004804:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800480c:	4b47      	ldr	r3, [pc, #284]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004818:	2311      	movs	r3, #17
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e001      	b.n	8004822 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800481e:	2307      	movs	r3, #7
 8004820:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	fb03 f202 	mul.w	r2, r3, r2
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004832:	e072      	b.n	800491a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d133      	bne.n	80048a2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800483a:	4b3c      	ldr	r3, [pc, #240]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004846:	d169      	bne.n	800491c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004848:	4b38      	ldr	r3, [pc, #224]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d063      	beq.n	800491c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004854:	4b35      	ldr	r3, [pc, #212]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	3301      	adds	r3, #1
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004868:	4b30      	ldr	r3, [pc, #192]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	0a1b      	lsrs	r3, r3, #8
 800486e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004872:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800487a:	4b2c      	ldr	r3, [pc, #176]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004886:	2311      	movs	r3, #17
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e001      	b.n	8004890 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 800488c:	2307      	movs	r3, #7
 800488e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	fb03 f202 	mul.w	r2, r3, r2
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fbb2 f3f3 	udiv	r3, r2, r3
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	e03c      	b.n	800491c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048a8:	d003      	beq.n	80048b2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048b0:	d134      	bne.n	800491c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80048b2:	4b1e      	ldr	r3, [pc, #120]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048be:	d12d      	bne.n	800491c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80048c0:	4b1a      	ldr	r3, [pc, #104]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d027      	beq.n	800491c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80048cc:	4b17      	ldr	r3, [pc, #92]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	3301      	adds	r3, #1
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80048e0:	4b12      	ldr	r3, [pc, #72]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	0a1b      	lsrs	r3, r3, #8
 80048e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ea:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80048f2:	4b0e      	ldr	r3, [pc, #56]	@ (800492c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80048fe:	2311      	movs	r3, #17
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e001      	b.n	8004908 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004904:	2307      	movs	r3, #7
 8004906:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	fb03 f202 	mul.w	r2, r3, r2
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	fbb2 f3f3 	udiv	r3, r2, r3
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	e000      	b.n	800491c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800491a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800491c:	69fb      	ldr	r3, [r7, #28]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3724      	adds	r7, #36	@ 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000
 8004930:	001fff68 	.word	0x001fff68

08004934 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d904      	bls.n	8004952 <HAL_SAI_InitProtocol+0x1e>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	3b03      	subs	r3, #3
 800494c:	2b01      	cmp	r3, #1
 800494e:	d812      	bhi.n	8004976 <HAL_SAI_InitProtocol+0x42>
 8004950:	e008      	b.n	8004964 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fba3 	bl	80050a4 <SAI_InitI2S>
 800495e:	4603      	mov	r3, r0
 8004960:	75fb      	strb	r3, [r7, #23]
      break;
 8004962:	e00b      	b.n	800497c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fc4c 	bl	8005208 <SAI_InitPCM>
 8004970:	4603      	mov	r3, r0
 8004972:	75fb      	strb	r3, [r7, #23]
      break;
 8004974:	e002      	b.n	800497c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	75fb      	strb	r3, [r7, #23]
      break;
 800497a:	bf00      	nop
  }

  if (status == HAL_OK)
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d104      	bne.n	800498c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f808 	bl	8004998 <HAL_SAI_Init>
 8004988:	4603      	mov	r3, r0
 800498a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800498c:	7dfb      	ldrb	r3, [r7, #23]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e155      	b.n	8004c56 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc fa0e 	bl	8000de0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fca1 	bl	800530c <SAI_Disable>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e140      	b.n	8004c56 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d00c      	beq.n	80049fe <HAL_SAI_Init+0x66>
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d80d      	bhi.n	8004a04 <HAL_SAI_Init+0x6c>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_SAI_Init+0x5a>
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d003      	beq.n	80049f8 <HAL_SAI_Init+0x60>
 80049f0:	e008      	b.n	8004a04 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
      break;
 80049f6:	e008      	b.n	8004a0a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80049f8:	2310      	movs	r3, #16
 80049fa:	61fb      	str	r3, [r7, #28]
      break;
 80049fc:	e005      	b.n	8004a0a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80049fe:	2320      	movs	r3, #32
 8004a00:	61fb      	str	r3, [r7, #28]
      break;
 8004a02:	e002      	b.n	8004a0a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]
      break;
 8004a08:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d81d      	bhi.n	8004a4e <HAL_SAI_Init+0xb6>
 8004a12:	a201      	add	r2, pc, #4	@ (adr r2, 8004a18 <HAL_SAI_Init+0x80>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a29 	.word	0x08004a29
 8004a1c:	08004a2f 	.word	0x08004a2f
 8004a20:	08004a37 	.word	0x08004a37
 8004a24:	08004a3f 	.word	0x08004a3f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
      break;
 8004a2c:	e012      	b.n	8004a54 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a32:	617b      	str	r3, [r7, #20]
      break;
 8004a34:	e00e      	b.n	8004a54 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a3a:	617b      	str	r3, [r7, #20]
      break;
 8004a3c:	e00a      	b.n	8004a54 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a42:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
      break;
 8004a4c:	e002      	b.n	8004a54 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
      break;
 8004a52:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a81      	ldr	r2, [pc, #516]	@ (8004c60 <HAL_SAI_Init+0x2c8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_SAI_Init+0xd0>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a80      	ldr	r2, [pc, #512]	@ (8004c64 <HAL_SAI_Init+0x2cc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004a68:	4a7f      	ldr	r2, [pc, #508]	@ (8004c68 <HAL_SAI_Init+0x2d0>)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e002      	b.n	8004a76 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004a70:	4a7e      	ldr	r2, [pc, #504]	@ (8004c6c <HAL_SAI_Init+0x2d4>)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d041      	beq.n	8004b02 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a77      	ldr	r2, [pc, #476]	@ (8004c60 <HAL_SAI_Init+0x2c8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_SAI_Init+0xfa>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a75      	ldr	r2, [pc, #468]	@ (8004c64 <HAL_SAI_Init+0x2cc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d105      	bne.n	8004a9e <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004a92:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004a96:	f7fe ff1d 	bl	80038d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a9a:	6138      	str	r0, [r7, #16]
 8004a9c:	e004      	b.n	8004aa8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004a9e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004aa2:	f7fe ff17 	bl	80038d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004aa6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	025b      	lsls	r3, r3, #9
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abe:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8004c70 <HAL_SAI_Init+0x2d8>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	08da      	lsrs	r2, r3, #3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	4b67      	ldr	r3, [pc, #412]	@ (8004c70 <HAL_SAI_Init+0x2d8>)
 8004ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ad6:	08da      	lsrs	r2, r3, #3
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	1aca      	subs	r2, r1, r3
 8004ae2:	2a08      	cmp	r2, #8
 8004ae4:	d904      	bls.n	8004af0 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d104      	bne.n	8004b02 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	085a      	lsrs	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_SAI_Init+0x17a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d109      	bne.n	8004b26 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_SAI_Init+0x186>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e001      	b.n	8004b22 <HAL_SAI_Init+0x18a>
 8004b1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	e008      	b.n	8004b38 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d102      	bne.n	8004b34 <HAL_SAI_Init+0x19c>
 8004b2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b32:	e000      	b.n	8004b36 <HAL_SAI_Init+0x19e>
 8004b34:	2300      	movs	r3, #0
 8004b36:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6819      	ldr	r1, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b4c      	ldr	r3, [pc, #304]	@ (8004c74 <HAL_SAI_Init+0x2dc>)
 8004b44:	400b      	ands	r3, r1
 8004b46:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b5c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b62:	431a      	orrs	r2, r3
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004b70:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b7c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	051b      	lsls	r3, r3, #20
 8004b84:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004b9c:	f023 030f 	bic.w	r3, r3, #15
 8004ba0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699a      	ldr	r2, [r3, #24]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6899      	ldr	r1, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b2b      	ldr	r3, [pc, #172]	@ (8004c78 <HAL_SAI_Init+0x2e0>)
 8004bcc:	400b      	ands	r3, r1
 8004bce:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6899      	ldr	r1, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004be0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004be6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004bec:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004bf6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68d9      	ldr	r1, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004c0e:	400b      	ands	r3, r1
 8004c10:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68d9      	ldr	r1, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c20:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c26:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004c28:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40015404 	.word	0x40015404
 8004c64:	40015424 	.word	0x40015424
 8004c68:	40015400 	.word	0x40015400
 8004c6c:	40015800 	.word	0x40015800
 8004c70:	cccccccd 	.word	0xcccccccd
 8004c74:	ff05c010 	.word	0xff05c010
 8004c78:	fff88000 	.word	0xfff88000

08004c7c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_SAI_Abort+0x1a>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e053      	b.n	8004d3e <HAL_SAI_Abort+0xc2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb34 	bl	800530c <SAI_Disable>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cbc:	d125      	bne.n	8004d0a <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004ccc:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b12      	cmp	r3, #18
 8004cd8:	d108      	bne.n	8004cec <HAL_SAI_Abort+0x70>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d004      	beq.n	8004cec <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc fcfa 	bl	80016e0 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b22      	cmp	r3, #34	@ 0x22
 8004cf6:	d108      	bne.n	8004d0a <HAL_SAI_Abort+0x8e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fc fceb 	bl	80016e0 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1a:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0208 	orr.w	r2, r2, #8
 8004d2a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8192 	beq.w	8005082 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d009      	beq.n	8004d94 <HAL_SAI_IRQHandler+0x4c>
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d004      	beq.n	8004d94 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
 8004d92:	e176      	b.n	8005082 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01e      	beq.n	8004ddc <HAL_SAI_IRQHandler+0x94>
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d019      	beq.n	8004ddc <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2201      	movs	r2, #1
 8004dae:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b22      	cmp	r3, #34	@ 0x22
 8004dba:	d101      	bne.n	8004dc0 <HAL_SAI_IRQHandler+0x78>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <HAL_SAI_IRQHandler+0x7a>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f95b 	bl	8005090 <HAL_SAI_ErrorCallback>
 8004dda:	e152      	b.n	8005082 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d011      	beq.n	8004e0a <HAL_SAI_IRQHandler+0xc2>
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00c      	beq.n	8004e0a <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2202      	movs	r2, #2
 8004df6:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8140 	beq.w	8005082 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e06:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8004e08:	e13b      	b.n	8005082 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d055      	beq.n	8004ec0 <HAL_SAI_IRQHandler+0x178>
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d050      	beq.n	8004ec0 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2220      	movs	r2, #32
 8004e24:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e2c:	f043 0204 	orr.w	r2, r3, #4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d038      	beq.n	8004eb2 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d016      	beq.n	8004e76 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e4c:	4a8f      	ldr	r2, [pc, #572]	@ (800508c <HAL_SAI_IRQHandler+0x344>)
 8004e4e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fc fc81 	bl	800175c <HAL_DMA_Abort_IT>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f90d 	bl	8005090 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80fc 	beq.w	8005078 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e84:	4a81      	ldr	r2, [pc, #516]	@ (800508c <HAL_SAI_IRQHandler+0x344>)
 8004e86:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fc fc65 	bl	800175c <HAL_DMA_Abort_IT>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80ef 	beq.w	8005078 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8f0 	bl	8005090 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004eb0:	e0e2      	b.n	8005078 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fee2 	bl	8004c7c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f8e9 	bl	8005090 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ebe:	e0db      	b.n	8005078 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d055      	beq.n	8004f76 <HAL_SAI_IRQHandler+0x22e>
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d050      	beq.n	8004f76 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2240      	movs	r2, #64	@ 0x40
 8004eda:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ee2:	f043 0208 	orr.w	r2, r3, #8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d038      	beq.n	8004f68 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d016      	beq.n	8004f2c <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f02:	4a62      	ldr	r2, [pc, #392]	@ (800508c <HAL_SAI_IRQHandler+0x344>)
 8004f04:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fc fc26 	bl	800175c <HAL_DMA_Abort_IT>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f8b2 	bl	8005090 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80a3 	beq.w	800507c <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3a:	4a54      	ldr	r2, [pc, #336]	@ (800508c <HAL_SAI_IRQHandler+0x344>)
 8004f3c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fc fc0a 	bl	800175c <HAL_DMA_Abort_IT>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 8096 	beq.w	800507c <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f895 	bl	8005090 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f66:	e089      	b.n	800507c <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fe87 	bl	8004c7c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f88e 	bl	8005090 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f74:	e082      	b.n	800507c <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d061      	beq.n	8005044 <HAL_SAI_IRQHandler+0x2fc>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d05c      	beq.n	8005044 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2204      	movs	r2, #4
 8004f90:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d036      	beq.n	800501a <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d016      	beq.n	8004fe2 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fb8:	4a34      	ldr	r2, [pc, #208]	@ (800508c <HAL_SAI_IRQHandler+0x344>)
 8004fba:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fc fbcb 	bl	800175c <HAL_DMA_Abort_IT>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f857 	bl	8005090 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d04a      	beq.n	8005080 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fee:	4a27      	ldr	r2, [pc, #156]	@ (800508c <HAL_SAI_IRQHandler+0x344>)
 8004ff0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fc fbb0 	bl	800175c <HAL_DMA_Abort_IT>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d03e      	beq.n	8005080 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005008:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f83c 	bl	8005090 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005018:	e032      	b.n	8005080 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f04f 32ff 	mov.w	r2, #4294967295
 800502a:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f827 	bl	8005090 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005042:	e01d      	b.n	8005080 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d019      	beq.n	8005082 <HAL_SAI_IRQHandler+0x33a>
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b00      	cmp	r3, #0
 8005056:	d014      	beq.n	8005082 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2210      	movs	r2, #16
 800505e:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005066:	f043 0210 	orr.w	r2, r3, #16
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f80d 	bl	8005090 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005076:	e004      	b.n	8005082 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005078:	bf00      	nop
 800507a:	e002      	b.n	8005082 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800507c:	bf00      	nop
 800507e:	e000      	b.n	8005082 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005080:	bf00      	nop
}
 8005082:	bf00      	nop
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	08005381 	.word	0x08005381

08005090 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <SAI_InitI2S+0x2e>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d103      	bne.n	80050da <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80050d8:	e002      	b.n	80050e0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80050e6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e077      	b.n	80051fa <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800511c:	651a      	str	r2, [r3, #80]	@ 0x50
 800511e:	e006      	b.n	800512e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005126:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d84f      	bhi.n	80051d4 <SAI_InitI2S+0x130>
 8005134:	a201      	add	r2, pc, #4	@ (adr r2, 800513c <SAI_InitI2S+0x98>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	0800514d 	.word	0x0800514d
 8005140:	0800516f 	.word	0x0800516f
 8005144:	08005191 	.word	0x08005191
 8005148:	080051b3 	.word	0x080051b3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2280      	movs	r2, #128	@ 0x80
 8005150:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	011a      	lsls	r2, r3, #4
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2240      	movs	r2, #64	@ 0x40
 800516a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800516c:	e035      	b.n	80051da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2280      	movs	r2, #128	@ 0x80
 8005172:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	019a      	lsls	r2, r3, #6
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2280      	movs	r2, #128	@ 0x80
 800518c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800518e:	e024      	b.n	80051da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	22c0      	movs	r2, #192	@ 0xc0
 8005194:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	019a      	lsls	r2, r3, #6
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2280      	movs	r2, #128	@ 0x80
 80051ae:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80051b0:	e013      	b.n	80051da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	22e0      	movs	r2, #224	@ 0xe0
 80051b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	019a      	lsls	r2, r3, #6
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2280      	movs	r2, #128	@ 0x80
 80051d0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80051d2:	e002      	b.n	80051da <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	75fb      	strb	r3, [r7, #23]
      break;
 80051d8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d10b      	bne.n	80051f8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d102      	bne.n	80051ec <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2210      	movs	r2, #16
 80051ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d102      	bne.n	80051f8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2208      	movs	r2, #8
 80051f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop

08005208 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <SAI_InitPCM+0x2e>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d103      	bne.n	800523e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800523c:	e002      	b.n	8005244 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005250:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005258:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800526c:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b04      	cmp	r3, #4
 8005272:	d103      	bne.n	800527c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44
 800527a:	e002      	b.n	8005282 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	220d      	movs	r2, #13
 8005280:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b03      	cmp	r3, #3
 8005286:	d837      	bhi.n	80052f8 <SAI_InitPCM+0xf0>
 8005288:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <SAI_InitPCM+0x88>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052a1 	.word	0x080052a1
 8005294:	080052b7 	.word	0x080052b7
 8005298:	080052cd 	.word	0x080052cd
 800529c:	080052e3 	.word	0x080052e3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2280      	movs	r2, #128	@ 0x80
 80052a4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	011a      	lsls	r2, r3, #4
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2240      	movs	r2, #64	@ 0x40
 80052b2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80052b4:	e023      	b.n	80052fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2280      	movs	r2, #128	@ 0x80
 80052ba:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2280      	movs	r2, #128	@ 0x80
 80052c8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80052ca:	e018      	b.n	80052fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	22c0      	movs	r2, #192	@ 0xc0
 80052d0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2280      	movs	r2, #128	@ 0x80
 80052de:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80052e0:	e00d      	b.n	80052fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	22e0      	movs	r2, #224	@ 0xe0
 80052e6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2280      	movs	r2, #128	@ 0x80
 80052f4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80052f6:	e002      	b.n	80052fe <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
      break;
 80052fc:	bf00      	nop
  }

  return status;
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005300:	4618      	mov	r0, r3
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005314:	4b18      	ldr	r3, [pc, #96]	@ (8005378 <SAI_Disable+0x6c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a18      	ldr	r2, [pc, #96]	@ (800537c <SAI_Disable+0x70>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	0b1b      	lsrs	r3, r3, #12
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005336:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005344:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	72fb      	strb	r3, [r7, #11]
      break;
 8005352:	e009      	b.n	8005368 <SAI_Disable+0x5c>
    }
    count--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3b01      	subs	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e7      	bne.n	8005338 <SAI_Disable+0x2c>

  return status;
 8005368:	7afb      	ldrb	r3, [r7, #11]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000000 	.word	0x20000000
 800537c:	95cbec1b 	.word	0x95cbec1b

08005380 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800539c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f04f 32ff 	mov.w	r2, #4294967295
 80053ae:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d00a      	beq.n	80053d0 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff ffa6 	bl	800530c <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0208 	orr.w	r2, r2, #8
 80053ce:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f7ff fe55 	bl	8005090 <HAL_SAI_ErrorCallback>
#endif
}
 80053e6:	bf00      	nop
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e095      	b.n	800552c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d108      	bne.n	800541a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005410:	d009      	beq.n	8005426 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	61da      	str	r2, [r3, #28]
 8005418:	e005      	b.n	8005426 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d106      	bne.n	8005446 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7fb fc0f 	bl	8000c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800545c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005466:	d902      	bls.n	800546e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e002      	b.n	8005474 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800546e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005472:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800547c:	d007      	beq.n	800548e <HAL_SPI_Init+0xa0>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005486:	d002      	beq.n	800548e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d0:	ea42 0103 	orr.w	r1, r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	f003 0204 	and.w	r2, r3, #4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800550a:	ea42 0103 	orr.w	r1, r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005544:	f7fb fed2 	bl	80012ec <HAL_GetTick>
 8005548:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b01      	cmp	r3, #1
 8005558:	d001      	beq.n	800555e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800555a:	2302      	movs	r3, #2
 800555c:	e15c      	b.n	8005818 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_SPI_Transmit+0x36>
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e154      	b.n	8005818 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_SPI_Transmit+0x48>
 8005578:	2302      	movs	r3, #2
 800557a:	e14d      	b.n	8005818 <HAL_SPI_Transmit+0x2e4>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2203      	movs	r2, #3
 8005588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ce:	d10f      	bne.n	80055f0 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fa:	2b40      	cmp	r3, #64	@ 0x40
 80055fc:	d007      	beq.n	800560e <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800560c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005616:	d952      	bls.n	80056be <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_SPI_Transmit+0xf2>
 8005620:	8b7b      	ldrh	r3, [r7, #26]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d145      	bne.n	80056b2 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800564a:	e032      	b.n	80056b2 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b02      	cmp	r3, #2
 8005658:	d112      	bne.n	8005680 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565e:	881a      	ldrh	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566a:	1c9a      	adds	r2, r3, #2
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800567e:	e018      	b.n	80056b2 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005680:	f7fb fe34 	bl	80012ec <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d803      	bhi.n	8005698 <HAL_SPI_Transmit+0x164>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d102      	bne.n	800569e <HAL_SPI_Transmit+0x16a>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e0b2      	b.n	8005818 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1c7      	bne.n	800564c <HAL_SPI_Transmit+0x118>
 80056bc:	e083      	b.n	80057c6 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_SPI_Transmit+0x198>
 80056c6:	8b7b      	ldrh	r3, [r7, #26]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d177      	bne.n	80057bc <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d912      	bls.n	80056fc <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e6:	1c9a      	adds	r2, r3, #2
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b02      	subs	r3, #2
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056fa:	e05f      	b.n	80057bc <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005722:	e04b      	b.n	80057bc <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d12b      	bne.n	800578a <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d912      	bls.n	8005762 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b02      	subs	r3, #2
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005760:	e02c      	b.n	80057bc <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005788:	e018      	b.n	80057bc <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800578a:	f7fb fdaf 	bl	80012ec <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d803      	bhi.n	80057a2 <HAL_SPI_Transmit+0x26e>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d102      	bne.n	80057a8 <HAL_SPI_Transmit+0x274>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d109      	bne.n	80057bc <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e02d      	b.n	8005818 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1ae      	bne.n	8005724 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 f946 	bl	8005a5c <SPI_EndRxTxTransaction>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005816:	2300      	movs	r3, #0
  }
}
 8005818:	4618      	mov	r0, r3
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005830:	f7fb fd5c 	bl	80012ec <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	4413      	add	r3, r2
 800583e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005840:	f7fb fd54 	bl	80012ec <HAL_GetTick>
 8005844:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005846:	4b39      	ldr	r3, [pc, #228]	@ (800592c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	015b      	lsls	r3, r3, #5
 800584c:	0d1b      	lsrs	r3, r3, #20
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	fb02 f303 	mul.w	r3, r2, r3
 8005854:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005856:	e054      	b.n	8005902 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d050      	beq.n	8005902 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005860:	f7fb fd44 	bl	80012ec <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	429a      	cmp	r2, r3
 800586e:	d902      	bls.n	8005876 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d13d      	bne.n	80058f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005884:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800588e:	d111      	bne.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005898:	d004      	beq.n	80058a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a2:	d107      	bne.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058bc:	d10f      	bne.n	80058de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e017      	b.n	8005922 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	3b01      	subs	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4013      	ands	r3, r2
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	429a      	cmp	r2, r3
 8005910:	bf0c      	ite	eq
 8005912:	2301      	moveq	r3, #1
 8005914:	2300      	movne	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	429a      	cmp	r2, r3
 800591e:	d19b      	bne.n	8005858 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000000 	.word	0x20000000

08005930 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	@ 0x28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005942:	f7fb fcd3 	bl	80012ec <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	4413      	add	r3, r2
 8005950:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005952:	f7fb fccb 	bl	80012ec <HAL_GetTick>
 8005956:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005960:	4b3d      	ldr	r3, [pc, #244]	@ (8005a58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	00da      	lsls	r2, r3, #3
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	0d1b      	lsrs	r3, r3, #20
 8005970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005978:	e060      	b.n	8005a3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005980:	d107      	bne.n	8005992 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005990:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d050      	beq.n	8005a3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800599a:	f7fb fca7 	bl	80012ec <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d902      	bls.n	80059b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d13d      	bne.n	8005a2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059c8:	d111      	bne.n	80059ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d2:	d004      	beq.n	80059de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059dc:	d107      	bne.n	80059ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059f6:	d10f      	bne.n	8005a18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e010      	b.n	8005a4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689a      	ldr	r2, [r3, #8]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4013      	ands	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d196      	bne.n	800597a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3728      	adds	r7, #40	@ 0x28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000000 	.word	0x20000000

08005a5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff ff5b 	bl	8005930 <SPI_WaitFifoStateUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a84:	f043 0220 	orr.w	r2, r3, #32
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e027      	b.n	8005ae0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	2180      	movs	r1, #128	@ 0x80
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f7ff fec0 	bl	8005820 <SPI_WaitFlagStateUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aaa:	f043 0220 	orr.w	r2, r3, #32
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e014      	b.n	8005ae0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff ff34 	bl	8005930 <SPI_WaitFifoStateUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e000      	b.n	8005ae0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e040      	b.n	8005b7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fb f90c 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	@ 0x24
 8005b14:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0201 	bic.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fb6a 	bl	8006208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8af 	bl	8005c98 <UART_SetConfig>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e01b      	b.n	8005b7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fbe9 	bl	800634c <UART_CheckIdleState>
 8005b7a:	4603      	mov	r3, r0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	@ 0x28
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d177      	bne.n	8005c8c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_UART_Transmit+0x24>
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e070      	b.n	8005c8e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2221      	movs	r2, #33	@ 0x21
 8005bb8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bba:	f7fb fb97 	bl	80012ec <HAL_GetTick>
 8005bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	88fa      	ldrh	r2, [r7, #6]
 8005bc4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	88fa      	ldrh	r2, [r7, #6]
 8005bcc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd8:	d108      	bne.n	8005bec <HAL_UART_Transmit+0x68>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	61bb      	str	r3, [r7, #24]
 8005bea:	e003      	b.n	8005bf4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bf4:	e02f      	b.n	8005c56 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2180      	movs	r1, #128	@ 0x80
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fc4b 	bl	800649c <UART_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e03b      	b.n	8005c8e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10b      	bne.n	8005c34 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	881a      	ldrh	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c28:	b292      	uxth	r2, r2
 8005c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	3302      	adds	r3, #2
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	e007      	b.n	8005c44 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	3301      	adds	r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1c9      	bne.n	8005bf6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2140      	movs	r1, #64	@ 0x40
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fc15 	bl	800649c <UART_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e005      	b.n	8005c8e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e000      	b.n	8005c8e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
  }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c9c:	b08a      	sub	sp, #40	@ 0x28
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4ba4      	ldr	r3, [pc, #656]	@ (8005f58 <UART_SetConfig+0x2c0>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a99      	ldr	r2, [pc, #612]	@ (8005f5c <UART_SetConfig+0x2c4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d00:	4313      	orrs	r3, r2
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d14:	430a      	orrs	r2, r1
 8005d16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a90      	ldr	r2, [pc, #576]	@ (8005f60 <UART_SetConfig+0x2c8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d126      	bne.n	8005d70 <UART_SetConfig+0xd8>
 8005d22:	4b90      	ldr	r3, [pc, #576]	@ (8005f64 <UART_SetConfig+0x2cc>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d81b      	bhi.n	8005d68 <UART_SetConfig+0xd0>
 8005d30:	a201      	add	r2, pc, #4	@ (adr r2, 8005d38 <UART_SetConfig+0xa0>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d49 	.word	0x08005d49
 8005d3c:	08005d59 	.word	0x08005d59
 8005d40:	08005d51 	.word	0x08005d51
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d4e:	e116      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005d50:	2302      	movs	r3, #2
 8005d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d56:	e112      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d5e:	e10e      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005d60:	2308      	movs	r3, #8
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d66:	e10a      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d6e:	e106      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a7c      	ldr	r2, [pc, #496]	@ (8005f68 <UART_SetConfig+0x2d0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d138      	bne.n	8005dec <UART_SetConfig+0x154>
 8005d7a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f64 <UART_SetConfig+0x2cc>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d80:	f003 030c 	and.w	r3, r3, #12
 8005d84:	2b0c      	cmp	r3, #12
 8005d86:	d82d      	bhi.n	8005de4 <UART_SetConfig+0x14c>
 8005d88:	a201      	add	r2, pc, #4	@ (adr r2, 8005d90 <UART_SetConfig+0xf8>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005de5 	.word	0x08005de5
 8005d98:	08005de5 	.word	0x08005de5
 8005d9c:	08005de5 	.word	0x08005de5
 8005da0:	08005dd5 	.word	0x08005dd5
 8005da4:	08005de5 	.word	0x08005de5
 8005da8:	08005de5 	.word	0x08005de5
 8005dac:	08005de5 	.word	0x08005de5
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	08005de5 	.word	0x08005de5
 8005db8:	08005de5 	.word	0x08005de5
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ddd 	.word	0x08005ddd
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dca:	e0d8      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd2:	e0d4      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dda:	e0d0      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005ddc:	2308      	movs	r3, #8
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de2:	e0cc      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005de4:	2310      	movs	r3, #16
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dea:	e0c8      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a5e      	ldr	r2, [pc, #376]	@ (8005f6c <UART_SetConfig+0x2d4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d125      	bne.n	8005e42 <UART_SetConfig+0x1aa>
 8005df6:	4b5b      	ldr	r3, [pc, #364]	@ (8005f64 <UART_SetConfig+0x2cc>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e00:	2b30      	cmp	r3, #48	@ 0x30
 8005e02:	d016      	beq.n	8005e32 <UART_SetConfig+0x19a>
 8005e04:	2b30      	cmp	r3, #48	@ 0x30
 8005e06:	d818      	bhi.n	8005e3a <UART_SetConfig+0x1a2>
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d00a      	beq.n	8005e22 <UART_SetConfig+0x18a>
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d814      	bhi.n	8005e3a <UART_SetConfig+0x1a2>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <UART_SetConfig+0x182>
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d008      	beq.n	8005e2a <UART_SetConfig+0x192>
 8005e18:	e00f      	b.n	8005e3a <UART_SetConfig+0x1a2>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e20:	e0ad      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005e22:	2302      	movs	r3, #2
 8005e24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e28:	e0a9      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e30:	e0a5      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005e32:	2308      	movs	r3, #8
 8005e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e38:	e0a1      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e40:	e09d      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a4a      	ldr	r2, [pc, #296]	@ (8005f70 <UART_SetConfig+0x2d8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d125      	bne.n	8005e98 <UART_SetConfig+0x200>
 8005e4c:	4b45      	ldr	r3, [pc, #276]	@ (8005f64 <UART_SetConfig+0x2cc>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e58:	d016      	beq.n	8005e88 <UART_SetConfig+0x1f0>
 8005e5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e5c:	d818      	bhi.n	8005e90 <UART_SetConfig+0x1f8>
 8005e5e:	2b80      	cmp	r3, #128	@ 0x80
 8005e60:	d00a      	beq.n	8005e78 <UART_SetConfig+0x1e0>
 8005e62:	2b80      	cmp	r3, #128	@ 0x80
 8005e64:	d814      	bhi.n	8005e90 <UART_SetConfig+0x1f8>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <UART_SetConfig+0x1d8>
 8005e6a:	2b40      	cmp	r3, #64	@ 0x40
 8005e6c:	d008      	beq.n	8005e80 <UART_SetConfig+0x1e8>
 8005e6e:	e00f      	b.n	8005e90 <UART_SetConfig+0x1f8>
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e76:	e082      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7e:	e07e      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e07a      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e076      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e072      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a35      	ldr	r2, [pc, #212]	@ (8005f74 <UART_SetConfig+0x2dc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d12a      	bne.n	8005ef8 <UART_SetConfig+0x260>
 8005ea2:	4b30      	ldr	r3, [pc, #192]	@ (8005f64 <UART_SetConfig+0x2cc>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb0:	d01a      	beq.n	8005ee8 <UART_SetConfig+0x250>
 8005eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb6:	d81b      	bhi.n	8005ef0 <UART_SetConfig+0x258>
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ebc:	d00c      	beq.n	8005ed8 <UART_SetConfig+0x240>
 8005ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec2:	d815      	bhi.n	8005ef0 <UART_SetConfig+0x258>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <UART_SetConfig+0x238>
 8005ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ecc:	d008      	beq.n	8005ee0 <UART_SetConfig+0x248>
 8005ece:	e00f      	b.n	8005ef0 <UART_SetConfig+0x258>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed6:	e052      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ede:	e04e      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee6:	e04a      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005ee8:	2308      	movs	r3, #8
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eee:	e046      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef6:	e042      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a17      	ldr	r2, [pc, #92]	@ (8005f5c <UART_SetConfig+0x2c4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d13a      	bne.n	8005f78 <UART_SetConfig+0x2e0>
 8005f02:	4b18      	ldr	r3, [pc, #96]	@ (8005f64 <UART_SetConfig+0x2cc>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f10:	d01a      	beq.n	8005f48 <UART_SetConfig+0x2b0>
 8005f12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f16:	d81b      	bhi.n	8005f50 <UART_SetConfig+0x2b8>
 8005f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f1c:	d00c      	beq.n	8005f38 <UART_SetConfig+0x2a0>
 8005f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f22:	d815      	bhi.n	8005f50 <UART_SetConfig+0x2b8>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <UART_SetConfig+0x298>
 8005f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f2c:	d008      	beq.n	8005f40 <UART_SetConfig+0x2a8>
 8005f2e:	e00f      	b.n	8005f50 <UART_SetConfig+0x2b8>
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f36:	e022      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f3e:	e01e      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005f40:	2304      	movs	r3, #4
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f46:	e01a      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005f48:	2308      	movs	r3, #8
 8005f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4e:	e016      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005f50:	2310      	movs	r3, #16
 8005f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f56:	e012      	b.n	8005f7e <UART_SetConfig+0x2e6>
 8005f58:	efff69f3 	.word	0xefff69f3
 8005f5c:	40008000 	.word	0x40008000
 8005f60:	40013800 	.word	0x40013800
 8005f64:	40021000 	.word	0x40021000
 8005f68:	40004400 	.word	0x40004400
 8005f6c:	40004800 	.word	0x40004800
 8005f70:	40004c00 	.word	0x40004c00
 8005f74:	40005000 	.word	0x40005000
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a9f      	ldr	r2, [pc, #636]	@ (8006200 <UART_SetConfig+0x568>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d17a      	bne.n	800607e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d824      	bhi.n	8005fda <UART_SetConfig+0x342>
 8005f90:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <UART_SetConfig+0x300>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fdb 	.word	0x08005fdb
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fdb 	.word	0x08005fdb
 8005fa8:	08005fcb 	.word	0x08005fcb
 8005fac:	08005fdb 	.word	0x08005fdb
 8005fb0:	08005fdb 	.word	0x08005fdb
 8005fb4:	08005fdb 	.word	0x08005fdb
 8005fb8:	08005fd3 	.word	0x08005fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fd f914 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8005fc0:	61f8      	str	r0, [r7, #28]
        break;
 8005fc2:	e010      	b.n	8005fe6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8006204 <UART_SetConfig+0x56c>)
 8005fc6:	61fb      	str	r3, [r7, #28]
        break;
 8005fc8:	e00d      	b.n	8005fe6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fca:	f7fd f875 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8005fce:	61f8      	str	r0, [r7, #28]
        break;
 8005fd0:	e009      	b.n	8005fe6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fd6:	61fb      	str	r3, [r7, #28]
        break;
 8005fd8:	e005      	b.n	8005fe6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005fe4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80fb 	beq.w	80061e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	4413      	add	r3, r2
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d305      	bcc.n	800600a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	429a      	cmp	r2, r3
 8006008:	d903      	bls.n	8006012 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006010:	e0e8      	b.n	80061e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	2200      	movs	r2, #0
 8006016:	461c      	mov	r4, r3
 8006018:	4615      	mov	r5, r2
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	022b      	lsls	r3, r5, #8
 8006024:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006028:	0222      	lsls	r2, r4, #8
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	6849      	ldr	r1, [r1, #4]
 800602e:	0849      	lsrs	r1, r1, #1
 8006030:	2000      	movs	r0, #0
 8006032:	4688      	mov	r8, r1
 8006034:	4681      	mov	r9, r0
 8006036:	eb12 0a08 	adds.w	sl, r2, r8
 800603a:	eb43 0b09 	adc.w	fp, r3, r9
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	603b      	str	r3, [r7, #0]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604c:	4650      	mov	r0, sl
 800604e:	4659      	mov	r1, fp
 8006050:	f7fa f90e 	bl	8000270 <__aeabi_uldivmod>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4613      	mov	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006062:	d308      	bcc.n	8006076 <UART_SetConfig+0x3de>
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800606a:	d204      	bcs.n	8006076 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	60da      	str	r2, [r3, #12]
 8006074:	e0b6      	b.n	80061e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800607c:	e0b2      	b.n	80061e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006086:	d15e      	bne.n	8006146 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006088:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800608c:	2b08      	cmp	r3, #8
 800608e:	d828      	bhi.n	80060e2 <UART_SetConfig+0x44a>
 8006090:	a201      	add	r2, pc, #4	@ (adr r2, 8006098 <UART_SetConfig+0x400>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060e3 	.word	0x080060e3
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	080060e3 	.word	0x080060e3
 80060b0:	080060e3 	.word	0x080060e3
 80060b4:	080060e3 	.word	0x080060e3
 80060b8:	080060db 	.word	0x080060db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7fd f894 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 80060c0:	61f8      	str	r0, [r7, #28]
        break;
 80060c2:	e014      	b.n	80060ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c4:	f7fd f8a6 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 80060c8:	61f8      	str	r0, [r7, #28]
        break;
 80060ca:	e010      	b.n	80060ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060cc:	4b4d      	ldr	r3, [pc, #308]	@ (8006204 <UART_SetConfig+0x56c>)
 80060ce:	61fb      	str	r3, [r7, #28]
        break;
 80060d0:	e00d      	b.n	80060ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d2:	f7fc fff1 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 80060d6:	61f8      	str	r0, [r7, #28]
        break;
 80060d8:	e009      	b.n	80060ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060de:	61fb      	str	r3, [r7, #28]
        break;
 80060e0:	e005      	b.n	80060ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d077      	beq.n	80061e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	005a      	lsls	r2, r3, #1
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	441a      	add	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	fbb2 f3f3 	udiv	r3, r2, r3
 8006108:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b0f      	cmp	r3, #15
 800610e:	d916      	bls.n	800613e <UART_SetConfig+0x4a6>
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006116:	d212      	bcs.n	800613e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f023 030f 	bic.w	r3, r3, #15
 8006120:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	085b      	lsrs	r3, r3, #1
 8006126:	b29b      	uxth	r3, r3
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	b29a      	uxth	r2, r3
 800612e:	8afb      	ldrh	r3, [r7, #22]
 8006130:	4313      	orrs	r3, r2
 8006132:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	8afa      	ldrh	r2, [r7, #22]
 800613a:	60da      	str	r2, [r3, #12]
 800613c:	e052      	b.n	80061e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006144:	e04e      	b.n	80061e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006146:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800614a:	2b08      	cmp	r3, #8
 800614c:	d827      	bhi.n	800619e <UART_SetConfig+0x506>
 800614e:	a201      	add	r2, pc, #4	@ (adr r2, 8006154 <UART_SetConfig+0x4bc>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	08006179 	.word	0x08006179
 8006158:	08006181 	.word	0x08006181
 800615c:	08006189 	.word	0x08006189
 8006160:	0800619f 	.word	0x0800619f
 8006164:	0800618f 	.word	0x0800618f
 8006168:	0800619f 	.word	0x0800619f
 800616c:	0800619f 	.word	0x0800619f
 8006170:	0800619f 	.word	0x0800619f
 8006174:	08006197 	.word	0x08006197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006178:	f7fd f836 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 800617c:	61f8      	str	r0, [r7, #28]
        break;
 800617e:	e014      	b.n	80061aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006180:	f7fd f848 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8006184:	61f8      	str	r0, [r7, #28]
        break;
 8006186:	e010      	b.n	80061aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006188:	4b1e      	ldr	r3, [pc, #120]	@ (8006204 <UART_SetConfig+0x56c>)
 800618a:	61fb      	str	r3, [r7, #28]
        break;
 800618c:	e00d      	b.n	80061aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800618e:	f7fc ff93 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8006192:	61f8      	str	r0, [r7, #28]
        break;
 8006194:	e009      	b.n	80061aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800619a:	61fb      	str	r3, [r7, #28]
        break;
 800619c:	e005      	b.n	80061aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061a8:	bf00      	nop
    }

    if (pclk != 0U)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d019      	beq.n	80061e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	085a      	lsrs	r2, r3, #1
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	441a      	add	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b0f      	cmp	r3, #15
 80061c8:	d909      	bls.n	80061de <UART_SetConfig+0x546>
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d0:	d205      	bcs.n	80061de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60da      	str	r2, [r3, #12]
 80061dc:	e002      	b.n	80061e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80061f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3728      	adds	r7, #40	@ 0x28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061fe:	bf00      	nop
 8006200:	40008000 	.word	0x40008000
 8006204:	00f42400 	.word	0x00f42400

08006208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01a      	beq.n	800631e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006306:	d10a      	bne.n	800631e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
  }
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b098      	sub	sp, #96	@ 0x60
 8006350:	af02      	add	r7, sp, #8
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800635c:	f7fa ffc6 	bl	80012ec <HAL_GetTick>
 8006360:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b08      	cmp	r3, #8
 800636e:	d12e      	bne.n	80063ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006378:	2200      	movs	r2, #0
 800637a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f88c 	bl	800649c <UART_WaitOnFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d021      	beq.n	80063ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800639a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800639e:	653b      	str	r3, [r7, #80]	@ 0x50
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e6      	bne.n	800638a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e062      	b.n	8006494 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d149      	bne.n	8006470 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063e4:	2200      	movs	r2, #0
 80063e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f856 	bl	800649c <UART_WaitOnFlagUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d03c      	beq.n	8006470 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	623b      	str	r3, [r7, #32]
   return(result);
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800640a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006414:	633b      	str	r3, [r7, #48]	@ 0x30
 8006416:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800641a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e6      	bne.n	80063f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3308      	adds	r3, #8
 800642e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	60fb      	str	r3, [r7, #12]
   return(result);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006448:	61fa      	str	r2, [r7, #28]
 800644a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	69b9      	ldr	r1, [r7, #24]
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	617b      	str	r3, [r7, #20]
   return(result);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e5      	bne.n	8006428 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e011      	b.n	8006494 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2220      	movs	r2, #32
 800647a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3758      	adds	r7, #88	@ 0x58
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ac:	e04f      	b.n	800654e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d04b      	beq.n	800654e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b6:	f7fa ff19 	bl	80012ec <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d302      	bcc.n	80064cc <UART_WaitOnFlagUntilTimeout+0x30>
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e04e      	b.n	800656e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0304 	and.w	r3, r3, #4
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d037      	beq.n	800654e <UART_WaitOnFlagUntilTimeout+0xb2>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b80      	cmp	r3, #128	@ 0x80
 80064e2:	d034      	beq.n	800654e <UART_WaitOnFlagUntilTimeout+0xb2>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b40      	cmp	r3, #64	@ 0x40
 80064e8:	d031      	beq.n	800654e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d110      	bne.n	800651a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2208      	movs	r2, #8
 80064fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 f838 	bl	8006576 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2208      	movs	r2, #8
 800650a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e029      	b.n	800656e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006528:	d111      	bne.n	800654e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f81e 	bl	8006576 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e00f      	b.n	800656e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4013      	ands	r3, r2
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	429a      	cmp	r2, r3
 800655c:	bf0c      	ite	eq
 800655e:	2301      	moveq	r3, #1
 8006560:	2300      	movne	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	429a      	cmp	r2, r3
 800656a:	d0a0      	beq.n	80064ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006576:	b480      	push	{r7}
 8006578:	b095      	sub	sp, #84	@ 0x54
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800658c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800659c:	643b      	str	r3, [r7, #64]	@ 0x40
 800659e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e6      	bne.n	800657e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3308      	adds	r3, #8
 80065b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	61fb      	str	r3, [r7, #28]
   return(result);
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3308      	adds	r3, #8
 80065ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e5      	bne.n	80065b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d118      	bne.n	800661e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f023 0310 	bic.w	r3, r3, #16
 8006600:	647b      	str	r3, [r7, #68]	@ 0x44
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6979      	ldr	r1, [r7, #20]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	613b      	str	r3, [r7, #16]
   return(result);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e6      	bne.n	80065ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006632:	bf00      	nop
 8006634:	3754      	adds	r7, #84	@ 0x54
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <std>:
 8006640:	2300      	movs	r3, #0
 8006642:	b510      	push	{r4, lr}
 8006644:	4604      	mov	r4, r0
 8006646:	e9c0 3300 	strd	r3, r3, [r0]
 800664a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800664e:	6083      	str	r3, [r0, #8]
 8006650:	8181      	strh	r1, [r0, #12]
 8006652:	6643      	str	r3, [r0, #100]	@ 0x64
 8006654:	81c2      	strh	r2, [r0, #14]
 8006656:	6183      	str	r3, [r0, #24]
 8006658:	4619      	mov	r1, r3
 800665a:	2208      	movs	r2, #8
 800665c:	305c      	adds	r0, #92	@ 0x5c
 800665e:	f000 f9f9 	bl	8006a54 <memset>
 8006662:	4b0d      	ldr	r3, [pc, #52]	@ (8006698 <std+0x58>)
 8006664:	6263      	str	r3, [r4, #36]	@ 0x24
 8006666:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <std+0x5c>)
 8006668:	62a3      	str	r3, [r4, #40]	@ 0x28
 800666a:	4b0d      	ldr	r3, [pc, #52]	@ (80066a0 <std+0x60>)
 800666c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800666e:	4b0d      	ldr	r3, [pc, #52]	@ (80066a4 <std+0x64>)
 8006670:	6323      	str	r3, [r4, #48]	@ 0x30
 8006672:	4b0d      	ldr	r3, [pc, #52]	@ (80066a8 <std+0x68>)
 8006674:	6224      	str	r4, [r4, #32]
 8006676:	429c      	cmp	r4, r3
 8006678:	d006      	beq.n	8006688 <std+0x48>
 800667a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800667e:	4294      	cmp	r4, r2
 8006680:	d002      	beq.n	8006688 <std+0x48>
 8006682:	33d0      	adds	r3, #208	@ 0xd0
 8006684:	429c      	cmp	r4, r3
 8006686:	d105      	bne.n	8006694 <std+0x54>
 8006688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800668c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006690:	f000 ba58 	b.w	8006b44 <__retarget_lock_init_recursive>
 8006694:	bd10      	pop	{r4, pc}
 8006696:	bf00      	nop
 8006698:	080068a5 	.word	0x080068a5
 800669c:	080068c7 	.word	0x080068c7
 80066a0:	080068ff 	.word	0x080068ff
 80066a4:	08006923 	.word	0x08006923
 80066a8:	20000368 	.word	0x20000368

080066ac <stdio_exit_handler>:
 80066ac:	4a02      	ldr	r2, [pc, #8]	@ (80066b8 <stdio_exit_handler+0xc>)
 80066ae:	4903      	ldr	r1, [pc, #12]	@ (80066bc <stdio_exit_handler+0x10>)
 80066b0:	4803      	ldr	r0, [pc, #12]	@ (80066c0 <stdio_exit_handler+0x14>)
 80066b2:	f000 b869 	b.w	8006788 <_fwalk_sglue>
 80066b6:	bf00      	nop
 80066b8:	2000000c 	.word	0x2000000c
 80066bc:	080073e5 	.word	0x080073e5
 80066c0:	2000001c 	.word	0x2000001c

080066c4 <cleanup_stdio>:
 80066c4:	6841      	ldr	r1, [r0, #4]
 80066c6:	4b0c      	ldr	r3, [pc, #48]	@ (80066f8 <cleanup_stdio+0x34>)
 80066c8:	4299      	cmp	r1, r3
 80066ca:	b510      	push	{r4, lr}
 80066cc:	4604      	mov	r4, r0
 80066ce:	d001      	beq.n	80066d4 <cleanup_stdio+0x10>
 80066d0:	f000 fe88 	bl	80073e4 <_fflush_r>
 80066d4:	68a1      	ldr	r1, [r4, #8]
 80066d6:	4b09      	ldr	r3, [pc, #36]	@ (80066fc <cleanup_stdio+0x38>)
 80066d8:	4299      	cmp	r1, r3
 80066da:	d002      	beq.n	80066e2 <cleanup_stdio+0x1e>
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 fe81 	bl	80073e4 <_fflush_r>
 80066e2:	68e1      	ldr	r1, [r4, #12]
 80066e4:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <cleanup_stdio+0x3c>)
 80066e6:	4299      	cmp	r1, r3
 80066e8:	d004      	beq.n	80066f4 <cleanup_stdio+0x30>
 80066ea:	4620      	mov	r0, r4
 80066ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f0:	f000 be78 	b.w	80073e4 <_fflush_r>
 80066f4:	bd10      	pop	{r4, pc}
 80066f6:	bf00      	nop
 80066f8:	20000368 	.word	0x20000368
 80066fc:	200003d0 	.word	0x200003d0
 8006700:	20000438 	.word	0x20000438

08006704 <global_stdio_init.part.0>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4b0b      	ldr	r3, [pc, #44]	@ (8006734 <global_stdio_init.part.0+0x30>)
 8006708:	4c0b      	ldr	r4, [pc, #44]	@ (8006738 <global_stdio_init.part.0+0x34>)
 800670a:	4a0c      	ldr	r2, [pc, #48]	@ (800673c <global_stdio_init.part.0+0x38>)
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	4620      	mov	r0, r4
 8006710:	2200      	movs	r2, #0
 8006712:	2104      	movs	r1, #4
 8006714:	f7ff ff94 	bl	8006640 <std>
 8006718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800671c:	2201      	movs	r2, #1
 800671e:	2109      	movs	r1, #9
 8006720:	f7ff ff8e 	bl	8006640 <std>
 8006724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006728:	2202      	movs	r2, #2
 800672a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800672e:	2112      	movs	r1, #18
 8006730:	f7ff bf86 	b.w	8006640 <std>
 8006734:	200004a0 	.word	0x200004a0
 8006738:	20000368 	.word	0x20000368
 800673c:	080066ad 	.word	0x080066ad

08006740 <__sfp_lock_acquire>:
 8006740:	4801      	ldr	r0, [pc, #4]	@ (8006748 <__sfp_lock_acquire+0x8>)
 8006742:	f000 ba00 	b.w	8006b46 <__retarget_lock_acquire_recursive>
 8006746:	bf00      	nop
 8006748:	200004a9 	.word	0x200004a9

0800674c <__sfp_lock_release>:
 800674c:	4801      	ldr	r0, [pc, #4]	@ (8006754 <__sfp_lock_release+0x8>)
 800674e:	f000 b9fb 	b.w	8006b48 <__retarget_lock_release_recursive>
 8006752:	bf00      	nop
 8006754:	200004a9 	.word	0x200004a9

08006758 <__sinit>:
 8006758:	b510      	push	{r4, lr}
 800675a:	4604      	mov	r4, r0
 800675c:	f7ff fff0 	bl	8006740 <__sfp_lock_acquire>
 8006760:	6a23      	ldr	r3, [r4, #32]
 8006762:	b11b      	cbz	r3, 800676c <__sinit+0x14>
 8006764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006768:	f7ff bff0 	b.w	800674c <__sfp_lock_release>
 800676c:	4b04      	ldr	r3, [pc, #16]	@ (8006780 <__sinit+0x28>)
 800676e:	6223      	str	r3, [r4, #32]
 8006770:	4b04      	ldr	r3, [pc, #16]	@ (8006784 <__sinit+0x2c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f5      	bne.n	8006764 <__sinit+0xc>
 8006778:	f7ff ffc4 	bl	8006704 <global_stdio_init.part.0>
 800677c:	e7f2      	b.n	8006764 <__sinit+0xc>
 800677e:	bf00      	nop
 8006780:	080066c5 	.word	0x080066c5
 8006784:	200004a0 	.word	0x200004a0

08006788 <_fwalk_sglue>:
 8006788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800678c:	4607      	mov	r7, r0
 800678e:	4688      	mov	r8, r1
 8006790:	4614      	mov	r4, r2
 8006792:	2600      	movs	r6, #0
 8006794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006798:	f1b9 0901 	subs.w	r9, r9, #1
 800679c:	d505      	bpl.n	80067aa <_fwalk_sglue+0x22>
 800679e:	6824      	ldr	r4, [r4, #0]
 80067a0:	2c00      	cmp	r4, #0
 80067a2:	d1f7      	bne.n	8006794 <_fwalk_sglue+0xc>
 80067a4:	4630      	mov	r0, r6
 80067a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067aa:	89ab      	ldrh	r3, [r5, #12]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d907      	bls.n	80067c0 <_fwalk_sglue+0x38>
 80067b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067b4:	3301      	adds	r3, #1
 80067b6:	d003      	beq.n	80067c0 <_fwalk_sglue+0x38>
 80067b8:	4629      	mov	r1, r5
 80067ba:	4638      	mov	r0, r7
 80067bc:	47c0      	blx	r8
 80067be:	4306      	orrs	r6, r0
 80067c0:	3568      	adds	r5, #104	@ 0x68
 80067c2:	e7e9      	b.n	8006798 <_fwalk_sglue+0x10>

080067c4 <iprintf>:
 80067c4:	b40f      	push	{r0, r1, r2, r3}
 80067c6:	b507      	push	{r0, r1, r2, lr}
 80067c8:	4906      	ldr	r1, [pc, #24]	@ (80067e4 <iprintf+0x20>)
 80067ca:	ab04      	add	r3, sp, #16
 80067cc:	6808      	ldr	r0, [r1, #0]
 80067ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d2:	6881      	ldr	r1, [r0, #8]
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	f000 fadb 	bl	8006d90 <_vfiprintf_r>
 80067da:	b003      	add	sp, #12
 80067dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067e0:	b004      	add	sp, #16
 80067e2:	4770      	bx	lr
 80067e4:	20000018 	.word	0x20000018

080067e8 <_puts_r>:
 80067e8:	6a03      	ldr	r3, [r0, #32]
 80067ea:	b570      	push	{r4, r5, r6, lr}
 80067ec:	6884      	ldr	r4, [r0, #8]
 80067ee:	4605      	mov	r5, r0
 80067f0:	460e      	mov	r6, r1
 80067f2:	b90b      	cbnz	r3, 80067f8 <_puts_r+0x10>
 80067f4:	f7ff ffb0 	bl	8006758 <__sinit>
 80067f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067fa:	07db      	lsls	r3, r3, #31
 80067fc:	d405      	bmi.n	800680a <_puts_r+0x22>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	0598      	lsls	r0, r3, #22
 8006802:	d402      	bmi.n	800680a <_puts_r+0x22>
 8006804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006806:	f000 f99e 	bl	8006b46 <__retarget_lock_acquire_recursive>
 800680a:	89a3      	ldrh	r3, [r4, #12]
 800680c:	0719      	lsls	r1, r3, #28
 800680e:	d502      	bpl.n	8006816 <_puts_r+0x2e>
 8006810:	6923      	ldr	r3, [r4, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d135      	bne.n	8006882 <_puts_r+0x9a>
 8006816:	4621      	mov	r1, r4
 8006818:	4628      	mov	r0, r5
 800681a:	f000 f8c5 	bl	80069a8 <__swsetup_r>
 800681e:	b380      	cbz	r0, 8006882 <_puts_r+0x9a>
 8006820:	f04f 35ff 	mov.w	r5, #4294967295
 8006824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006826:	07da      	lsls	r2, r3, #31
 8006828:	d405      	bmi.n	8006836 <_puts_r+0x4e>
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	059b      	lsls	r3, r3, #22
 800682e:	d402      	bmi.n	8006836 <_puts_r+0x4e>
 8006830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006832:	f000 f989 	bl	8006b48 <__retarget_lock_release_recursive>
 8006836:	4628      	mov	r0, r5
 8006838:	bd70      	pop	{r4, r5, r6, pc}
 800683a:	2b00      	cmp	r3, #0
 800683c:	da04      	bge.n	8006848 <_puts_r+0x60>
 800683e:	69a2      	ldr	r2, [r4, #24]
 8006840:	429a      	cmp	r2, r3
 8006842:	dc17      	bgt.n	8006874 <_puts_r+0x8c>
 8006844:	290a      	cmp	r1, #10
 8006846:	d015      	beq.n	8006874 <_puts_r+0x8c>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	6022      	str	r2, [r4, #0]
 800684e:	7019      	strb	r1, [r3, #0]
 8006850:	68a3      	ldr	r3, [r4, #8]
 8006852:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006856:	3b01      	subs	r3, #1
 8006858:	60a3      	str	r3, [r4, #8]
 800685a:	2900      	cmp	r1, #0
 800685c:	d1ed      	bne.n	800683a <_puts_r+0x52>
 800685e:	2b00      	cmp	r3, #0
 8006860:	da11      	bge.n	8006886 <_puts_r+0x9e>
 8006862:	4622      	mov	r2, r4
 8006864:	210a      	movs	r1, #10
 8006866:	4628      	mov	r0, r5
 8006868:	f000 f85f 	bl	800692a <__swbuf_r>
 800686c:	3001      	adds	r0, #1
 800686e:	d0d7      	beq.n	8006820 <_puts_r+0x38>
 8006870:	250a      	movs	r5, #10
 8006872:	e7d7      	b.n	8006824 <_puts_r+0x3c>
 8006874:	4622      	mov	r2, r4
 8006876:	4628      	mov	r0, r5
 8006878:	f000 f857 	bl	800692a <__swbuf_r>
 800687c:	3001      	adds	r0, #1
 800687e:	d1e7      	bne.n	8006850 <_puts_r+0x68>
 8006880:	e7ce      	b.n	8006820 <_puts_r+0x38>
 8006882:	3e01      	subs	r6, #1
 8006884:	e7e4      	b.n	8006850 <_puts_r+0x68>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	6022      	str	r2, [r4, #0]
 800688c:	220a      	movs	r2, #10
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	e7ee      	b.n	8006870 <_puts_r+0x88>
	...

08006894 <puts>:
 8006894:	4b02      	ldr	r3, [pc, #8]	@ (80068a0 <puts+0xc>)
 8006896:	4601      	mov	r1, r0
 8006898:	6818      	ldr	r0, [r3, #0]
 800689a:	f7ff bfa5 	b.w	80067e8 <_puts_r>
 800689e:	bf00      	nop
 80068a0:	20000018 	.word	0x20000018

080068a4 <__sread>:
 80068a4:	b510      	push	{r4, lr}
 80068a6:	460c      	mov	r4, r1
 80068a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ac:	f000 f8fc 	bl	8006aa8 <_read_r>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	bfab      	itete	ge
 80068b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068b6:	89a3      	ldrhlt	r3, [r4, #12]
 80068b8:	181b      	addge	r3, r3, r0
 80068ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068be:	bfac      	ite	ge
 80068c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068c2:	81a3      	strhlt	r3, [r4, #12]
 80068c4:	bd10      	pop	{r4, pc}

080068c6 <__swrite>:
 80068c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ca:	461f      	mov	r7, r3
 80068cc:	898b      	ldrh	r3, [r1, #12]
 80068ce:	05db      	lsls	r3, r3, #23
 80068d0:	4605      	mov	r5, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	4616      	mov	r6, r2
 80068d6:	d505      	bpl.n	80068e4 <__swrite+0x1e>
 80068d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068dc:	2302      	movs	r3, #2
 80068de:	2200      	movs	r2, #0
 80068e0:	f000 f8d0 	bl	8006a84 <_lseek_r>
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	4632      	mov	r2, r6
 80068f2:	463b      	mov	r3, r7
 80068f4:	4628      	mov	r0, r5
 80068f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068fa:	f000 b8e7 	b.w	8006acc <_write_r>

080068fe <__sseek>:
 80068fe:	b510      	push	{r4, lr}
 8006900:	460c      	mov	r4, r1
 8006902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006906:	f000 f8bd 	bl	8006a84 <_lseek_r>
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	bf15      	itete	ne
 8006910:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006912:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006916:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800691a:	81a3      	strheq	r3, [r4, #12]
 800691c:	bf18      	it	ne
 800691e:	81a3      	strhne	r3, [r4, #12]
 8006920:	bd10      	pop	{r4, pc}

08006922 <__sclose>:
 8006922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006926:	f000 b89d 	b.w	8006a64 <_close_r>

0800692a <__swbuf_r>:
 800692a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692c:	460e      	mov	r6, r1
 800692e:	4614      	mov	r4, r2
 8006930:	4605      	mov	r5, r0
 8006932:	b118      	cbz	r0, 800693c <__swbuf_r+0x12>
 8006934:	6a03      	ldr	r3, [r0, #32]
 8006936:	b90b      	cbnz	r3, 800693c <__swbuf_r+0x12>
 8006938:	f7ff ff0e 	bl	8006758 <__sinit>
 800693c:	69a3      	ldr	r3, [r4, #24]
 800693e:	60a3      	str	r3, [r4, #8]
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	071a      	lsls	r2, r3, #28
 8006944:	d501      	bpl.n	800694a <__swbuf_r+0x20>
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	b943      	cbnz	r3, 800695c <__swbuf_r+0x32>
 800694a:	4621      	mov	r1, r4
 800694c:	4628      	mov	r0, r5
 800694e:	f000 f82b 	bl	80069a8 <__swsetup_r>
 8006952:	b118      	cbz	r0, 800695c <__swbuf_r+0x32>
 8006954:	f04f 37ff 	mov.w	r7, #4294967295
 8006958:	4638      	mov	r0, r7
 800695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	6922      	ldr	r2, [r4, #16]
 8006960:	1a98      	subs	r0, r3, r2
 8006962:	6963      	ldr	r3, [r4, #20]
 8006964:	b2f6      	uxtb	r6, r6
 8006966:	4283      	cmp	r3, r0
 8006968:	4637      	mov	r7, r6
 800696a:	dc05      	bgt.n	8006978 <__swbuf_r+0x4e>
 800696c:	4621      	mov	r1, r4
 800696e:	4628      	mov	r0, r5
 8006970:	f000 fd38 	bl	80073e4 <_fflush_r>
 8006974:	2800      	cmp	r0, #0
 8006976:	d1ed      	bne.n	8006954 <__swbuf_r+0x2a>
 8006978:	68a3      	ldr	r3, [r4, #8]
 800697a:	3b01      	subs	r3, #1
 800697c:	60a3      	str	r3, [r4, #8]
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	6022      	str	r2, [r4, #0]
 8006984:	701e      	strb	r6, [r3, #0]
 8006986:	6962      	ldr	r2, [r4, #20]
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	429a      	cmp	r2, r3
 800698c:	d004      	beq.n	8006998 <__swbuf_r+0x6e>
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	07db      	lsls	r3, r3, #31
 8006992:	d5e1      	bpl.n	8006958 <__swbuf_r+0x2e>
 8006994:	2e0a      	cmp	r6, #10
 8006996:	d1df      	bne.n	8006958 <__swbuf_r+0x2e>
 8006998:	4621      	mov	r1, r4
 800699a:	4628      	mov	r0, r5
 800699c:	f000 fd22 	bl	80073e4 <_fflush_r>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d0d9      	beq.n	8006958 <__swbuf_r+0x2e>
 80069a4:	e7d6      	b.n	8006954 <__swbuf_r+0x2a>
	...

080069a8 <__swsetup_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4b29      	ldr	r3, [pc, #164]	@ (8006a50 <__swsetup_r+0xa8>)
 80069ac:	4605      	mov	r5, r0
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	460c      	mov	r4, r1
 80069b2:	b118      	cbz	r0, 80069bc <__swsetup_r+0x14>
 80069b4:	6a03      	ldr	r3, [r0, #32]
 80069b6:	b90b      	cbnz	r3, 80069bc <__swsetup_r+0x14>
 80069b8:	f7ff fece 	bl	8006758 <__sinit>
 80069bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c0:	0719      	lsls	r1, r3, #28
 80069c2:	d422      	bmi.n	8006a0a <__swsetup_r+0x62>
 80069c4:	06da      	lsls	r2, r3, #27
 80069c6:	d407      	bmi.n	80069d8 <__swsetup_r+0x30>
 80069c8:	2209      	movs	r2, #9
 80069ca:	602a      	str	r2, [r5, #0]
 80069cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d0:	81a3      	strh	r3, [r4, #12]
 80069d2:	f04f 30ff 	mov.w	r0, #4294967295
 80069d6:	e033      	b.n	8006a40 <__swsetup_r+0x98>
 80069d8:	0758      	lsls	r0, r3, #29
 80069da:	d512      	bpl.n	8006a02 <__swsetup_r+0x5a>
 80069dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069de:	b141      	cbz	r1, 80069f2 <__swsetup_r+0x4a>
 80069e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069e4:	4299      	cmp	r1, r3
 80069e6:	d002      	beq.n	80069ee <__swsetup_r+0x46>
 80069e8:	4628      	mov	r0, r5
 80069ea:	f000 f8af 	bl	8006b4c <_free_r>
 80069ee:	2300      	movs	r3, #0
 80069f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069f8:	81a3      	strh	r3, [r4, #12]
 80069fa:	2300      	movs	r3, #0
 80069fc:	6063      	str	r3, [r4, #4]
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f043 0308 	orr.w	r3, r3, #8
 8006a08:	81a3      	strh	r3, [r4, #12]
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	b94b      	cbnz	r3, 8006a22 <__swsetup_r+0x7a>
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a18:	d003      	beq.n	8006a22 <__swsetup_r+0x7a>
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f000 fd2f 	bl	8007480 <__smakebuf_r>
 8006a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a26:	f013 0201 	ands.w	r2, r3, #1
 8006a2a:	d00a      	beq.n	8006a42 <__swsetup_r+0x9a>
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	60a2      	str	r2, [r4, #8]
 8006a30:	6962      	ldr	r2, [r4, #20]
 8006a32:	4252      	negs	r2, r2
 8006a34:	61a2      	str	r2, [r4, #24]
 8006a36:	6922      	ldr	r2, [r4, #16]
 8006a38:	b942      	cbnz	r2, 8006a4c <__swsetup_r+0xa4>
 8006a3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a3e:	d1c5      	bne.n	80069cc <__swsetup_r+0x24>
 8006a40:	bd38      	pop	{r3, r4, r5, pc}
 8006a42:	0799      	lsls	r1, r3, #30
 8006a44:	bf58      	it	pl
 8006a46:	6962      	ldrpl	r2, [r4, #20]
 8006a48:	60a2      	str	r2, [r4, #8]
 8006a4a:	e7f4      	b.n	8006a36 <__swsetup_r+0x8e>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e7f7      	b.n	8006a40 <__swsetup_r+0x98>
 8006a50:	20000018 	.word	0x20000018

08006a54 <memset>:
 8006a54:	4402      	add	r2, r0
 8006a56:	4603      	mov	r3, r0
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d100      	bne.n	8006a5e <memset+0xa>
 8006a5c:	4770      	bx	lr
 8006a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a62:	e7f9      	b.n	8006a58 <memset+0x4>

08006a64 <_close_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4d06      	ldr	r5, [pc, #24]	@ (8006a80 <_close_r+0x1c>)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	602b      	str	r3, [r5, #0]
 8006a70:	f7fa fb25 	bl	80010be <_close>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_close_r+0x1a>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_close_r+0x1a>
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	200004a4 	.word	0x200004a4

08006a84 <_lseek_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4d07      	ldr	r5, [pc, #28]	@ (8006aa4 <_lseek_r+0x20>)
 8006a88:	4604      	mov	r4, r0
 8006a8a:	4608      	mov	r0, r1
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	602a      	str	r2, [r5, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f7fa fb3a 	bl	800110c <_lseek>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_lseek_r+0x1e>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_lseek_r+0x1e>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	200004a4 	.word	0x200004a4

08006aa8 <_read_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4d07      	ldr	r5, [pc, #28]	@ (8006ac8 <_read_r+0x20>)
 8006aac:	4604      	mov	r4, r0
 8006aae:	4608      	mov	r0, r1
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	602a      	str	r2, [r5, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f7fa fac8 	bl	800104c <_read>
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	d102      	bne.n	8006ac6 <_read_r+0x1e>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	b103      	cbz	r3, 8006ac6 <_read_r+0x1e>
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	200004a4 	.word	0x200004a4

08006acc <_write_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d07      	ldr	r5, [pc, #28]	@ (8006aec <_write_r+0x20>)
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	4608      	mov	r0, r1
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	602a      	str	r2, [r5, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f7fa fad3 	bl	8001086 <_write>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_write_r+0x1e>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_write_r+0x1e>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	200004a4 	.word	0x200004a4

08006af0 <__errno>:
 8006af0:	4b01      	ldr	r3, [pc, #4]	@ (8006af8 <__errno+0x8>)
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000018 	.word	0x20000018

08006afc <__libc_init_array>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	4d0d      	ldr	r5, [pc, #52]	@ (8006b34 <__libc_init_array+0x38>)
 8006b00:	4c0d      	ldr	r4, [pc, #52]	@ (8006b38 <__libc_init_array+0x3c>)
 8006b02:	1b64      	subs	r4, r4, r5
 8006b04:	10a4      	asrs	r4, r4, #2
 8006b06:	2600      	movs	r6, #0
 8006b08:	42a6      	cmp	r6, r4
 8006b0a:	d109      	bne.n	8006b20 <__libc_init_array+0x24>
 8006b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8006b3c <__libc_init_array+0x40>)
 8006b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8006b40 <__libc_init_array+0x44>)
 8006b10:	f000 fd24 	bl	800755c <_init>
 8006b14:	1b64      	subs	r4, r4, r5
 8006b16:	10a4      	asrs	r4, r4, #2
 8006b18:	2600      	movs	r6, #0
 8006b1a:	42a6      	cmp	r6, r4
 8006b1c:	d105      	bne.n	8006b2a <__libc_init_array+0x2e>
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}
 8006b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b24:	4798      	blx	r3
 8006b26:	3601      	adds	r6, #1
 8006b28:	e7ee      	b.n	8006b08 <__libc_init_array+0xc>
 8006b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2e:	4798      	blx	r3
 8006b30:	3601      	adds	r6, #1
 8006b32:	e7f2      	b.n	8006b1a <__libc_init_array+0x1e>
 8006b34:	0800765c 	.word	0x0800765c
 8006b38:	0800765c 	.word	0x0800765c
 8006b3c:	0800765c 	.word	0x0800765c
 8006b40:	08007660 	.word	0x08007660

08006b44 <__retarget_lock_init_recursive>:
 8006b44:	4770      	bx	lr

08006b46 <__retarget_lock_acquire_recursive>:
 8006b46:	4770      	bx	lr

08006b48 <__retarget_lock_release_recursive>:
 8006b48:	4770      	bx	lr
	...

08006b4c <_free_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4605      	mov	r5, r0
 8006b50:	2900      	cmp	r1, #0
 8006b52:	d041      	beq.n	8006bd8 <_free_r+0x8c>
 8006b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b58:	1f0c      	subs	r4, r1, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bfb8      	it	lt
 8006b5e:	18e4      	addlt	r4, r4, r3
 8006b60:	f000 f8e0 	bl	8006d24 <__malloc_lock>
 8006b64:	4a1d      	ldr	r2, [pc, #116]	@ (8006bdc <_free_r+0x90>)
 8006b66:	6813      	ldr	r3, [r2, #0]
 8006b68:	b933      	cbnz	r3, 8006b78 <_free_r+0x2c>
 8006b6a:	6063      	str	r3, [r4, #4]
 8006b6c:	6014      	str	r4, [r2, #0]
 8006b6e:	4628      	mov	r0, r5
 8006b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b74:	f000 b8dc 	b.w	8006d30 <__malloc_unlock>
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	d908      	bls.n	8006b8e <_free_r+0x42>
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	1821      	adds	r1, r4, r0
 8006b80:	428b      	cmp	r3, r1
 8006b82:	bf01      	itttt	eq
 8006b84:	6819      	ldreq	r1, [r3, #0]
 8006b86:	685b      	ldreq	r3, [r3, #4]
 8006b88:	1809      	addeq	r1, r1, r0
 8006b8a:	6021      	streq	r1, [r4, #0]
 8006b8c:	e7ed      	b.n	8006b6a <_free_r+0x1e>
 8006b8e:	461a      	mov	r2, r3
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	b10b      	cbz	r3, 8006b98 <_free_r+0x4c>
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d9fa      	bls.n	8006b8e <_free_r+0x42>
 8006b98:	6811      	ldr	r1, [r2, #0]
 8006b9a:	1850      	adds	r0, r2, r1
 8006b9c:	42a0      	cmp	r0, r4
 8006b9e:	d10b      	bne.n	8006bb8 <_free_r+0x6c>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	4401      	add	r1, r0
 8006ba4:	1850      	adds	r0, r2, r1
 8006ba6:	4283      	cmp	r3, r0
 8006ba8:	6011      	str	r1, [r2, #0]
 8006baa:	d1e0      	bne.n	8006b6e <_free_r+0x22>
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	6053      	str	r3, [r2, #4]
 8006bb2:	4408      	add	r0, r1
 8006bb4:	6010      	str	r0, [r2, #0]
 8006bb6:	e7da      	b.n	8006b6e <_free_r+0x22>
 8006bb8:	d902      	bls.n	8006bc0 <_free_r+0x74>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	e7d6      	b.n	8006b6e <_free_r+0x22>
 8006bc0:	6820      	ldr	r0, [r4, #0]
 8006bc2:	1821      	adds	r1, r4, r0
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	bf04      	itt	eq
 8006bc8:	6819      	ldreq	r1, [r3, #0]
 8006bca:	685b      	ldreq	r3, [r3, #4]
 8006bcc:	6063      	str	r3, [r4, #4]
 8006bce:	bf04      	itt	eq
 8006bd0:	1809      	addeq	r1, r1, r0
 8006bd2:	6021      	streq	r1, [r4, #0]
 8006bd4:	6054      	str	r4, [r2, #4]
 8006bd6:	e7ca      	b.n	8006b6e <_free_r+0x22>
 8006bd8:	bd38      	pop	{r3, r4, r5, pc}
 8006bda:	bf00      	nop
 8006bdc:	200004b0 	.word	0x200004b0

08006be0 <sbrk_aligned>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	4e0f      	ldr	r6, [pc, #60]	@ (8006c20 <sbrk_aligned+0x40>)
 8006be4:	460c      	mov	r4, r1
 8006be6:	6831      	ldr	r1, [r6, #0]
 8006be8:	4605      	mov	r5, r0
 8006bea:	b911      	cbnz	r1, 8006bf2 <sbrk_aligned+0x12>
 8006bec:	f000 fca6 	bl	800753c <_sbrk_r>
 8006bf0:	6030      	str	r0, [r6, #0]
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	f000 fca1 	bl	800753c <_sbrk_r>
 8006bfa:	1c43      	adds	r3, r0, #1
 8006bfc:	d103      	bne.n	8006c06 <sbrk_aligned+0x26>
 8006bfe:	f04f 34ff 	mov.w	r4, #4294967295
 8006c02:	4620      	mov	r0, r4
 8006c04:	bd70      	pop	{r4, r5, r6, pc}
 8006c06:	1cc4      	adds	r4, r0, #3
 8006c08:	f024 0403 	bic.w	r4, r4, #3
 8006c0c:	42a0      	cmp	r0, r4
 8006c0e:	d0f8      	beq.n	8006c02 <sbrk_aligned+0x22>
 8006c10:	1a21      	subs	r1, r4, r0
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 fc92 	bl	800753c <_sbrk_r>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d1f2      	bne.n	8006c02 <sbrk_aligned+0x22>
 8006c1c:	e7ef      	b.n	8006bfe <sbrk_aligned+0x1e>
 8006c1e:	bf00      	nop
 8006c20:	200004ac 	.word	0x200004ac

08006c24 <_malloc_r>:
 8006c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c28:	1ccd      	adds	r5, r1, #3
 8006c2a:	f025 0503 	bic.w	r5, r5, #3
 8006c2e:	3508      	adds	r5, #8
 8006c30:	2d0c      	cmp	r5, #12
 8006c32:	bf38      	it	cc
 8006c34:	250c      	movcc	r5, #12
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	4606      	mov	r6, r0
 8006c3a:	db01      	blt.n	8006c40 <_malloc_r+0x1c>
 8006c3c:	42a9      	cmp	r1, r5
 8006c3e:	d904      	bls.n	8006c4a <_malloc_r+0x26>
 8006c40:	230c      	movs	r3, #12
 8006c42:	6033      	str	r3, [r6, #0]
 8006c44:	2000      	movs	r0, #0
 8006c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d20 <_malloc_r+0xfc>
 8006c4e:	f000 f869 	bl	8006d24 <__malloc_lock>
 8006c52:	f8d8 3000 	ldr.w	r3, [r8]
 8006c56:	461c      	mov	r4, r3
 8006c58:	bb44      	cbnz	r4, 8006cac <_malloc_r+0x88>
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff ffbf 	bl	8006be0 <sbrk_aligned>
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	4604      	mov	r4, r0
 8006c66:	d158      	bne.n	8006d1a <_malloc_r+0xf6>
 8006c68:	f8d8 4000 	ldr.w	r4, [r8]
 8006c6c:	4627      	mov	r7, r4
 8006c6e:	2f00      	cmp	r7, #0
 8006c70:	d143      	bne.n	8006cfa <_malloc_r+0xd6>
 8006c72:	2c00      	cmp	r4, #0
 8006c74:	d04b      	beq.n	8006d0e <_malloc_r+0xea>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	4639      	mov	r1, r7
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	eb04 0903 	add.w	r9, r4, r3
 8006c80:	f000 fc5c 	bl	800753c <_sbrk_r>
 8006c84:	4581      	cmp	r9, r0
 8006c86:	d142      	bne.n	8006d0e <_malloc_r+0xea>
 8006c88:	6821      	ldr	r1, [r4, #0]
 8006c8a:	1a6d      	subs	r5, r5, r1
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f7ff ffa6 	bl	8006be0 <sbrk_aligned>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d03a      	beq.n	8006d0e <_malloc_r+0xea>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	442b      	add	r3, r5
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	bb62      	cbnz	r2, 8006d00 <_malloc_r+0xdc>
 8006ca6:	f8c8 7000 	str.w	r7, [r8]
 8006caa:	e00f      	b.n	8006ccc <_malloc_r+0xa8>
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	1b52      	subs	r2, r2, r5
 8006cb0:	d420      	bmi.n	8006cf4 <_malloc_r+0xd0>
 8006cb2:	2a0b      	cmp	r2, #11
 8006cb4:	d917      	bls.n	8006ce6 <_malloc_r+0xc2>
 8006cb6:	1961      	adds	r1, r4, r5
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	6025      	str	r5, [r4, #0]
 8006cbc:	bf18      	it	ne
 8006cbe:	6059      	strne	r1, [r3, #4]
 8006cc0:	6863      	ldr	r3, [r4, #4]
 8006cc2:	bf08      	it	eq
 8006cc4:	f8c8 1000 	streq.w	r1, [r8]
 8006cc8:	5162      	str	r2, [r4, r5]
 8006cca:	604b      	str	r3, [r1, #4]
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f000 f82f 	bl	8006d30 <__malloc_unlock>
 8006cd2:	f104 000b 	add.w	r0, r4, #11
 8006cd6:	1d23      	adds	r3, r4, #4
 8006cd8:	f020 0007 	bic.w	r0, r0, #7
 8006cdc:	1ac2      	subs	r2, r0, r3
 8006cde:	bf1c      	itt	ne
 8006ce0:	1a1b      	subne	r3, r3, r0
 8006ce2:	50a3      	strne	r3, [r4, r2]
 8006ce4:	e7af      	b.n	8006c46 <_malloc_r+0x22>
 8006ce6:	6862      	ldr	r2, [r4, #4]
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	bf0c      	ite	eq
 8006cec:	f8c8 2000 	streq.w	r2, [r8]
 8006cf0:	605a      	strne	r2, [r3, #4]
 8006cf2:	e7eb      	b.n	8006ccc <_malloc_r+0xa8>
 8006cf4:	4623      	mov	r3, r4
 8006cf6:	6864      	ldr	r4, [r4, #4]
 8006cf8:	e7ae      	b.n	8006c58 <_malloc_r+0x34>
 8006cfa:	463c      	mov	r4, r7
 8006cfc:	687f      	ldr	r7, [r7, #4]
 8006cfe:	e7b6      	b.n	8006c6e <_malloc_r+0x4a>
 8006d00:	461a      	mov	r2, r3
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	42a3      	cmp	r3, r4
 8006d06:	d1fb      	bne.n	8006d00 <_malloc_r+0xdc>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6053      	str	r3, [r2, #4]
 8006d0c:	e7de      	b.n	8006ccc <_malloc_r+0xa8>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	6033      	str	r3, [r6, #0]
 8006d12:	4630      	mov	r0, r6
 8006d14:	f000 f80c 	bl	8006d30 <__malloc_unlock>
 8006d18:	e794      	b.n	8006c44 <_malloc_r+0x20>
 8006d1a:	6005      	str	r5, [r0, #0]
 8006d1c:	e7d6      	b.n	8006ccc <_malloc_r+0xa8>
 8006d1e:	bf00      	nop
 8006d20:	200004b0 	.word	0x200004b0

08006d24 <__malloc_lock>:
 8006d24:	4801      	ldr	r0, [pc, #4]	@ (8006d2c <__malloc_lock+0x8>)
 8006d26:	f7ff bf0e 	b.w	8006b46 <__retarget_lock_acquire_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	200004a8 	.word	0x200004a8

08006d30 <__malloc_unlock>:
 8006d30:	4801      	ldr	r0, [pc, #4]	@ (8006d38 <__malloc_unlock+0x8>)
 8006d32:	f7ff bf09 	b.w	8006b48 <__retarget_lock_release_recursive>
 8006d36:	bf00      	nop
 8006d38:	200004a8 	.word	0x200004a8

08006d3c <__sfputc_r>:
 8006d3c:	6893      	ldr	r3, [r2, #8]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	b410      	push	{r4}
 8006d44:	6093      	str	r3, [r2, #8]
 8006d46:	da08      	bge.n	8006d5a <__sfputc_r+0x1e>
 8006d48:	6994      	ldr	r4, [r2, #24]
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	db01      	blt.n	8006d52 <__sfputc_r+0x16>
 8006d4e:	290a      	cmp	r1, #10
 8006d50:	d103      	bne.n	8006d5a <__sfputc_r+0x1e>
 8006d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d56:	f7ff bde8 	b.w	800692a <__swbuf_r>
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	1c58      	adds	r0, r3, #1
 8006d5e:	6010      	str	r0, [r2, #0]
 8006d60:	7019      	strb	r1, [r3, #0]
 8006d62:	4608      	mov	r0, r1
 8006d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <__sfputs_r>:
 8006d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	460f      	mov	r7, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	18d5      	adds	r5, r2, r3
 8006d74:	42ac      	cmp	r4, r5
 8006d76:	d101      	bne.n	8006d7c <__sfputs_r+0x12>
 8006d78:	2000      	movs	r0, #0
 8006d7a:	e007      	b.n	8006d8c <__sfputs_r+0x22>
 8006d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d80:	463a      	mov	r2, r7
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7ff ffda 	bl	8006d3c <__sfputc_r>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d1f3      	bne.n	8006d74 <__sfputs_r+0xa>
 8006d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d90 <_vfiprintf_r>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	460d      	mov	r5, r1
 8006d96:	b09d      	sub	sp, #116	@ 0x74
 8006d98:	4614      	mov	r4, r2
 8006d9a:	4698      	mov	r8, r3
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	b118      	cbz	r0, 8006da8 <_vfiprintf_r+0x18>
 8006da0:	6a03      	ldr	r3, [r0, #32]
 8006da2:	b90b      	cbnz	r3, 8006da8 <_vfiprintf_r+0x18>
 8006da4:	f7ff fcd8 	bl	8006758 <__sinit>
 8006da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006daa:	07d9      	lsls	r1, r3, #31
 8006dac:	d405      	bmi.n	8006dba <_vfiprintf_r+0x2a>
 8006dae:	89ab      	ldrh	r3, [r5, #12]
 8006db0:	059a      	lsls	r2, r3, #22
 8006db2:	d402      	bmi.n	8006dba <_vfiprintf_r+0x2a>
 8006db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006db6:	f7ff fec6 	bl	8006b46 <__retarget_lock_acquire_recursive>
 8006dba:	89ab      	ldrh	r3, [r5, #12]
 8006dbc:	071b      	lsls	r3, r3, #28
 8006dbe:	d501      	bpl.n	8006dc4 <_vfiprintf_r+0x34>
 8006dc0:	692b      	ldr	r3, [r5, #16]
 8006dc2:	b99b      	cbnz	r3, 8006dec <_vfiprintf_r+0x5c>
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7ff fdee 	bl	80069a8 <__swsetup_r>
 8006dcc:	b170      	cbz	r0, 8006dec <_vfiprintf_r+0x5c>
 8006dce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dd0:	07dc      	lsls	r4, r3, #31
 8006dd2:	d504      	bpl.n	8006dde <_vfiprintf_r+0x4e>
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	b01d      	add	sp, #116	@ 0x74
 8006dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dde:	89ab      	ldrh	r3, [r5, #12]
 8006de0:	0598      	lsls	r0, r3, #22
 8006de2:	d4f7      	bmi.n	8006dd4 <_vfiprintf_r+0x44>
 8006de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006de6:	f7ff feaf 	bl	8006b48 <__retarget_lock_release_recursive>
 8006dea:	e7f3      	b.n	8006dd4 <_vfiprintf_r+0x44>
 8006dec:	2300      	movs	r3, #0
 8006dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006df0:	2320      	movs	r3, #32
 8006df2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dfa:	2330      	movs	r3, #48	@ 0x30
 8006dfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006fac <_vfiprintf_r+0x21c>
 8006e00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e04:	f04f 0901 	mov.w	r9, #1
 8006e08:	4623      	mov	r3, r4
 8006e0a:	469a      	mov	sl, r3
 8006e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e10:	b10a      	cbz	r2, 8006e16 <_vfiprintf_r+0x86>
 8006e12:	2a25      	cmp	r2, #37	@ 0x25
 8006e14:	d1f9      	bne.n	8006e0a <_vfiprintf_r+0x7a>
 8006e16:	ebba 0b04 	subs.w	fp, sl, r4
 8006e1a:	d00b      	beq.n	8006e34 <_vfiprintf_r+0xa4>
 8006e1c:	465b      	mov	r3, fp
 8006e1e:	4622      	mov	r2, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7ff ffa1 	bl	8006d6a <__sfputs_r>
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f000 80a7 	beq.w	8006f7c <_vfiprintf_r+0x1ec>
 8006e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e30:	445a      	add	r2, fp
 8006e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e34:	f89a 3000 	ldrb.w	r3, [sl]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 809f 	beq.w	8006f7c <_vfiprintf_r+0x1ec>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f04f 32ff 	mov.w	r2, #4294967295
 8006e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e48:	f10a 0a01 	add.w	sl, sl, #1
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	9307      	str	r3, [sp, #28]
 8006e50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e54:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e56:	4654      	mov	r4, sl
 8006e58:	2205      	movs	r2, #5
 8006e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e5e:	4853      	ldr	r0, [pc, #332]	@ (8006fac <_vfiprintf_r+0x21c>)
 8006e60:	f7f9 f9b6 	bl	80001d0 <memchr>
 8006e64:	9a04      	ldr	r2, [sp, #16]
 8006e66:	b9d8      	cbnz	r0, 8006ea0 <_vfiprintf_r+0x110>
 8006e68:	06d1      	lsls	r1, r2, #27
 8006e6a:	bf44      	itt	mi
 8006e6c:	2320      	movmi	r3, #32
 8006e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e72:	0713      	lsls	r3, r2, #28
 8006e74:	bf44      	itt	mi
 8006e76:	232b      	movmi	r3, #43	@ 0x2b
 8006e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e82:	d015      	beq.n	8006eb0 <_vfiprintf_r+0x120>
 8006e84:	9a07      	ldr	r2, [sp, #28]
 8006e86:	4654      	mov	r4, sl
 8006e88:	2000      	movs	r0, #0
 8006e8a:	f04f 0c0a 	mov.w	ip, #10
 8006e8e:	4621      	mov	r1, r4
 8006e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e94:	3b30      	subs	r3, #48	@ 0x30
 8006e96:	2b09      	cmp	r3, #9
 8006e98:	d94b      	bls.n	8006f32 <_vfiprintf_r+0x1a2>
 8006e9a:	b1b0      	cbz	r0, 8006eca <_vfiprintf_r+0x13a>
 8006e9c:	9207      	str	r2, [sp, #28]
 8006e9e:	e014      	b.n	8006eca <_vfiprintf_r+0x13a>
 8006ea0:	eba0 0308 	sub.w	r3, r0, r8
 8006ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	9304      	str	r3, [sp, #16]
 8006eac:	46a2      	mov	sl, r4
 8006eae:	e7d2      	b.n	8006e56 <_vfiprintf_r+0xc6>
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	1d19      	adds	r1, r3, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	9103      	str	r1, [sp, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bfbb      	ittet	lt
 8006ebc:	425b      	neglt	r3, r3
 8006ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8006ec2:	9307      	strge	r3, [sp, #28]
 8006ec4:	9307      	strlt	r3, [sp, #28]
 8006ec6:	bfb8      	it	lt
 8006ec8:	9204      	strlt	r2, [sp, #16]
 8006eca:	7823      	ldrb	r3, [r4, #0]
 8006ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ece:	d10a      	bne.n	8006ee6 <_vfiprintf_r+0x156>
 8006ed0:	7863      	ldrb	r3, [r4, #1]
 8006ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ed4:	d132      	bne.n	8006f3c <_vfiprintf_r+0x1ac>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	1d1a      	adds	r2, r3, #4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	9203      	str	r2, [sp, #12]
 8006ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ee2:	3402      	adds	r4, #2
 8006ee4:	9305      	str	r3, [sp, #20]
 8006ee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006fbc <_vfiprintf_r+0x22c>
 8006eea:	7821      	ldrb	r1, [r4, #0]
 8006eec:	2203      	movs	r2, #3
 8006eee:	4650      	mov	r0, sl
 8006ef0:	f7f9 f96e 	bl	80001d0 <memchr>
 8006ef4:	b138      	cbz	r0, 8006f06 <_vfiprintf_r+0x176>
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	eba0 000a 	sub.w	r0, r0, sl
 8006efc:	2240      	movs	r2, #64	@ 0x40
 8006efe:	4082      	lsls	r2, r0
 8006f00:	4313      	orrs	r3, r2
 8006f02:	3401      	adds	r4, #1
 8006f04:	9304      	str	r3, [sp, #16]
 8006f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0a:	4829      	ldr	r0, [pc, #164]	@ (8006fb0 <_vfiprintf_r+0x220>)
 8006f0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f10:	2206      	movs	r2, #6
 8006f12:	f7f9 f95d 	bl	80001d0 <memchr>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d03f      	beq.n	8006f9a <_vfiprintf_r+0x20a>
 8006f1a:	4b26      	ldr	r3, [pc, #152]	@ (8006fb4 <_vfiprintf_r+0x224>)
 8006f1c:	bb1b      	cbnz	r3, 8006f66 <_vfiprintf_r+0x1d6>
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	3307      	adds	r3, #7
 8006f22:	f023 0307 	bic.w	r3, r3, #7
 8006f26:	3308      	adds	r3, #8
 8006f28:	9303      	str	r3, [sp, #12]
 8006f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f2c:	443b      	add	r3, r7
 8006f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f30:	e76a      	b.n	8006e08 <_vfiprintf_r+0x78>
 8006f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f36:	460c      	mov	r4, r1
 8006f38:	2001      	movs	r0, #1
 8006f3a:	e7a8      	b.n	8006e8e <_vfiprintf_r+0xfe>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	3401      	adds	r4, #1
 8006f40:	9305      	str	r3, [sp, #20]
 8006f42:	4619      	mov	r1, r3
 8006f44:	f04f 0c0a 	mov.w	ip, #10
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f4e:	3a30      	subs	r2, #48	@ 0x30
 8006f50:	2a09      	cmp	r2, #9
 8006f52:	d903      	bls.n	8006f5c <_vfiprintf_r+0x1cc>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0c6      	beq.n	8006ee6 <_vfiprintf_r+0x156>
 8006f58:	9105      	str	r1, [sp, #20]
 8006f5a:	e7c4      	b.n	8006ee6 <_vfiprintf_r+0x156>
 8006f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f60:	4604      	mov	r4, r0
 8006f62:	2301      	movs	r3, #1
 8006f64:	e7f0      	b.n	8006f48 <_vfiprintf_r+0x1b8>
 8006f66:	ab03      	add	r3, sp, #12
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	462a      	mov	r2, r5
 8006f6c:	4b12      	ldr	r3, [pc, #72]	@ (8006fb8 <_vfiprintf_r+0x228>)
 8006f6e:	a904      	add	r1, sp, #16
 8006f70:	4630      	mov	r0, r6
 8006f72:	f3af 8000 	nop.w
 8006f76:	4607      	mov	r7, r0
 8006f78:	1c78      	adds	r0, r7, #1
 8006f7a:	d1d6      	bne.n	8006f2a <_vfiprintf_r+0x19a>
 8006f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f7e:	07d9      	lsls	r1, r3, #31
 8006f80:	d405      	bmi.n	8006f8e <_vfiprintf_r+0x1fe>
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	059a      	lsls	r2, r3, #22
 8006f86:	d402      	bmi.n	8006f8e <_vfiprintf_r+0x1fe>
 8006f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f8a:	f7ff fddd 	bl	8006b48 <__retarget_lock_release_recursive>
 8006f8e:	89ab      	ldrh	r3, [r5, #12]
 8006f90:	065b      	lsls	r3, r3, #25
 8006f92:	f53f af1f 	bmi.w	8006dd4 <_vfiprintf_r+0x44>
 8006f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f98:	e71e      	b.n	8006dd8 <_vfiprintf_r+0x48>
 8006f9a:	ab03      	add	r3, sp, #12
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	462a      	mov	r2, r5
 8006fa0:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <_vfiprintf_r+0x228>)
 8006fa2:	a904      	add	r1, sp, #16
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	f000 f879 	bl	800709c <_printf_i>
 8006faa:	e7e4      	b.n	8006f76 <_vfiprintf_r+0x1e6>
 8006fac:	08007620 	.word	0x08007620
 8006fb0:	0800762a 	.word	0x0800762a
 8006fb4:	00000000 	.word	0x00000000
 8006fb8:	08006d6b 	.word	0x08006d6b
 8006fbc:	08007626 	.word	0x08007626

08006fc0 <_printf_common>:
 8006fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc4:	4616      	mov	r6, r2
 8006fc6:	4698      	mov	r8, r3
 8006fc8:	688a      	ldr	r2, [r1, #8]
 8006fca:	690b      	ldr	r3, [r1, #16]
 8006fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	bfb8      	it	lt
 8006fd4:	4613      	movlt	r3, r2
 8006fd6:	6033      	str	r3, [r6, #0]
 8006fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fdc:	4607      	mov	r7, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	b10a      	cbz	r2, 8006fe6 <_printf_common+0x26>
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	6033      	str	r3, [r6, #0]
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	0699      	lsls	r1, r3, #26
 8006fea:	bf42      	ittt	mi
 8006fec:	6833      	ldrmi	r3, [r6, #0]
 8006fee:	3302      	addmi	r3, #2
 8006ff0:	6033      	strmi	r3, [r6, #0]
 8006ff2:	6825      	ldr	r5, [r4, #0]
 8006ff4:	f015 0506 	ands.w	r5, r5, #6
 8006ff8:	d106      	bne.n	8007008 <_printf_common+0x48>
 8006ffa:	f104 0a19 	add.w	sl, r4, #25
 8006ffe:	68e3      	ldr	r3, [r4, #12]
 8007000:	6832      	ldr	r2, [r6, #0]
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	42ab      	cmp	r3, r5
 8007006:	dc26      	bgt.n	8007056 <_printf_common+0x96>
 8007008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800700c:	6822      	ldr	r2, [r4, #0]
 800700e:	3b00      	subs	r3, #0
 8007010:	bf18      	it	ne
 8007012:	2301      	movne	r3, #1
 8007014:	0692      	lsls	r2, r2, #26
 8007016:	d42b      	bmi.n	8007070 <_printf_common+0xb0>
 8007018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800701c:	4641      	mov	r1, r8
 800701e:	4638      	mov	r0, r7
 8007020:	47c8      	blx	r9
 8007022:	3001      	adds	r0, #1
 8007024:	d01e      	beq.n	8007064 <_printf_common+0xa4>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	6922      	ldr	r2, [r4, #16]
 800702a:	f003 0306 	and.w	r3, r3, #6
 800702e:	2b04      	cmp	r3, #4
 8007030:	bf02      	ittt	eq
 8007032:	68e5      	ldreq	r5, [r4, #12]
 8007034:	6833      	ldreq	r3, [r6, #0]
 8007036:	1aed      	subeq	r5, r5, r3
 8007038:	68a3      	ldr	r3, [r4, #8]
 800703a:	bf0c      	ite	eq
 800703c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007040:	2500      	movne	r5, #0
 8007042:	4293      	cmp	r3, r2
 8007044:	bfc4      	itt	gt
 8007046:	1a9b      	subgt	r3, r3, r2
 8007048:	18ed      	addgt	r5, r5, r3
 800704a:	2600      	movs	r6, #0
 800704c:	341a      	adds	r4, #26
 800704e:	42b5      	cmp	r5, r6
 8007050:	d11a      	bne.n	8007088 <_printf_common+0xc8>
 8007052:	2000      	movs	r0, #0
 8007054:	e008      	b.n	8007068 <_printf_common+0xa8>
 8007056:	2301      	movs	r3, #1
 8007058:	4652      	mov	r2, sl
 800705a:	4641      	mov	r1, r8
 800705c:	4638      	mov	r0, r7
 800705e:	47c8      	blx	r9
 8007060:	3001      	adds	r0, #1
 8007062:	d103      	bne.n	800706c <_printf_common+0xac>
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706c:	3501      	adds	r5, #1
 800706e:	e7c6      	b.n	8006ffe <_printf_common+0x3e>
 8007070:	18e1      	adds	r1, r4, r3
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	2030      	movs	r0, #48	@ 0x30
 8007076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800707a:	4422      	add	r2, r4
 800707c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007084:	3302      	adds	r3, #2
 8007086:	e7c7      	b.n	8007018 <_printf_common+0x58>
 8007088:	2301      	movs	r3, #1
 800708a:	4622      	mov	r2, r4
 800708c:	4641      	mov	r1, r8
 800708e:	4638      	mov	r0, r7
 8007090:	47c8      	blx	r9
 8007092:	3001      	adds	r0, #1
 8007094:	d0e6      	beq.n	8007064 <_printf_common+0xa4>
 8007096:	3601      	adds	r6, #1
 8007098:	e7d9      	b.n	800704e <_printf_common+0x8e>
	...

0800709c <_printf_i>:
 800709c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	7e0f      	ldrb	r7, [r1, #24]
 80070a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070a4:	2f78      	cmp	r7, #120	@ 0x78
 80070a6:	4691      	mov	r9, r2
 80070a8:	4680      	mov	r8, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	469a      	mov	sl, r3
 80070ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070b2:	d807      	bhi.n	80070c4 <_printf_i+0x28>
 80070b4:	2f62      	cmp	r7, #98	@ 0x62
 80070b6:	d80a      	bhi.n	80070ce <_printf_i+0x32>
 80070b8:	2f00      	cmp	r7, #0
 80070ba:	f000 80d2 	beq.w	8007262 <_printf_i+0x1c6>
 80070be:	2f58      	cmp	r7, #88	@ 0x58
 80070c0:	f000 80b9 	beq.w	8007236 <_printf_i+0x19a>
 80070c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070cc:	e03a      	b.n	8007144 <_printf_i+0xa8>
 80070ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070d2:	2b15      	cmp	r3, #21
 80070d4:	d8f6      	bhi.n	80070c4 <_printf_i+0x28>
 80070d6:	a101      	add	r1, pc, #4	@ (adr r1, 80070dc <_printf_i+0x40>)
 80070d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070dc:	08007135 	.word	0x08007135
 80070e0:	08007149 	.word	0x08007149
 80070e4:	080070c5 	.word	0x080070c5
 80070e8:	080070c5 	.word	0x080070c5
 80070ec:	080070c5 	.word	0x080070c5
 80070f0:	080070c5 	.word	0x080070c5
 80070f4:	08007149 	.word	0x08007149
 80070f8:	080070c5 	.word	0x080070c5
 80070fc:	080070c5 	.word	0x080070c5
 8007100:	080070c5 	.word	0x080070c5
 8007104:	080070c5 	.word	0x080070c5
 8007108:	08007249 	.word	0x08007249
 800710c:	08007173 	.word	0x08007173
 8007110:	08007203 	.word	0x08007203
 8007114:	080070c5 	.word	0x080070c5
 8007118:	080070c5 	.word	0x080070c5
 800711c:	0800726b 	.word	0x0800726b
 8007120:	080070c5 	.word	0x080070c5
 8007124:	08007173 	.word	0x08007173
 8007128:	080070c5 	.word	0x080070c5
 800712c:	080070c5 	.word	0x080070c5
 8007130:	0800720b 	.word	0x0800720b
 8007134:	6833      	ldr	r3, [r6, #0]
 8007136:	1d1a      	adds	r2, r3, #4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6032      	str	r2, [r6, #0]
 800713c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007144:	2301      	movs	r3, #1
 8007146:	e09d      	b.n	8007284 <_printf_i+0x1e8>
 8007148:	6833      	ldr	r3, [r6, #0]
 800714a:	6820      	ldr	r0, [r4, #0]
 800714c:	1d19      	adds	r1, r3, #4
 800714e:	6031      	str	r1, [r6, #0]
 8007150:	0606      	lsls	r6, r0, #24
 8007152:	d501      	bpl.n	8007158 <_printf_i+0xbc>
 8007154:	681d      	ldr	r5, [r3, #0]
 8007156:	e003      	b.n	8007160 <_printf_i+0xc4>
 8007158:	0645      	lsls	r5, r0, #25
 800715a:	d5fb      	bpl.n	8007154 <_printf_i+0xb8>
 800715c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007160:	2d00      	cmp	r5, #0
 8007162:	da03      	bge.n	800716c <_printf_i+0xd0>
 8007164:	232d      	movs	r3, #45	@ 0x2d
 8007166:	426d      	negs	r5, r5
 8007168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800716c:	4859      	ldr	r0, [pc, #356]	@ (80072d4 <_printf_i+0x238>)
 800716e:	230a      	movs	r3, #10
 8007170:	e011      	b.n	8007196 <_printf_i+0xfa>
 8007172:	6821      	ldr	r1, [r4, #0]
 8007174:	6833      	ldr	r3, [r6, #0]
 8007176:	0608      	lsls	r0, r1, #24
 8007178:	f853 5b04 	ldr.w	r5, [r3], #4
 800717c:	d402      	bmi.n	8007184 <_printf_i+0xe8>
 800717e:	0649      	lsls	r1, r1, #25
 8007180:	bf48      	it	mi
 8007182:	b2ad      	uxthmi	r5, r5
 8007184:	2f6f      	cmp	r7, #111	@ 0x6f
 8007186:	4853      	ldr	r0, [pc, #332]	@ (80072d4 <_printf_i+0x238>)
 8007188:	6033      	str	r3, [r6, #0]
 800718a:	bf14      	ite	ne
 800718c:	230a      	movne	r3, #10
 800718e:	2308      	moveq	r3, #8
 8007190:	2100      	movs	r1, #0
 8007192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007196:	6866      	ldr	r6, [r4, #4]
 8007198:	60a6      	str	r6, [r4, #8]
 800719a:	2e00      	cmp	r6, #0
 800719c:	bfa2      	ittt	ge
 800719e:	6821      	ldrge	r1, [r4, #0]
 80071a0:	f021 0104 	bicge.w	r1, r1, #4
 80071a4:	6021      	strge	r1, [r4, #0]
 80071a6:	b90d      	cbnz	r5, 80071ac <_printf_i+0x110>
 80071a8:	2e00      	cmp	r6, #0
 80071aa:	d04b      	beq.n	8007244 <_printf_i+0x1a8>
 80071ac:	4616      	mov	r6, r2
 80071ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80071b2:	fb03 5711 	mls	r7, r3, r1, r5
 80071b6:	5dc7      	ldrb	r7, [r0, r7]
 80071b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071bc:	462f      	mov	r7, r5
 80071be:	42bb      	cmp	r3, r7
 80071c0:	460d      	mov	r5, r1
 80071c2:	d9f4      	bls.n	80071ae <_printf_i+0x112>
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d10b      	bne.n	80071e0 <_printf_i+0x144>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	07df      	lsls	r7, r3, #31
 80071cc:	d508      	bpl.n	80071e0 <_printf_i+0x144>
 80071ce:	6923      	ldr	r3, [r4, #16]
 80071d0:	6861      	ldr	r1, [r4, #4]
 80071d2:	4299      	cmp	r1, r3
 80071d4:	bfde      	ittt	le
 80071d6:	2330      	movle	r3, #48	@ 0x30
 80071d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071e0:	1b92      	subs	r2, r2, r6
 80071e2:	6122      	str	r2, [r4, #16]
 80071e4:	f8cd a000 	str.w	sl, [sp]
 80071e8:	464b      	mov	r3, r9
 80071ea:	aa03      	add	r2, sp, #12
 80071ec:	4621      	mov	r1, r4
 80071ee:	4640      	mov	r0, r8
 80071f0:	f7ff fee6 	bl	8006fc0 <_printf_common>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d14a      	bne.n	800728e <_printf_i+0x1f2>
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	b004      	add	sp, #16
 80071fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	f043 0320 	orr.w	r3, r3, #32
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	4833      	ldr	r0, [pc, #204]	@ (80072d8 <_printf_i+0x23c>)
 800720c:	2778      	movs	r7, #120	@ 0x78
 800720e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	6831      	ldr	r1, [r6, #0]
 8007216:	061f      	lsls	r7, r3, #24
 8007218:	f851 5b04 	ldr.w	r5, [r1], #4
 800721c:	d402      	bmi.n	8007224 <_printf_i+0x188>
 800721e:	065f      	lsls	r7, r3, #25
 8007220:	bf48      	it	mi
 8007222:	b2ad      	uxthmi	r5, r5
 8007224:	6031      	str	r1, [r6, #0]
 8007226:	07d9      	lsls	r1, r3, #31
 8007228:	bf44      	itt	mi
 800722a:	f043 0320 	orrmi.w	r3, r3, #32
 800722e:	6023      	strmi	r3, [r4, #0]
 8007230:	b11d      	cbz	r5, 800723a <_printf_i+0x19e>
 8007232:	2310      	movs	r3, #16
 8007234:	e7ac      	b.n	8007190 <_printf_i+0xf4>
 8007236:	4827      	ldr	r0, [pc, #156]	@ (80072d4 <_printf_i+0x238>)
 8007238:	e7e9      	b.n	800720e <_printf_i+0x172>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	f023 0320 	bic.w	r3, r3, #32
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	e7f6      	b.n	8007232 <_printf_i+0x196>
 8007244:	4616      	mov	r6, r2
 8007246:	e7bd      	b.n	80071c4 <_printf_i+0x128>
 8007248:	6833      	ldr	r3, [r6, #0]
 800724a:	6825      	ldr	r5, [r4, #0]
 800724c:	6961      	ldr	r1, [r4, #20]
 800724e:	1d18      	adds	r0, r3, #4
 8007250:	6030      	str	r0, [r6, #0]
 8007252:	062e      	lsls	r6, r5, #24
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	d501      	bpl.n	800725c <_printf_i+0x1c0>
 8007258:	6019      	str	r1, [r3, #0]
 800725a:	e002      	b.n	8007262 <_printf_i+0x1c6>
 800725c:	0668      	lsls	r0, r5, #25
 800725e:	d5fb      	bpl.n	8007258 <_printf_i+0x1bc>
 8007260:	8019      	strh	r1, [r3, #0]
 8007262:	2300      	movs	r3, #0
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	4616      	mov	r6, r2
 8007268:	e7bc      	b.n	80071e4 <_printf_i+0x148>
 800726a:	6833      	ldr	r3, [r6, #0]
 800726c:	1d1a      	adds	r2, r3, #4
 800726e:	6032      	str	r2, [r6, #0]
 8007270:	681e      	ldr	r6, [r3, #0]
 8007272:	6862      	ldr	r2, [r4, #4]
 8007274:	2100      	movs	r1, #0
 8007276:	4630      	mov	r0, r6
 8007278:	f7f8 ffaa 	bl	80001d0 <memchr>
 800727c:	b108      	cbz	r0, 8007282 <_printf_i+0x1e6>
 800727e:	1b80      	subs	r0, r0, r6
 8007280:	6060      	str	r0, [r4, #4]
 8007282:	6863      	ldr	r3, [r4, #4]
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	2300      	movs	r3, #0
 8007288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800728c:	e7aa      	b.n	80071e4 <_printf_i+0x148>
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	4632      	mov	r2, r6
 8007292:	4649      	mov	r1, r9
 8007294:	4640      	mov	r0, r8
 8007296:	47d0      	blx	sl
 8007298:	3001      	adds	r0, #1
 800729a:	d0ad      	beq.n	80071f8 <_printf_i+0x15c>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	079b      	lsls	r3, r3, #30
 80072a0:	d413      	bmi.n	80072ca <_printf_i+0x22e>
 80072a2:	68e0      	ldr	r0, [r4, #12]
 80072a4:	9b03      	ldr	r3, [sp, #12]
 80072a6:	4298      	cmp	r0, r3
 80072a8:	bfb8      	it	lt
 80072aa:	4618      	movlt	r0, r3
 80072ac:	e7a6      	b.n	80071fc <_printf_i+0x160>
 80072ae:	2301      	movs	r3, #1
 80072b0:	4632      	mov	r2, r6
 80072b2:	4649      	mov	r1, r9
 80072b4:	4640      	mov	r0, r8
 80072b6:	47d0      	blx	sl
 80072b8:	3001      	adds	r0, #1
 80072ba:	d09d      	beq.n	80071f8 <_printf_i+0x15c>
 80072bc:	3501      	adds	r5, #1
 80072be:	68e3      	ldr	r3, [r4, #12]
 80072c0:	9903      	ldr	r1, [sp, #12]
 80072c2:	1a5b      	subs	r3, r3, r1
 80072c4:	42ab      	cmp	r3, r5
 80072c6:	dcf2      	bgt.n	80072ae <_printf_i+0x212>
 80072c8:	e7eb      	b.n	80072a2 <_printf_i+0x206>
 80072ca:	2500      	movs	r5, #0
 80072cc:	f104 0619 	add.w	r6, r4, #25
 80072d0:	e7f5      	b.n	80072be <_printf_i+0x222>
 80072d2:	bf00      	nop
 80072d4:	08007631 	.word	0x08007631
 80072d8:	08007642 	.word	0x08007642

080072dc <__sflush_r>:
 80072dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e4:	0716      	lsls	r6, r2, #28
 80072e6:	4605      	mov	r5, r0
 80072e8:	460c      	mov	r4, r1
 80072ea:	d454      	bmi.n	8007396 <__sflush_r+0xba>
 80072ec:	684b      	ldr	r3, [r1, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dc02      	bgt.n	80072f8 <__sflush_r+0x1c>
 80072f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dd48      	ble.n	800738a <__sflush_r+0xae>
 80072f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072fa:	2e00      	cmp	r6, #0
 80072fc:	d045      	beq.n	800738a <__sflush_r+0xae>
 80072fe:	2300      	movs	r3, #0
 8007300:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007304:	682f      	ldr	r7, [r5, #0]
 8007306:	6a21      	ldr	r1, [r4, #32]
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	d030      	beq.n	800736e <__sflush_r+0x92>
 800730c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	0759      	lsls	r1, r3, #29
 8007312:	d505      	bpl.n	8007320 <__sflush_r+0x44>
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	1ad2      	subs	r2, r2, r3
 8007318:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800731a:	b10b      	cbz	r3, 8007320 <__sflush_r+0x44>
 800731c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800731e:	1ad2      	subs	r2, r2, r3
 8007320:	2300      	movs	r3, #0
 8007322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007324:	6a21      	ldr	r1, [r4, #32]
 8007326:	4628      	mov	r0, r5
 8007328:	47b0      	blx	r6
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	d106      	bne.n	800733e <__sflush_r+0x62>
 8007330:	6829      	ldr	r1, [r5, #0]
 8007332:	291d      	cmp	r1, #29
 8007334:	d82b      	bhi.n	800738e <__sflush_r+0xb2>
 8007336:	4a2a      	ldr	r2, [pc, #168]	@ (80073e0 <__sflush_r+0x104>)
 8007338:	410a      	asrs	r2, r1
 800733a:	07d6      	lsls	r6, r2, #31
 800733c:	d427      	bmi.n	800738e <__sflush_r+0xb2>
 800733e:	2200      	movs	r2, #0
 8007340:	6062      	str	r2, [r4, #4]
 8007342:	04d9      	lsls	r1, r3, #19
 8007344:	6922      	ldr	r2, [r4, #16]
 8007346:	6022      	str	r2, [r4, #0]
 8007348:	d504      	bpl.n	8007354 <__sflush_r+0x78>
 800734a:	1c42      	adds	r2, r0, #1
 800734c:	d101      	bne.n	8007352 <__sflush_r+0x76>
 800734e:	682b      	ldr	r3, [r5, #0]
 8007350:	b903      	cbnz	r3, 8007354 <__sflush_r+0x78>
 8007352:	6560      	str	r0, [r4, #84]	@ 0x54
 8007354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007356:	602f      	str	r7, [r5, #0]
 8007358:	b1b9      	cbz	r1, 800738a <__sflush_r+0xae>
 800735a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800735e:	4299      	cmp	r1, r3
 8007360:	d002      	beq.n	8007368 <__sflush_r+0x8c>
 8007362:	4628      	mov	r0, r5
 8007364:	f7ff fbf2 	bl	8006b4c <_free_r>
 8007368:	2300      	movs	r3, #0
 800736a:	6363      	str	r3, [r4, #52]	@ 0x34
 800736c:	e00d      	b.n	800738a <__sflush_r+0xae>
 800736e:	2301      	movs	r3, #1
 8007370:	4628      	mov	r0, r5
 8007372:	47b0      	blx	r6
 8007374:	4602      	mov	r2, r0
 8007376:	1c50      	adds	r0, r2, #1
 8007378:	d1c9      	bne.n	800730e <__sflush_r+0x32>
 800737a:	682b      	ldr	r3, [r5, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0c6      	beq.n	800730e <__sflush_r+0x32>
 8007380:	2b1d      	cmp	r3, #29
 8007382:	d001      	beq.n	8007388 <__sflush_r+0xac>
 8007384:	2b16      	cmp	r3, #22
 8007386:	d11e      	bne.n	80073c6 <__sflush_r+0xea>
 8007388:	602f      	str	r7, [r5, #0]
 800738a:	2000      	movs	r0, #0
 800738c:	e022      	b.n	80073d4 <__sflush_r+0xf8>
 800738e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007392:	b21b      	sxth	r3, r3
 8007394:	e01b      	b.n	80073ce <__sflush_r+0xf2>
 8007396:	690f      	ldr	r7, [r1, #16]
 8007398:	2f00      	cmp	r7, #0
 800739a:	d0f6      	beq.n	800738a <__sflush_r+0xae>
 800739c:	0793      	lsls	r3, r2, #30
 800739e:	680e      	ldr	r6, [r1, #0]
 80073a0:	bf08      	it	eq
 80073a2:	694b      	ldreq	r3, [r1, #20]
 80073a4:	600f      	str	r7, [r1, #0]
 80073a6:	bf18      	it	ne
 80073a8:	2300      	movne	r3, #0
 80073aa:	eba6 0807 	sub.w	r8, r6, r7
 80073ae:	608b      	str	r3, [r1, #8]
 80073b0:	f1b8 0f00 	cmp.w	r8, #0
 80073b4:	dde9      	ble.n	800738a <__sflush_r+0xae>
 80073b6:	6a21      	ldr	r1, [r4, #32]
 80073b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073ba:	4643      	mov	r3, r8
 80073bc:	463a      	mov	r2, r7
 80073be:	4628      	mov	r0, r5
 80073c0:	47b0      	blx	r6
 80073c2:	2800      	cmp	r0, #0
 80073c4:	dc08      	bgt.n	80073d8 <__sflush_r+0xfc>
 80073c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	4407      	add	r7, r0
 80073da:	eba8 0800 	sub.w	r8, r8, r0
 80073de:	e7e7      	b.n	80073b0 <__sflush_r+0xd4>
 80073e0:	dfbffffe 	.word	0xdfbffffe

080073e4 <_fflush_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	690b      	ldr	r3, [r1, #16]
 80073e8:	4605      	mov	r5, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	b913      	cbnz	r3, 80073f4 <_fflush_r+0x10>
 80073ee:	2500      	movs	r5, #0
 80073f0:	4628      	mov	r0, r5
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	b118      	cbz	r0, 80073fe <_fflush_r+0x1a>
 80073f6:	6a03      	ldr	r3, [r0, #32]
 80073f8:	b90b      	cbnz	r3, 80073fe <_fflush_r+0x1a>
 80073fa:	f7ff f9ad 	bl	8006758 <__sinit>
 80073fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0f3      	beq.n	80073ee <_fflush_r+0xa>
 8007406:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007408:	07d0      	lsls	r0, r2, #31
 800740a:	d404      	bmi.n	8007416 <_fflush_r+0x32>
 800740c:	0599      	lsls	r1, r3, #22
 800740e:	d402      	bmi.n	8007416 <_fflush_r+0x32>
 8007410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007412:	f7ff fb98 	bl	8006b46 <__retarget_lock_acquire_recursive>
 8007416:	4628      	mov	r0, r5
 8007418:	4621      	mov	r1, r4
 800741a:	f7ff ff5f 	bl	80072dc <__sflush_r>
 800741e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007420:	07da      	lsls	r2, r3, #31
 8007422:	4605      	mov	r5, r0
 8007424:	d4e4      	bmi.n	80073f0 <_fflush_r+0xc>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	059b      	lsls	r3, r3, #22
 800742a:	d4e1      	bmi.n	80073f0 <_fflush_r+0xc>
 800742c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800742e:	f7ff fb8b 	bl	8006b48 <__retarget_lock_release_recursive>
 8007432:	e7dd      	b.n	80073f0 <_fflush_r+0xc>

08007434 <__swhatbuf_r>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	460c      	mov	r4, r1
 8007438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743c:	2900      	cmp	r1, #0
 800743e:	b096      	sub	sp, #88	@ 0x58
 8007440:	4615      	mov	r5, r2
 8007442:	461e      	mov	r6, r3
 8007444:	da0d      	bge.n	8007462 <__swhatbuf_r+0x2e>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800744c:	f04f 0100 	mov.w	r1, #0
 8007450:	bf14      	ite	ne
 8007452:	2340      	movne	r3, #64	@ 0x40
 8007454:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007458:	2000      	movs	r0, #0
 800745a:	6031      	str	r1, [r6, #0]
 800745c:	602b      	str	r3, [r5, #0]
 800745e:	b016      	add	sp, #88	@ 0x58
 8007460:	bd70      	pop	{r4, r5, r6, pc}
 8007462:	466a      	mov	r2, sp
 8007464:	f000 f848 	bl	80074f8 <_fstat_r>
 8007468:	2800      	cmp	r0, #0
 800746a:	dbec      	blt.n	8007446 <__swhatbuf_r+0x12>
 800746c:	9901      	ldr	r1, [sp, #4]
 800746e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007472:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007476:	4259      	negs	r1, r3
 8007478:	4159      	adcs	r1, r3
 800747a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800747e:	e7eb      	b.n	8007458 <__swhatbuf_r+0x24>

08007480 <__smakebuf_r>:
 8007480:	898b      	ldrh	r3, [r1, #12]
 8007482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007484:	079d      	lsls	r5, r3, #30
 8007486:	4606      	mov	r6, r0
 8007488:	460c      	mov	r4, r1
 800748a:	d507      	bpl.n	800749c <__smakebuf_r+0x1c>
 800748c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	6123      	str	r3, [r4, #16]
 8007494:	2301      	movs	r3, #1
 8007496:	6163      	str	r3, [r4, #20]
 8007498:	b003      	add	sp, #12
 800749a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800749c:	ab01      	add	r3, sp, #4
 800749e:	466a      	mov	r2, sp
 80074a0:	f7ff ffc8 	bl	8007434 <__swhatbuf_r>
 80074a4:	9f00      	ldr	r7, [sp, #0]
 80074a6:	4605      	mov	r5, r0
 80074a8:	4639      	mov	r1, r7
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7ff fbba 	bl	8006c24 <_malloc_r>
 80074b0:	b948      	cbnz	r0, 80074c6 <__smakebuf_r+0x46>
 80074b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b6:	059a      	lsls	r2, r3, #22
 80074b8:	d4ee      	bmi.n	8007498 <__smakebuf_r+0x18>
 80074ba:	f023 0303 	bic.w	r3, r3, #3
 80074be:	f043 0302 	orr.w	r3, r3, #2
 80074c2:	81a3      	strh	r3, [r4, #12]
 80074c4:	e7e2      	b.n	800748c <__smakebuf_r+0xc>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	6020      	str	r0, [r4, #0]
 80074ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	9b01      	ldr	r3, [sp, #4]
 80074d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074d6:	b15b      	cbz	r3, 80074f0 <__smakebuf_r+0x70>
 80074d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074dc:	4630      	mov	r0, r6
 80074de:	f000 f81d 	bl	800751c <_isatty_r>
 80074e2:	b128      	cbz	r0, 80074f0 <__smakebuf_r+0x70>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	431d      	orrs	r5, r3
 80074f4:	81a5      	strh	r5, [r4, #12]
 80074f6:	e7cf      	b.n	8007498 <__smakebuf_r+0x18>

080074f8 <_fstat_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d07      	ldr	r5, [pc, #28]	@ (8007518 <_fstat_r+0x20>)
 80074fc:	2300      	movs	r3, #0
 80074fe:	4604      	mov	r4, r0
 8007500:	4608      	mov	r0, r1
 8007502:	4611      	mov	r1, r2
 8007504:	602b      	str	r3, [r5, #0]
 8007506:	f7f9 fde6 	bl	80010d6 <_fstat>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	d102      	bne.n	8007514 <_fstat_r+0x1c>
 800750e:	682b      	ldr	r3, [r5, #0]
 8007510:	b103      	cbz	r3, 8007514 <_fstat_r+0x1c>
 8007512:	6023      	str	r3, [r4, #0]
 8007514:	bd38      	pop	{r3, r4, r5, pc}
 8007516:	bf00      	nop
 8007518:	200004a4 	.word	0x200004a4

0800751c <_isatty_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4d06      	ldr	r5, [pc, #24]	@ (8007538 <_isatty_r+0x1c>)
 8007520:	2300      	movs	r3, #0
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	f7f9 fde5 	bl	80010f6 <_isatty>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_isatty_r+0x1a>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_isatty_r+0x1a>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	200004a4 	.word	0x200004a4

0800753c <_sbrk_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d06      	ldr	r5, [pc, #24]	@ (8007558 <_sbrk_r+0x1c>)
 8007540:	2300      	movs	r3, #0
 8007542:	4604      	mov	r4, r0
 8007544:	4608      	mov	r0, r1
 8007546:	602b      	str	r3, [r5, #0]
 8007548:	f7f9 fdee 	bl	8001128 <_sbrk>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d102      	bne.n	8007556 <_sbrk_r+0x1a>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	b103      	cbz	r3, 8007556 <_sbrk_r+0x1a>
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	bd38      	pop	{r3, r4, r5, pc}
 8007558:	200004a4 	.word	0x200004a4

0800755c <_init>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	bf00      	nop
 8007560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007562:	bc08      	pop	{r3}
 8007564:	469e      	mov	lr, r3
 8007566:	4770      	bx	lr

08007568 <_fini>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	bf00      	nop
 800756c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756e:	bc08      	pop	{r3}
 8007570:	469e      	mov	lr, r3
 8007572:	4770      	bx	lr
